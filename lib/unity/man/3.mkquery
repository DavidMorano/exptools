


     mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))                  NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                  mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))



     NNNNAAAAMMMMEEEE
          mkquery, fmkquery, smkquery, vmkquery, vsmkquery - Make a
               query from relation names, attribute names, and a
               where-clause.

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          ####iiiinnnncccclllluuuuddddeeee """"uuuuqqqquuuueeeerrrryyyy....hhhh""""

          ssssttttrrrruuuucccctttt uuuuqqqquuuueeeerrrryyyy ****
          ffffmmmmkkkkqqqquuuueeeerrrryyyy(((( ffffllllaaaaggggssss,,,, rrrreeeellllppppaaaatttthhhhssss,,,, rrrreeeellllccccnnnntttt,,,, aaaattttttttrrrrnnnnaaaammmmeeeessss,,,, aaaattttttttrrrrccccnnnntttt,,,,
               ssssoooorrrrttttaaaattttttttrrrrssss,,,, ssssoooorrrrttttccccnnnntttt,,,, wwwwhhhheeeerrrreeeelllliiiisssstttt,,,, wwwwhhhheeeerrrreeeeccccnnnntttt ))))
          iiiinnnntttt ffffllllaaaaggggssss;;;;
          cccchhhhaaaarrrr ********rrrreeeellllppppaaaatttthhhhssss;;;;
          iiiinnnntttt rrrreeeellllccccnnnntttt;;;;
          cccchhhhaaaarrrr ********aaaattttttttrrrrnnnnaaaammmmeeeessss;;;;
          iiiinnnntttt aaaattttttttrrrrccccnnnntttt;;;;
          cccchhhhaaaarrrr ********ssssoooorrrrttttaaaattttttttrrrrssss;;;;
          iiiinnnntttt ssssoooorrrrttttccccnnnntttt;;;;
          cccchhhhaaaarrrr ********wwwwhhhheeeerrrreeeelllliiiisssstttt;;;;
          iiiinnnntttt wwwwhhhheeeerrrreeeeccccnnnntttt;;;;

          ssssttttrrrruuuucccctttt uuuuqqqquuuueeeerrrryyyy ****
          mmmmkkkkqqqquuuueeeerrrryyyy(((( rrrreeeellllppppaaaatttthhhhssss,,,, rrrreeeellllccccnnnntttt,,,, aaaattttttttrrrrnnnnaaaammmmeeeessss,,,, aaaattttttttrrrrccccnnnntttt,,,, wwwwhhhheeeerrrreeeelllliiiisssstttt,,,, wwwwhhhheeeerrrreeeeccccnnnntttt ))))
          cccchhhhaaaarrrr ********rrrreeeellllppppaaaatttthhhhssss;;;;
          iiiinnnntttt rrrreeeellllccccnnnntttt;;;;
          cccchhhhaaaarrrr ********aaaattttttttrrrrnnnnaaaammmmeeeessss;;;;
          iiiinnnntttt aaaattttttttrrrrccccnnnntttt;;;;
          cccchhhhaaaarrrr ********wwwwhhhheeeerrrreeeelllliiiisssstttt;;;;
          iiiinnnntttt wwwwhhhheeeerrrreeeeccccnnnntttt;;;;

          ssssttttrrrruuuucccctttt uuuuqqqquuuueeeerrrryyyy ****
          ssssmmmmkkkkqqqquuuueeeerrrryyyy(((( ffffllllaaaaggggssss,,,, rrrreeeellllppppaaaatttthhhhssssttttrrrr,,,, aaaattttttttrrrrnnnnaaaammmmeeeessssttttrrrr,,,, ssssoooorrrrttttssssttttrrrr,,,, wwwwhhhheeeerrrreeeessssttttrrrr ))))
          iiiinnnntttt ffffllllaaaaggggssss;;;;
          cccchhhhaaaarrrr ****rrrreeeellllppppaaaatttthhhhssssttttrrrr;;;;
          cccchhhhaaaarrrr ****aaaattttttttrrrrnnnnaaaammmmeeeessssttttrrrr;;;;
          cccchhhhaaaarrrr ****ssssoooorrrrttttssssttttrrrr;;;;
          cccchhhhaaaarrrr ****wwwwhhhheeeerrrreeeessssttttrrrr;;;;

          ssssttttrrrruuuucccctttt uuuuqqqquuuueeeerrrryyyy ****
          vvvvmmmmkkkkqqqquuuueeeerrrryyyy(((( ffffllllaaaaggggssss,,,, rrrreeeellllccccnnnntttt,,,, aaaattttttttrrrrccccnnnntttt,,,, ssssoooorrrrttttccccnnnntttt,,,, wwwwhhhheeeerrrreeeeccccnnnntttt,,,,
                    rrrreeeellllppppaaaatttthhhh,,,, ............,,,, aaaattttttttrrrrnnnnaaaammmmeeee,,,, ............,,,, ssssoooorrrrttttaaaattttttttrrrr,,,, ............,,,, wwwwhhhheeeerrrreeeeaaaarrrrgggg,,,, ............ ))))
          iiiinnnntttt ffffllllaaaaggggssss;;;;
          iiiinnnntttt rrrreeeellllccccnnnntttt;;;;
          iiiinnnntttt aaaattttttttrrrrccccnnnntttt;;;;
          iiiinnnntttt ssssoooorrrrttttccccnnnntttt;;;;
          iiiinnnntttt wwwwhhhheeeerrrreeeeccccnnnntttt;;;;
          cccchhhhaaaarrrr ****rrrreeeellllppppaaaatttthhhh,,,, ............;;;;
          cccchhhhaaaarrrr ****aaaattttttttrrrrnnnnaaaammmmeeee,,,, ............;;;;
          cccchhhhaaaarrrr ****ssssoooorrrrttttaaaattttttttrrrr,,,, ............;;;;
          cccchhhhaaaarrrr ****wwwwhhhheeeerrrreeeeaaaarrrrgggg,,,, ............;;;;

          ssssttttrrrruuuucccctttt uuuuqqqquuuueeeerrrryyyy ****



     Page 1                                         (printed 10/28/91)






     mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))                  NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                  mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))



          vvvvssssmmmmkkkkqqqquuuueeeerrrryyyy(((( ffffllllaaaaggggssss,,,, rrrreeeellllccccnnnntttt,,,, aaaattttttttrrrrccccnnnntttt,,,, ssssoooorrrrttttccccnnnntttt,,,,
                    rrrreeeellllppppaaaatttthhhh,,,, ............,,,, aaaattttttttrrrrnnnnaaaammmmeeee,,,, ............,,,, ssssoooorrrrttttaaaattttttttrrrr,,,, ............,,,, wwwwhhhheeeerrrreeeessssttttrrrr ))))
          iiiinnnntttt ffffllllaaaaggggssss;;;;
          iiiinnnntttt rrrreeeellllccccnnnntttt;;;;
          iiiinnnntttt aaaattttttttrrrrccccnnnntttt;;;;
          iiiinnnntttt ssssoooorrrrttttccccnnnntttt;;;;
          cccchhhhaaaarrrr ****rrrreeeellllppppaaaatttthhhh,,,, ............;;;;
          cccchhhhaaaarrrr ****aaaattttttttrrrrnnnnaaaammmmeeee,,,, ............;;;;
          cccchhhhaaaarrrr ****ssssoooorrrrttttaaaattttttttrrrr,,,, ............;;;;
          cccchhhhaaaarrrr ****wwwwhhhheeeerrrreeeessssttttrrrr;;;;

          vvvvooooiiiidddd
          uuuunnnnmmmmkkkkqqqquuuueeeerrrryyyy(((( qqqquuuueeeerrrryyyy ))))
          ssssttttrrrruuuucccctttt uuuuqqqquuuueeeerrrryyyy ****qqqquuuueeeerrrryyyy;;;;

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          The ffffmmmmkkkkqqqquuuueeeerrrryyyy() routine builds a query data structure
          suitable for use with qqqquuuueeeerrrryyyyeeeevvvvaaaallll(3), based on the list of
          relation names, projected and sorted attribute names, and
          where-clause passed in.  The uuuunnnnmmmmkkkkqqqquuuueeeerrrryyyy() routine frees all
          the dynamically allocated memory associated with the given
          query structure.  The additional routines mmmmkkkkqqqquuuueeeerrrryyyy(),
          ssssmmmmkkkkqqqquuuueeeerrrryyyy(), vvvvmmmmkkkkqqqquuuueeeerrrryyyy(), and vvvvssssmmmmkkkkqqqquuuueeeerrrryyyy(), are alternate
          interfaces to ffffmmmmkkkkqqqquuuueeeerrrryyyy().  The mmmmkkkkqqqquuuueeeerrrryyyy() routine is provided
          for backward compatibilty.  It does not allow flags to
          specify additional query options such as sorting and
          uniqueness of retrieved tuples, and does not allow the
          specification of sort attributes.  With ssssmmmmkkkkqqqquuuueeeerrrryyyy() the
          relation list, attribute lists, and where-clause are given
          as single strings, rather than as a list of individual
          arguments.  Each string is broken into individual arguments
          delimited by white space and passed to ffffmmmmkkkkqqqquuuueeeerrrryyyy().  With
          vvvvmmmmkkkkqqqquuuueeeerrrryyyy() arguments are given directly in the function
          call, rather than in character pointer arrays.  This
          interface uses the vvvvaaaarrrraaaarrrrggggssss(5) facilities to assemble
          parameters into arrays for ffffmmmmkkkkqqqquuuueeeerrrryyyy().  With vvvvssssmmmmkkkkqqqquuuueeeerrrryyyy() the
          relation list and attribute lists are given as individual
          arguments, like vvvvmmmmkkkkqqqquuuueeeerrrryyyy(), while the where clause is given
          as a single string, like ssssmmmmkkkkqqqquuuueeeerrrryyyy().

          All of these functions return a pointer to a query structure
          on success and NULL on failure.  Unlike other New UNITY
          commands, ffffmmmmkkkkqqqquuuueeeerrrryyyy() will print error messages using
          pppprrrrmmmmssssgggg(3), rather than setting an error code in the uuuueeeerrrrrrrroooorrrr
          variable.  This is done so context information can be given
          in the error messages.

          ffffmmmmkkkkqqqquuuueeeerrrryyyy() is a higher level interface to the ggggeeeettttrrrreeeelllliiiinnnnffffoooo(3),
          llllooooooookkkkuuuuppppaaaattttttttrrrr(3), and bbbbllllddddqqqquuuueeeerrrryyyy(3) routines.  It is provided to
          avoid the necessity of knowing anything about individual
          data structures in straight forward situations.




     Page 2                                         (printed 10/28/91)






     mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))                  NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                  mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))



          See the EEEEXXXXTTTTEEEENNNNDDDDEEEEDDDD DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN section of the ccccmmmmppppqqqquuuueeeerrrryyyy(1)
          manual page for information on compiling and linking
          commands which use the new UNITY.

     PPPPAAAARRRRAAAAMMMMEEEETTTTEEEERRRRSSSS
          _f_l_a_g_s
               Alter the default operation of the query.  Any
               combination of the following flags may be OR'ed
               together.

               QQQQ____SSSSOOOORRRRTTTT - Sort the output of the query.  By default the
               output of a query is not sorted, unless one or more
               sorted attributes are given.  This flag dictates that
               the output should be sorted, regardless or whether
               sorted attribute were given or not.  Normally
               attributes are sorted in the order given and the
               attribute values are put in ascending order.  Modifiers
               may be attached to the sorted attribute names change
               the sort criteria.  See the rrrreeeettttrrrriiiieeeevvvveeee(1) manual page for
               more details about attribute modifiers.

               QQQQ____UUUUNNNNIIIIQQQQUUUUEEEE - Each projected tuple will be unique.  By
               default, duplicate tuples may be retrieved by the
               query.  This flag turns on checking to make sure each
               combination of projected attributes is unique.
               Normally, a character-by-character comparison is used
               to compare attribute values for uniqueness.  Modifiers
               may be attached to the projected attribute names to
               change the type of comparison used to determine
               uniqueness, such as a numeric comparison.  See the
               rrrreeeettttrrrriiiieeeevvvveeee(1) manual page for more details about
               attribute modifiers.

               QQQQ____FFFFRRRRIIIIEEEENNNNDDDDLLLLYYYY - The friendly names (if available) are used
               as the print names for projected attributes, rather
               than the attribute names themselves.

               QQQQ____NNNNOOOOEEEEXXXXPPPPAAAANNNNDDDD - Do not expand any instances of the ``all''
               attribute.  If this flag is present, any references to
               the ``all'' attribute will _n_o_t be expanded to all
               attributes in the given relation.  The query will also
               be marked as un-initialized, whether it contains
               references to the ``all'' attribute or not.  If
               qqqquuuueeeerrrryyyyeeeevvvvaaaallll(3) called with the un-initialized query, it
               will always fail.  The routine eeeexxxxpppprrrroooojjjjlllliiiisssstttt(3) can be
               called to expand the attributes and finish initializing
               the query.  This flag should only be used when this
               expansion needs to be delayed for some reason (e.g.,
               when compiling a query into C code as ccccmmmmppppqqqquuuueeeerrrryyyy(1)
               does).

               QQQQ____NNNNOOOOCCCCAAAASSSSEEEECCCCMMMMPPPP - All string and regular expression



     Page 3                                         (printed 10/28/91)






     mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))                  NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                  mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))



               comparisons in the where-clause should ignore the case
               of letters.

          _r_e_l_p_a_t_h_s
          _r_e_l_p_a_t_h, ...
               A list of full or partial paths to the relations used
               in the query.  The list is either given as an array of
               character pointers (ffffmmmmkkkkqqqquuuueeeerrrryyyy() ) or as individual paths
               given directly in the function call (vvvvmmmmkkkkqqqquuuueeeerrrryyyy() and
               vvvvssssmmmmkkkkqqqquuuueeeerrrryyyy() ).  The number of relations is given in
               _r_e_l_c_n_t.  The relations need to exist and be readable.

               An alternate relation description can be given for each
               relation by appending an equals sign (=) and the
               alternate relation name to the original relation path.
               For example to interpret _t_m_p_f_i_l_e like /_e_t_c/_p_a_s_s_w_d, a
               relation name of ``tmpfile=passwd'' would be used.
               Note that if the alternate relation contains a path,
               the path will only be used if the descriptor file
               cannot be found in one of the UNITYDFILES directories
               or in the current directory.

               The special relation name ``-'' is interpreted as the
               standard input.  It may be given at most once in the
               relation names.  It must always have an alternate
               descriptor file associated with it.  For example, if
               the standard input is coming from /_e_t_c/_p_a_s_s_w_d, the
               relation name ``-=passwd'' would be used.

          _r_e_l_c_n_t
               The number of relations listed in the array _r_e_l_p_a_t_h_s or
               given directly as part of the function call in
               ``_r_e_l_p_a_t_h, ...''.

          _r_e_l_p_a_t_h_s_t_r
               A string containing the white-space separated path
               names to the relations used in the query.  The
               individual path names are interpreted the same as for
               the _r_e_l_p_a_t_h_s parameter above.

               The _r_e_l_p_a_t_h_s_t_r string will be altered by ssssmmmmkkkkqqqquuuueeeerrrryyyy() to
               null terminate each relation path.

          _a_t_t_r_n_a_m_e_s
          _a_t_t_r_n_a_m_e, ...
               The list of projected attributes for the query.  The
               list is either given as an array of character pointers
               (ffffmmmmkkkkqqqquuuueeeerrrryyyy() ) or as individual attribute names given
               directly in the function call (vvvvmmmmkkkkqqqquuuueeeerrrryyyy() and
               vvvvssssmmmmkkkkqqqquuuueeeerrrryyyy() ).  The number of projected attributes is
               given in _a_t_t_r_c_n_t.




     Page 4                                         (printed 10/28/91)






     mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))                  NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                  mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))



               If no attributes are are given, then all attributes
               from all relations which don't have an explicit zero
               print width in the descriptor file are retrieved.  If a
               single null attribute is given (as either "" or NULL),
               then no tuples will be retrieved, but the existence of
               a tuple matching the given where-clause will be
               indicated by whether qqqquuuueeeerrrryyyyeeeevvvvaaaallll(3) returns true or
               false.

               If an attribute is not unique among the queried
               relations, it must be prefixed by the file name of the
               relation and a period (e.g., passwd.login) or by the
               positional number of the relation in _r_e_l_n_a_m_e_s and a
               period (e.g., 1.login).  The positional numbering
               starts at one and goes through _r_e_l_c_n_t.

               This same naming convention also applies to attribute
               references in the where-clause.

               Several special attributes are defined for any
               relation.  The ``rec#'' attribute refers to each
               tuple's positional number within the relation.  The
               ``seek#'' attribute refers to file location where each
               tuple starts.  The ``all'' attribute can be used in the
               projection list as an abbreviation for all attributes
               of a relation.

               Attribute names may have optional modifiers appended to
               them to print width and justification.  Each modifier
               starts with a colon (``:'') followed by a key word.
               For example, to specify a ``count'' field with a print
               width of 15, ``count:15'' would be used.  See the
               rrrreeeettttrrrriiiieeeevvvveeee(1) manual page for complete details on
               attribute modifiers.

               Attribute names may also be renamed in the qprojection
               structure by appending ``as'' and the new name as the
               next two entries in the array (or arguments) after the
               attribute name.  For example, to rename the ``login''
               field, ``login'', ``as'', ``Login Name'' would be
               placed in the _a_t_t_r_n_a_m_e_s array or as individual function
               arguments.

          _a_t_t_r_c_n_t
               The number of projected attributes listed in the array
               _a_t_t_r_n_a_m_e_s or given directly as part of the function
               call in ``_a_t_t_r_n_a_m_e, ...''.

          _a_t_t_r_n_a_m_e_s_t_r
               A string containing a list of the projected attributes,
               separated by white space.  The individual attribute
               names are interpreted the same as for the _a_t_t_r_n_a_m_e_s



     Page 5                                         (printed 10/28/91)






     mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))                  NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                  mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))



               parameter above.  The _a_t_t_r_n_a_m_e_s_t_r string will be
               altered by ssssmmmmkkkkqqqquuuueeeerrrryyyy() to null terminate each attribute
               name.

          _s_o_r_t_a_t_t_r_s
          _s_o_r_t_a_t_t_r, ...
               The list of attributes on which to sort the output of
               the query.  The list is either given as an array of
               character pointers (ffffmmmmkkkkqqqquuuueeeerrrryyyy() ) or as individual
               attribute names given directly in the function call
               (vvvvmmmmkkkkqqqquuuueeeerrrryyyy() and vvvvssssmmmmkkkkqqqquuuueeeerrrryyyy() ).  The number of sort
               attributes is given in _s_o_r_t_c_n_t.  The individual
               attribute names are interpreted the same as for the
               _a_t_t_r_n_a_m_e_s parameter above.

               If QQQQ____SSSSOOOORRRRTTTT is specified in _f_l_a_g_s but no sort attributes
               are are given, then all projected attributes will be
               sorted on in the order they were given.

               Attribute names may have optional modifiers appended to
               them to control the type of comparisons and sorting
               order.  Each modifier starts with a colon (``:'')
               followed by a key word.  For example, to specify a
               ``count'' field as sorted numerically,
               ``count:numeric'' would be used.  Sorting criteria may
               also be specified on the projected attributes, but any
               sort attribute modifiers take precedence.  See the
               rrrreeeettttrrrriiiieeeevvvveeee(1) manual page for complete details on
               attribute modifiers.

          _s_o_r_t_c_n_t
               The number of sort attributes listed in the array
               _s_o_r_t_a_t_t_r_s or given directly as part of the function
               call in ``_s_o_r_t_a_t_t_r, ...''.

          _s_o_r_t_s_t_r
               A string containing a list of the attributes to sort
               on, separated by white space.  The individual attribute
               names are interpreted the same as for the _a_t_t_r_n_a_m_e_s
               parameter above.  The _s_o_r_t_s_t_r string will be altered by
               ssssmmmmkkkkqqqquuuueeeerrrryyyy() to null terminate each attribute name.

          _w_h_e_r_e_l_i_s_t
          _w_h_e_r_e_a_r_g, ...
               A list of strings representing the where-clause of the
               query.  Each string should be one argument as if typed
               on a command line to the shell.  The list is either
               given as an array of character pointers (ffffmmmmkkkkqqqquuuueeeerrrryyyy() )
               or as individual arguments given directly in the
               function call vvvvmmmmkkkkqqqquuuueeeerrrryyyy() ).  The number of arguments in
               the where-clause is given in _w_h_e_r_e_c_n_t.




     Page 6                                         (printed 10/28/91)






     mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))                  NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                  mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))



               If any argument of the where-clause must contain white
               space, this interface must be used to avoid mis-
               interpretation of the white space as an argument
               delimiter in the where-clause.

               The where-clause specifies a subset of records to be
               retrieved.  If no where-clause is given, a cross
               product of all records in all projected relations will
               be retrieved.

               The where-clause is made up of expressions comparing
               the value of an attribute to a constant or to the value
               of another attribute.  The expressions can be combined
               using boolean operators and parenthesis.

               The comparison operators are: lllltttt (less than), lllleeee (less
               than or equal to), ggggtttt (greater than), ggggeeee (greater than
               or equal to), eeeeqqqq (equal to), and nnnneeee (not equal to). If
               they appear as is, they are numeric comparisons.  They
               can also have the following prefixes: llll (lexical
               comparison), cccc (lexical comparison, but ignore the case
               of letters), nnnn (numeric comparison), rrrr (regular
               expression comparison - eeeeqqqq and nnnneeee only), dddd (date and
               time comparison), and ffff (field-to-field comparison -
               may also be combined with llll, cccc, nnnn, and dddd prefixes).

               The boolean operations are: !!!! (negation), aaaannnndddd (logical
               conjunction), oooorrrr (logical disjunction), (((( and ))))
               (grouping), and eeeellllsssseeee (selection precedence).

               See the rrrreeeettttrrrriiiieeeevvvveeee(1) manual page for more information.

          _w_h_e_r_e_c_n_t
               The number of arguments in the where-clause given in
               the array _w_h_e_r_e_l_i_s_t or directly as part of the function
               call in ``_w_h_e_r_e_a_r_g, ...''.

               If _w_h_e_r_e_c_n_t is less than or equal to zero, no
               restriction is applied to the query and a cross product
               of all tuples in all relations is retrieved.

          _w_h_e_r_e_s_t_r
               A string representing the where-clause of the query.
               The individual arguments of the where-clause are
               delimited by white-space.  If any argument of the
               where-clause must contain white space, ssssmmmmkkkkqqqquuuueeeerrrryyyy() and
               vvvvssssmmmmkkkkqqqquuuueeeerrrryyyy() cannot be used.  Instead, the where-clause
               must be given as an array or as individual arguments to
               ffffmmmmkkkkqqqquuuueeeerrrryyyy() or vvvvmmmmkkkkqqqquuuueeeerrrryyyy(), respectively.

               The _w_h_e_r_e_s_t_r string will be altered by ssssmmmmkkkkqqqquuuueeeerrrryyyy() or
               vvvvssssmmmmkkkkqqqquuuueeeerrrryyyy() to null terminate each where-clause



     Page 7                                         (printed 10/28/91)






     mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))                  NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                  mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))



               argument.

               If _w_h_e_r_e_s_t_r is NULL or an empty string, no restriction
               is applied to the query and a cross product of all
               tuples in all relations is retrieved.

               The syntax of _w_h_e_r_e_s_t_r is the same as for the _w_h_e_r_e_l_i_s_t
               described above.

     EEEENNNNVVVVIIIIRRRROOOONNNNMMMMEEEENNNNTTTT
          UNITYDFILES
               A colon-separated list of directories to search for the
               relation descriptor file.  If this is not specified, or
               if the needed file is not found in one of the
               directories, the current directory is searched.  If
               that fails, the directory portion of each individual
               _r_e_l_p_a_t_h is searched.

               Some previous UNITY implementations only accept one
               directory in this variable.  Also, they use it only
               after looking in the current directory and in the
               relation's directory.  Some commands do not use this
               variable at all.

     EEEEXXXXIIIITTTT CCCCOOOODDDDEEEESSSS
          A pointer to a query data structure is returned on success;
          NULL is returned on failure and an explanatory error message
          will have been printed using pppprrrrmmmmssssgggg(3).

     RRRREEEESSSSTTTTRRRRIIIICCCCTTTTIIIIOOOONNNNSSSS
          No more than MAXRELATION (currently defined in _u_q_u_e_r_y._h as
          8) relations may be used in the query.

          At most MAXATT attributes can be retrieved by the query.
          This is currently defined in _u_r_e_l_a_t_i_o_n._h as 200 from main
          frames and 100 for other machines.  Any attributes over this
          limit are not retrieved.  All relations must have less than
          MAXATT _a_t_t_r_i_b_u_t_e_s, _a_l_s_o.

     EEEEXXXXAAAAMMMMPPPPLLLLEEEE
          Build a query that shows an employee, ``Jones'', and the
          name of the department he/she works in.  (We're assuming
          here that the _e_m_p_l_o_y_e_e relation does not give the department
          name directly, but gives a department id.  The department id
          must be joined with the _d_e_p_a_r_t_m_e_n_t relation to get the
          department name.)  Sort the output uniquely on the
          department id.  First, do the query using ffffmmmmkkkkqqqquuuueeeerrrryyyy(3).

               char *relnames[2];
               char *attrnames[2];
               char *sortattr[1];
               char *where[10];



     Page 8                                         (printed 10/28/91)






     mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))                  NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                  mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))



               int relcnt, attrcnt, sortcnt, wherecnt;
               struct uquery *query;

               relnames[0] = "../employee";       /* relation 1 */
               relnames[1] = "../department";          /* relation 2 */
               relcnt = 2;
               /*
                * The "name" attribute is not unique.  So we must include the relation
                * name or positional number in the attribute name.  For illustrative
                * puposes, we'll do it both ways.
                */
               attrnames[0] = "employee.name";
               attrnames[1] = "2.name";      /* department is relation 2 */
               attrcnt = 2;
               sortattr[0] = "1.deptid";
               sortcnt = 1;
               where[0] = "employee.name";
               where[1] = "=";
               where[2] = "Jones";
               where[3] = "and";
               where[4] = "1.deptid"         /* employee is relation 1 */
               where[5] = "f="          /* ``f'' => field-to-field compare, not fld-to-value */
               where[6] = "department.deptid";
               wherecnt = 7;

               /*
                * Since we're supplying sort attributes, the query output
                * will be sorted even without the Q_SORT passed in in the
                * flags.  We're just including it here to be thorough.
                * However, since we want every tuple to be unique, Q_UNIQUE
                * must be passed in.
                */
               query = fmkquery( Q_SORT|Q_UNIQUE, relnames, relcnt, attrnames, attrcnt,
                         sortattr, sortcnt, where, wherecnt );
               if ( query == NULL ) {
                    /*
                     * Return failure.  An error message has already been printed
                     * using prmsg(3).
                     */
               }

          Now build the same query using ssssmmmmkkkkqqqquuuueeeerrrryyyy() giving each part
          as a single string.

               struct uquery *query;

               query = smkquery( Q_SORT|Q_UNIQUE, /* output sorted uniquely */
                         "../employee ../department",  /* relations */
                         "employee.name 2.name",       /* projected attributes */
                         "1.deptid",              /* sort attributes */
                                             /* where-clause */
                         "employee.name = Jones and 1.deptid f= department.deptid" );



     Page 9                                         (printed 10/28/91)






     mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))                  NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                  mmmmkkkkqqqquuuueeeerrrryyyy((((3333))))



               if ( query == NULL ) {
                    /*
                     * Return failure.  An error message has already been printed
                     * using prmsg(3).
                     */
               }

          Now build the query again using vvvvmmmmkkkkqqqquuuueeeerrrryyyy() giving the
          individual arguments as part of the function call itself.

               struct uquery *query;

               query = vmkquery( Q_SORT|Q_UNIQUE, /* output sorted uniquely */
                         2, 2, 1, 7,    /* relation, attribute, and where counts */
                         "../employee", "../department",         /* 2 relations */
                         "employee.name", "2.name",    /* 2 projected attributes */
                         "1.deptid",              /* 1 sort attribute */
                         "employee.name", "=", "Jones", "and",   /* 7 where args */
                         "1.deptid", "f=", "department.deptid" );
               if ( query == NULL ) {
                    /*
                     * Return failure.  An error message has already been printed
                     * using prmsg(3).
                     */
               }

          Finally, use vvvvssssmmmmkkkkqqqquuuueeeerrrryyyy() to build the query giving the
          where-clause as a single string.

               struct uquery *query;

               query = vsmkquery( 2, 2, 1,   /* relation and attribute counts */
                         "../employee", "../department",         /* 2 relations */
                         "employee.name", "2.name",    /* 2 projected attributes */
                         "1.deptid",              /* 1 sort attribute */
                         "employee.name = Jones and 1.deptid f= department.deptid" );
               if ( query == NULL ) {
                    /*
                     * Return failure.  An error message has already been printed
                     * using prmsg(3).
                     */
               }

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          bldquery(3), cmpquery(1), getrelinfo(3), lookupattr(3),
          prmsg(3), queryeval(3), and retrieve(1).









     Page 10                                        (printed 10/28/91)



