


     HHHHIIIIGGGGHHHH LLLLEEEEVVVVEEEELLLL FFFFUUUUNNNNCCCCTTTTIIIIOOOONNNNSSSS((((UUUUNNNNIIIITTTTYYYY))))UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVVHHHHIIIIGGGGHHHH LLLLEEEEVVVVEEEELLLL FFFFUUUUNNNNCCCCTTTTIIIIOOOONNNNSSSS((((UUUUNNNNIIIITTTTYYYY))))



     NNNNAAAAMMMMEEEE
          Uinthl - High Level Function Interface

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          uclean()                                     /* cleanup function */

          alter(argc,argv) int argc; char *argv[];     /* alter command */
          asort(argc,argv) int argc; char *argv[];     /* asort command */
          catalog(argc,argv) int argc; char *argv[];   /* catalog command */
          compute(argc,argv) int argc; char *argv[];   /* compute command */
          ddist(argc,argv) int argc; char *argv[];     /* ddist command */
          delete(argc,argv) int argc; char *argv[];    /* delete command */
          dis(argc,argv) int argc; char *argv[];       /* dis command */
          dist(argc,argv) int argc; char *argv[];      /* dist command */
          ei(argc,argv) int argc; char *argv[];        /* ei command */
          et(argc,argv) int argc; char *argv[];        /* et command */
          format(argc,argv) int argc; char *argv[];    /* format command */
          index(argc,argv) int argc; char *argv[];     /* index command */
          insert(argc,argv) int argc; char *argv[];    /* insert command */
          load(argc,argv) int argc; char *argv[];      /* load command */
          merge(argc,argv) int argc; char *argv[];     /* merge command */
          outerjoin(argc,argv) int argc; char *argv[]; /* outerjoin command */
          packet(argc,argv) int argc; char *argv[];    /* packet command */
          regjoin(argc,argv) int argc; char *argv[];   /* regjoin command */
          setdiff(argc,argv) int argc; char *argv[];   /* setdiff command */
          ustat(argc,argv) int argc; char *argv[];     /* stat command */
          table(argc,argv) int argc; char *argv[];     /* table command */
          tuple(argc,argv) int argc; char *argv[];     /* tuple command */
          ucheck(argc,argv) int argc; char *argv[];    /* ucheck command */
          uedit(argc,argv) int argc; char *argv[];     /* uedit command */
          uenter(argc,argv) int argc; char *argv[];    /* uenter command */
          ujoin(argc,argv) int argc; char *argv[];     /* ujoin command */
          unload(argc,argv) int argc; char *argv[];    /* unload command */
          unmerge(argc,argv) int argc; char *argv[];   /* unmerge command */
          uprint(argc,argv) int argc; char *argv[];    /* uprint command */
          uprintf(argc,argv) int argc; char *argv[];   /* uprintf command */
          uselect(argc,argv) int argc; char *argv[];   /* uselect command */

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          The UNITY high level function interface provides a single
          function call to execute each UNITY command.  The function
          name is same as UNITY main name (with the exception of _s_t_a_t
          which is named _u_s_t_a_t).  Use of this interface saves overhead
          of _s_y_s_t_e_m(3) function call (the overhead of fork(2) and
          exec(2)).

          The parameters passed to the functions are in argc-argv
          format, as if they were passed to the UNITY main program.
          _a_r_g_c is the count of arguments in the array of character
          pointers.  The second argument, _a_r_g_v, is an array of
          character pointers which point to the arguments for the
          command.  _a_r_g_v[0] should point to the name of the command



     Page 1                                          (printed 1/19/90)






     HHHHIIIIGGGGHHHH LLLLEEEEVVVVEEEELLLL FFFFUUUUNNNNCCCCTTTTIIIIOOOONNNNSSSS((((UUUUNNNNIIIITTTTYYYY))))UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVVHHHHIIIIGGGGHHHH LLLLEEEEVVVVEEEELLLL FFFFUUUUNNNNCCCCTTTTIIIIOOOONNNNSSSS((((UUUUNNNNIIIITTTTYYYY))))



          being executed (generally, used when printing error
          messages).  The character pointer beyond the last parameter
          must be set to NULL.  Unlike entering parameters using the
          shell interface, special characters within parameters for
          the function interface should not be escaped (i.e., they are
          not expanded by the shell).

          The return code from function is 0 if there are no errors
          and 1 if an error occurs.  Most functions print error
          messages to the standard error output if an error occurs.
          This error printing can be turned off by setting the
          external integer variable Unoerrpr to 1 (used in the _e_r_r_o_r()
          function).

          After EACH UNITY function call, the _u_c_l_e_a_n() function MUST
          BE called.  This function closes all files opened by the
          UNITY function and removes temporary and lock files, One
          cannot avoid calling the _u_c_l_e_a_n() function in hopes that the
          lock file will be left around to protect other updates since
          the lock file name changes for each update.  Similarly, one
          cannot avoid calling the _u_c_l_e_a_n() function over several
          function calls and expect all of the opened files to be
          closed or temporary files removed.  For software calling
          UNITY functions which create a temporary file and/or a lock
          file (especially the later), the calling program should
          catch signals such as break and hangup and call the _u_c_l_e_a_n()
          function to clean up the files (see the example below).

     EEEEXXXXAAAAMMMMPPPPLLLLEEEE
          #include <signal.h>
          extern int uclean();

          static int
          intr()
          {
            /* ignore new signals */
            (void) signal(SIGINT,SIG_IGN);
            (void) signal(SIGQUIT,SIG_IGN);
            (void) signal(SIGHUP,SIG_IGN);
            (void) signal(SIGTERM,SIG_IGN);
            uclean();  /* uclean temp files */
            exit(1);
          }

          main(argc,argv)
          int argc;
          char *argv[];
          {
            char *myargv[10]; int ret;
            int ret;
            int (*istat)(), (*qstat)(), (*hstat)(), (*tstat)();




     Page 2                                          (printed 1/19/90)






     HHHHIIIIGGGGHHHH LLLLEEEEVVVVEEEELLLL FFFFUUUUNNNNCCCCTTTTIIIIOOOONNNNSSSS((((UUUUNNNNIIIITTTTYYYY))))UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVVHHHHIIIIGGGGHHHH LLLLEEEEVVVVEEEELLLL FFFFUUUUNNNNCCCCTTTTIIIIOOOONNNNSSSS((((UUUUNNNNIIIITTTTYYYY))))



            /* catch signals to get rid of temp and lock files */
            if((istat = signal(SIGINT,intr)) == SIG_IGN)
               signal(SIGINT,SIG_IGN);
            if((qstat = signal(SIGQUIT,intr)) == SIG_IGN)
               signal(SIGQUIT,SIG_IGN);
            if((hstat = signal(SIGHUP,intr)) == SIG_IGN)
               signal(SIGHUP,SIG_IGN);
            if((tstat = signal(SIGTERM,intr)) == SIG_IGN)
               signal(SIGTERM,SIG_IGN);


            /* execute "alter city to paris in S where snumber leq s1" */
            myargv[0] = "alter"; myargv[1] = "city";
            myargv[2] = "to"; myargv[3] = "paris";
            myargv[4] = "in"; myargv[5] = "S";
            myargv[6] = "where"; myargv[7] = "snumber";
            myargv[8] = "leq"; myargv[9] = "s1";
            myargv[10] = NULL;

            /* do the alter command and cleanup */
            ret=alter(10,myargv);
            uclean();

            /* reset signals */
            signal(SIGINT,istat);
            signal(SIGQUIT,qstat);
            signal(SIGHUP,hstat);
            signal(SIGTERM,tstat);

            exit(ret);
          }

     FFFFIIIILLLLEEEESSSS
          zalter.c, ... - source file names begin with z
          dblib.a - the archive library file

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          _U_i_n_t_l_l(UNITY)

     BBBBUUUUGGGGSSSS
          If output from a command is to go to the standard output, it
          is always buffered in a buffer allocated using _m_a_l_l_o_c(3).
          At the end of the command, the buffer is flushed and freed,
          and the output becomes unbuffered.  This will interfere with
          any buffering set up by the calling program.










     Page 3                                          (printed 1/19/90)



