


     bbbbllllddddqqqquuuueeeerrrryyyy((((3333))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 bbbbllllddddqqqquuuueeeerrrryyyy((((3333))))



     NNNNAAAAMMMMEEEE
          bldquery - Build a query structure from relation, attribute,
          and where-clause information.

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          ####iiiinnnncccclllluuuuddddeeee """"uuuuqqqquuuueeeerrrryyyy....hhhh""""

          ssssttttrrrruuuucccctttt uuuuqqqquuuueeeerrrryyyy ****
          bbbbllllddddqqqquuuueeeerrrryyyy(((( nnnnooooddddeeeelllliiiisssstttt,,,, nnnnooooddddeeeeccccnnnntttt,,,, aaaattttttttrrrrlllliiiisssstttt,,,, aaaattttttttrrrrccccnnnntttt,,,, eeeexxxxpppprrrrppppttttrrrr ))))
          ssssttttrrrruuuucccctttt qqqqnnnnooooddddeeee ****nnnnooooddddeeeelllliiiisssstttt;;;;
          iiiinnnntttt nnnnooooddddeeeeccccnnnntttt;;;;
          ssssttttrrrruuuucccctttt qqqqpppprrrroooojjjjeeeeccccttttiiiioooonnnn ****aaaattttttttrrrrlllliiiisssstttt;;;;
          iiiinnnntttt aaaattttttttrrrrccccnnnntttt;;;;
          ssssttttrrrruuuucccctttt qqqquuuueeeerrrryyyyeeeexxxxpppprrrr ****qqqqppppttttrrrr;;;;

          ssssttttrrrruuuucccctttt uuuuqqqquuuueeeerrrryyyy ****
          ffffbbbbllllddddqqqquuuueeeerrrryyyy(((( nnnnooooddddeeeelllliiiisssstttt,,,, nnnnooooddddeeeeccccnnnntttt,,,, aaaattttttttrrrrlllliiiisssstttt,,,, aaaattttttttrrrrccccnnnntttt,,,, eeeexxxxpppprrrrppppttttrrrr,,,, ffffllllaaaaggggssss ))))
          ssssttttrrrruuuucccctttt qqqqnnnnooooddddeeee ****nnnnooooddddeeeelllliiiisssstttt;;;;
          iiiinnnntttt nnnnooooddddeeeeccccnnnntttt;;;;
          ssssttttrrrruuuucccctttt qqqqpppprrrroooojjjjeeeeccccttttiiiioooonnnn ****aaaattttttttrrrrlllliiiisssstttt;;;;
          iiiinnnntttt aaaattttttttrrrrccccnnnntttt;;;;
          ssssttttrrrruuuucccctttt qqqquuuueeeerrrryyyyeeeexxxxpppprrrr ****qqqqppppttttrrrr;;;;
          iiiinnnntttt ffffllllaaaaggggssss;;;;

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          The bbbbllllddddqqqquuuueeeerrrryyyy() and ffffbbbbllllddddqqqquuuueeeerrrryyyy() routines assemble a query
          structure from the query node (i.e., relation), attribute,
          and query expression (i.e., where-clause) information.

          The only difference between bbbbllllddddqqqquuuueeeerrrryyyy() and ffffbbbbllllddddqqqquuuueeeerrrryyyy() is in
          the last parameter, _f_l_a_g_s.  This parameter gives query flags
          for modifying the normal operation of the query.  If
          bbbbllllddddqqqquuuueeeerrrryyyy() is used, references to the ``all'' attribute are
          always expanded, the query results are not sorted, and
          printed attribute names are the normal attribute names, not
          the ``friendly'' names.  ffffbbbbllllddddqqqquuuueeeerrrryyyy() should normally be used
          in new code; bbbbllllddddqqqquuuueeeerrrryyyy() is provided for backward
          compatibility.

          See the EEEEXXXXTTTTEEEENNNNDDDDEEEEDDDD DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN section of the ccccmmmmppppqqqquuuueeeerrrryyyy(1)
          manual page for information on compiling and linking
          commands which use the new UNITY.

     PPPPAAAARRRRAAAAMMMMEEEETTTTEEEERRRRSSSS
          _n_o_d_e_l_i_s_t
               The array of query nodes (i.e., relations) used in the
               query.  A query node is an instance of a relation; the
               same relation may be referenced multiple times in
               _n_o_d_e_l_i_s_t.  These structures should be initialized by
               setting the rel element in each qnode structure to
               point to the corresponding urelation structure obtained
               from ggggeeeettttrrrreeeelllliiiinnnnffffoooo(3), as in



     Page 1                                          (printed 10/8/91)






     bbbbllllddddqqqquuuueeeerrrryyyy((((3333))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 bbbbllllddddqqqquuuueeeerrrryyyy((((3333))))



                    relptr = getrelinfo( relpath[i], NULL, FALSE );
                    nodelist[i].rel = relptr;

          _n_o_d_e_c_n_t
               The number of query node structures in the _n_o_d_e_l_i_s_t
               array.  At most eight relations may be queried at any
               one time.

          _a_t_t_r_l_i_s_t
               The list of projected attributes for the query.  The
               attribute information can be initialized by calling the
               llllooooooookkkkuuuupppppppprrrroooojjjjaaaattttttttrrrr(3) routine on each projected attribute.

               If bbbbllllddddqqqquuuueeeerrrryyyy() is used, or the _f_l_a_g_s variable does not
               contain ``Q_NOEXPAND'', any references to the ``all''
               attribute will be expanded to all attributes in the
               given relation.  In this case, a new array of
               qprojection _s_t_r_u_c_t_u_r_e_s _w_i_l_l _b_e _a_l_l_o_c_a_t_e_d _u_s_i_n_g
               mmmmaaaalllllllloooocccc(3) to hold the expanded projection list.

               If this parameter is NULL, or _a_t_t_r_c_n_t is less than or
               equal to zero, then only the success or failure of the
               query will be reported when the query is evaluated.
               The qqqquuuueeeerrrryyyyeeeevvvvaaaallll(3) routine will return true (non-zero) if
               a tuple exists matching the given query expression, but
               iiiinnnniiiittttrrrreeeessssuuuulllltttt(3) will always fail, since no tuple will be
               retrieved.

          _a_t_t_r_c_n_t
               The number of structures in the projection list,
               _a_t_t_r_l_i_s_t.

               If this parameter is less than or equal to zero, or
               _a_t_t_r_l_i_s_t is NULL, then only the success or failure of
               the query will be reported when the query is evaluated.
               The qqqquuuueeeerrrryyyyeeeevvvvaaaallll(3) routine will return true (non-zero) if
               a tuple exists matching the given query expression, but
               iiiinnnniiiittttrrrreeeessssuuuulllltttt(3) will always fail, since no tuple will be
               retrieved.

               The maximum for this parameter is 100.  Any attributes
               over this limit will not be retrieved.

          _e_x_p_r_p_t_r
               The query expression to be evaluated.  This is the
               parsed version of the where-clause of the query, as
               returned from ppppaaaarrrrsssseeeewwwwhhhheeeerrrreeee(3).

          _f_l_a_g_s
               Alter the default operation of the query.  Any
               combination of the following flags may be OR'ed
               together.



     Page 2                                          (printed 10/8/91)






     bbbbllllddddqqqquuuueeeerrrryyyy((((3333))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 bbbbllllddddqqqquuuueeeerrrryyyy((((3333))))



               QQQQ____SSSSOOOORRRRTTTT - Sort the output of the query.  By default the
               output of a query is not sorted, unless one or more
               sorted attributes are given.  This flag dictates that
               the output should be sorted, regardless or whether
               sorted attribute were given or not.  Normally
               attributes are sorted in the order given and the
               attribute values are put in ascending order.  Modifiers
               may be attached to the sorted attribute names change
               the sort criteria.  See the rrrreeeettttrrrriiiieeeevvvveeee(1) manual page for
               more details about attribute modifiers.

               QQQQ____UUUUNNNNIIIIQQQQUUUUEEEE - Each projected tuple will be unique.  By
               default, duplicate tuples may be retrieved by the
               query.  This flag turns on checking to make sure each
               combination of projected attributes is unique.
               Normally, a character-by-character comparison is used
               to compare attribute values for uniqueness.  Modifiers
               may be attached to the projected attribute names to
               change the type of comparison used to determine
               uniqueness, such as a numeric comparison.  See the
               rrrreeeettttrrrriiiieeeevvvveeee(1) manual page for more details about
               attribute modifiers.

               QQQQ____FFFFRRRRIIIIEEEENNNNDDDDLLLLYYYY - The friendly names (if available) are used
               as the print names for projected attributes, rather
               than the attribute names themselves.

               QQQQ____NNNNOOOOEEEEXXXXPPPPAAAANNNNDDDD - Do not expand any instances of the ``all''
               attribute.  If this flag is present, any references to
               the ``all'' attribute will _n_o_t be expanded to all
               attributes in the given relation.  The query will also
               be marked as un-initialized, whether it contains
               references to the ``all'' attribute or not.  If
               qqqquuuueeeerrrryyyyeeeevvvvaaaallll(3) called with the un-initialized query, it
               will always fail.  The routine eeeexxxxpppprrrroooojjjjlllliiiisssstttt(3) can be
               called to expand the attributes and finish initializing
               the query.  This flag should only be used when this
               expansion needs to be delayed for some reason (e.g.,
               when compiling a query into C code as ccccmmmmppppqqqquuuueeeerrrryyyy(1)
               does).

               QQQQ____NNNNOOOOCCCCAAAASSSSEEEECCCCMMMMPPPP - All string and regular expression
               comparisons in the where-clause should ignore the case
               of letters.

     EEEEXXXXIIIITTTT CCCCOOOODDDDEEEESSSS
          Upon success, a pointer to the created query structure is
          returned.  NULL is returned on failure and uuuueeeerrrrrrrroooorrrr contains
          the error code.

     RRRREEEESSSSTTTTRRRRIIIICCCCTTTTIIIIOOOONNNNSSSS
          No more than MAXRELATION (currently defined in _u_q_u_e_r_y._h as



     Page 3                                          (printed 10/8/91)






     bbbbllllddddqqqquuuueeeerrrryyyy((((3333))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 bbbbllllddddqqqquuuueeeerrrryyyy((((3333))))



          8) relations may be used in the query.

          At most MAXATT attributes can be retrieved by the query.
          This is currently defined in _u_r_e_l_a_t_i_o_n._h as 200 from main
          frames and 100 for other machines.  Any attributes over this
          limit are not retrieved.

     EEEEXXXXAAAAMMMMPPPPLLLLEEEE
          Build a query for a given list of relation names, attribute
          names, and a where clause.  (This is essentially the code
          used in the mmmmkkkkqqqquuuueeeerrrryyyy(3) routine.)

               #include "uquery.h"
               #include "message.h"

               extern struct queryexpr *parsewhere();
               extern struct uquery *bldquery();
               extern char *calloc();

               char **relnames;
               int relcnt;
               char **attrnames;
               int anamecnt;
               char **where;
               int wherecnt;

               register int i;
               struct urelation *rellist;    /* relation information */
               struct qnode *nodelist;       /* node space for query */
               struct queryexpr *qptr;       /* query expression from where-clause */
               struct uquery *query;         /* compiled version of query */
               int attrcnt;             /* projected attribute count */
               struct qprojection attrlist[MAXATT];    /* projected attributes */

               /*
                * Get all the information about each relation.
                */
               nodelist = (struct qnode *)calloc( relcnt, sizeof( *nodelist ) );
               rellist = (struct urelation *)calloc( relcnt, sizeof( *rellist));
               if ( nodelist == NULL || rellist == NULL ) {
                    prmsg( MSG_INTERNAL, "cannot allocate space for relation information" );
                    return( NULL );
               }
               for( i = 0; i < relcnt; i++ ) {
                    /*
                     * In mkquery() additional code is included here to strip off
                     * any alternate relation description (i.e., "<rel>=<alt_rel>")
                     * and use that to get the descriptor information.  That code
                     * is not included here for simplicity.
                     */
                    if ( ! getrelinfo( relnames[i], &rellist[i], FALSE ) ) {
                         pruerror( );



     Page 4                                          (printed 10/8/91)






     bbbbllllddddqqqquuuueeeerrrryyyy((((3333))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 bbbbllllddddqqqquuuueeeerrrryyyy((((3333))))



                         prmsg( MSG_ERROR, "cannot get descriptor info for table '%s'",
                              ptr );
                         return( NULL );
                    }

                    nodelist[i].rel = &rellist[i];
               }
               /*
                * Look up each projected attribute.
                */
               attrcnt = 0;
               for( i = 0; i < anamecnt; i++, attrcnt++ ) {
                    /*
                     * If any attribute renaming is needed (e.g., "<attr> as <new_name>"),
                     * the code to do that should be included here.  It is not included
                     * here for simplicity.
                     */
                    if ( ! lookupprojattr( attrnames[i], nodelist, relcnt,
                              &attrlist[attrcnt], FALSE ) ) {
                         prmsg( MSG_ERROR, "unrecognized attribute name '%s'",
                              attrnames[i] );
                         return( NULL );
                    }
               }
               /*
                * Parse any where clause.
                */
               if ( wherecnt > 0 ) {
                    qptr = parsewhere( where, wherecnt, nodelist, relcnt );
                    if ( qptr == NULL ) {
                         pruerror( );
                         prmsg( MSG_ERROR, "unsuccessful parse for where-clause" );
                         return( NULL );
                    }
               }
               else
                    qptr = NULL;
               /*
                * Build the query itself.
                */
               query = bldquery( nodelist, relcnt, attrlist, attrcnt, qptr );
               if ( query == NULL )
                    pruerror( );
               return( query );

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          cmpquery(1), exprojlist(3), getrelinfo(3), lookupattr(3),
          mkquery(3), parsewhere(3), queryeval(3), and retrieve(1).







     Page 5                                          (printed 10/8/91)



