


     ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))



     NNNNAAAAMMMMEEEE
          cmpquery - compile a rrrreeeettttrrrriiiieeeevvvveeee query to embed in a C program

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          ccccmmmmppppqqqquuuueeeerrrryyyy [-chsVu] [-i<_i_n_c_l_u_d_e__d_i_r>] [-o<_o_u_t_p_u_t__f_i_l_e>]
                    <_q_u_e_r_y__n_a_m_e> on
                    [<_a_t_t_r>:<_m_o_d_i_f_i_e_r_s>... [as <_n_e_w__n_a_m_e>] ...]
                    [sorted [by <_a_t_t_r>:<_m_o_d_i_f_i_e_r_s> ...]] [unique]
                    from <_t_a_b_l_e_s>...  [where <_w_h_e_r_e-_c_l_a_u_s_e>]

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          ccccmmmmppppqqqquuuueeeerrrryyyy  is  a  query  compiler  for  translating  a  query
          suitable for use with the rrrreeeettttrrrriiiieeeevvvveeee(1) command into C code so
          it can be included directly in an application.  A query name
          is  specified  on  the  command  line  along  with  a  query
          expression  that  is  translated.   The   query   expression
          includes  the  attributes to retrieve, any modifiers for the
          attributes to specify sorting or uniqueness, the file  names
          of  relations  used  in  the query, and a _w_h_e_r_e-_c_l_a_u_s_e which
          stipulates the conditions of the query.  See the rrrreeeettttrrrriiiieeeevvvveeee(1)
          manual  page  for a complete description of each part of the
          query.

          The generated query is composed of two files: a header  file
          containing  definitions  for all retrieved (i.e., projected)
          fields, and a  C  source  file  containing  data  structures
          describing  the  query  and  an  initialization function for
          binding the query to  the  relations  at  run-time.   It  is
          possible  to  generate  either the header file or the source
          file.  The default is to do both.

     PPPPAAAARRRRAAAAMMMMEEEETTTTEEEERRRRSSSS
          ----cccc   Generate a source file for the query.  The source  file
               declares  the  data structures that represent the query
               and provides an initialization function for binding the
               query to the relations at run time.

               If neither the -c nor the -h  parameter  is  specified,
               both a source file and a header file will be generated.

          ----hhhh   Generate a header file for the query.  The  header  has
               #defines  for  the  attributes referenced in the query,
               and an extern  for  the  query  data  structure.   Each
               attribute        name       takes       the       form:
               <_Q_U_E_R_Y__N_A_M_E>_<_A_T_T_R_I_B_U_T_E__N_A_M_E>.

               The symbol <_Q_U_E_R_Y__N_A_M_E>__M_A_X_A_T_T is  defined  to  be  the
               maximum attribute number.

               If neither the -c nor the -h  parameter  is  specified,
               both a source file and a header file will be generated.




     Page 1                                          (printed 10/8/91)






     ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))



          ----iiii   The given <_i_n_c_l_u_d_e__d_i_r> is used as a prefix to included
               files  in  the generated output files, i.e., ``#include
               "<_i_n_c_l_u_d_e__d_i_r>/uquery.h".  If <_i_n_c_l_u_d_e__d_i_r>  is  ``-'',
               then no #include will be generated in the output files.
               This is useful when the generated files have access  to
               _u_q_u_e_r_y._h  through  some  other  means  (e.g.  by  being
               #include'd in some other file).

               Note that <_i_n_c_l_u_d_e__d_i_r> must immediately follow the ----iiii,
               without any space in between.

          ----oooo<_o_u_t_p_u_t__f_i_l_e>
               Place  the  source  to  the  query   in   <_o_u_t_p_u_t__f_i_l_e>
               (standard   output   if   a   ``-'')   rather  than  in
               <_q_u_e_r_y__n_a_m_e>.c.

          ----ssss   The retrieved records should be sorted.  Normally,  the
               output  is  not  sorted  and  there  may  be  multiple,
               identical entries.  The sort order is normally left  to
               right   and   is   done  in  ascending  order  using  a
               character-by-character comparison.  (See  ssssoooorrrrtttt  bbbbyyyy  and
               attribute   <_m_o_d_i_f_i_e_r_s>  sections  in  the  rrrreeeettttrrrriiiieeeevvvveeee(1)
               manual page for how to modify the sort criteria.)  This
               option is the same as the ssssoooorrrrtttteeeedddd keyword.

          ----uuuu   Only unique tuples should be retrieved  in  the  query.
               Normally  multiple, identical entries may be retrieved.
               Identical entries are records where all  the  _d_i_s_p_l_a_y_e_d
               attribute  values are the same.  Normally, a character-
               by-character comparison is used.   (See  the  attribute
               <_m_o_d_i_f_i_e_r_s>  section in the rrrreeeettttrrrriiiieeeevvvveeee(1) manual page for
               how to modify the comparison type.)  This option is the
               same as the uuuunnnniiiiqqqquuuueeee keyword.

               Note:  The output is not necessarily sorted  with  this
               option.   If  both  sorting and uniqueness are desired,
               use both ----ssss and ----uuuu.

          ----VVVV   Print the version of the command and exit.  No compiled
               query is produced.

          <_q_u_e_r_y__n_a_m_e>
               The name of the query.  This will be used as  the  base
               part  of  the  source  or  header  files generated.  An
               upper-case version of  the  name  is  prefixed  on  the
               query's   attribute  index  definitions,  as  described
               above.

               Query names must begin with a letter or an  underscore,
               and  can only contain letters, digits, and underscores.
               If the query name is used a  a  prefix  to  the  output
               files, it should be twelve or fewer characters long.



     Page 2                                          (printed 10/8/91)






     ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))



          oooonnnn [<_a_t_t_r>::::<_m_o_d_i_f_i_e_r_s>... [[[[_a_s <_n_e_w__n_a_m_e>]]...
               A  projection  list  of  attributes.   Only  the  given
               attributes  will  be returned in the query results.  If
               no attributes are given, all attributes in all  queried
               tables  which  don't have an explicit zero print length
               are returned.

               If a  null  attribute  is  given  (that  is,  ""),  the
               resulting  query will just report on the existence of a
               tuple,  but  won't  return   any   value.    (See   the
               rrrreeeettttrrrriiiieeeevvvveeee(1) manual page for attribute name syntax.)

               The <_m_o_d_i_f_i_e_r_s> are used to  specify  sorting  criteria
               for the <_a_t_t_r>.  Multiple modifiers may be given.  (See
               the rrrreeeettttrrrriiiieeeevvvveeee(1) manual page for a complete  description
               of the supported modifiers.)

               The <_n_e_w__n_a_m_e> serves as a way to rename the  attribute
               index    definition   within   the   header   file   to
               <_Q_U_E_R_Y__N_A_M_E>_<_N_E_W__N_A_M_E>.   This  is   needed   whenever
               multiple  projected  attributes  have  the same name to
               disambiguate the #define_s.

          [ssssoooorrrrtttteeeedddd [bbbbyyyy <_a_t_t_r>:<_m_o_d_i_f_i_e_r_s> ...]]
               The retrieved records should be  sorted  on  the  given
               attributes.   Normally,  the  output  is not sorted and
               there may be multiple, identical entries.  If  no  sort
               attributes  are  given, the sort order is left to right
               and is done in ascending order  using  a  character-by-
               character comparison.  The attribute <_m_o_d_i_f_i_e_r_s> can be
               used to modify the sort criteria.  (See  the  attribute
               <_m_o_d_i_f_i_e_r_s>  section in the rrrreeeettttrrrriiiieeeevvvveeee(1) manual page for
               more details.)  This option  is  the  same  as  the  ----ssss
               option.   It is provided as an alternate syntax for use
               when more detail is needed for the sort  attributes  or
               using  the flag is not possible or inappropriate, e.g.,
               in makefiles.

          [uuuunnnniiiiqqqquuuueeee]
               Only unique tuples should be retrieved  in  the  query.
               Normally, multiple, identical entries may be retrieved.
               Identical entries are records where all  the  _d_i_s_p_l_a_y_e_d
               attribute  values are the same.  Normally, a character-
               by-character comparison is used.   (See  the  attribute
               <_m_o_d_i_f_i_e_r_s>  section in the rrrreeeettttrrrriiiieeeevvvveeee(1) manual page for
               how to modify the comparison type.)  This option is the
               same  as the ----uuuu option.  It is provided as an alternate
               syntax for use when using the flag is not  possible  or
               inappropriate, e.g., in makefiles.

               Note:  The output is not necessarily sorted  with  this
               option.   If  both  sorting and uniqueness are desired,



     Page 3                                          (printed 10/8/91)






     ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))



               use both ssssoooorrrrtttteeeedddd and uuuunnnniiiiqqqquuuueeee.

          ffffrrrroooommmm <_t_a_b_l_e_s>...
               The file names of relations to be used  in  the  query.
               The   ffffrrrroooommmm   keyword  is  only  required  if  projected
               attributes are specified.  The files need not exist  at
               the  time  the  query  is  compiled, but the descriptor
               files must be readable.

          [[[[wwwwhhhheeeerrrreeee <_w_h_e_r_e-_c_l_a_u_s_e>]]]]
               Specify a subset of records to be  considered.   If  no
               _w_h_e_r_e-_c_l_a_u_s_e is given, all records will be considered.

               The _w_h_e_r_e-_c_l_a_u_s_e is made up  of  expressions  comparing
               the value of an attribute to a constant or to the value
               of another attribute.  The expressions can be  combined
               using boolean operators and parenthesis.

               The comparison operators are: lllltttt (less than), lllleeee  (less
               than  or equal to), ggggtttt (greater than), ggggeeee (greater than
               or equal to), eeeeqqqq (equal to), and nnnneeee (not equal to).  If
               they  appear as is, they are numeric comparisons.  They
               can  also  have  the  following  prefixes:  llll  (lexical
               comparison), cccc (lexical comparison, but ignore the case
               of  letters),  nnnn  (numeric  comparison),   rrrr   (regular
               expression  comparison  -  eeeeqqqq and nnnneeee only), dddd (date and
               time comparison), and ffff  (field-to-field  comparison  -
               may also be combined with llll, cccc, nnnn, and dddd prefixes).

               The boolean operations are: !!!! (negation), aaaannnndddd  (logical
               conjunction),   oooorrrr   (logical  disjunction),  ((((  and  ))))
               (grouping), and eeeellllsssseeee (selection precedence).

               See the rrrreeeettttrrrriiiieeeevvvveeee(1) manual page for more information.

               Within  the  _w_h_e_r_e-_c_l_a_u_s_e  any  comparison  value  that
               starts with a dollar sign (``$'') is considered to be a
               variable for the query.  The ``$'' should be quoted  to
               avoid interpretation by the shell.  These variables are
               used to have dynamic  comparison  values  used  in  the
               query.    Normally   query  variables  are  defined  as
               external character arrays within the query source file.
               They must also be declared as global data and allocated
               space within the application using the query.  A  value
               must  be  copied  into  the  array  before the query is
               evaluated.  (See the EEEEXXXXAAAAMMMMPPPPLLLLEEEE for more information.)

          A special case for query  variables  is  the  set  operator.
          When  only  one comparison value is given for a set operator
          and it is a query variable, this query variable  is  assumed
          to  be  an array of character pointers, rather than a single
          array of characters.  This is so all the  comparison  values



     Page 4                                          (printed 10/8/91)






     ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))



          for  the  set  operation  can  be assigned dynamically.  The
          application must still allocate space for the pointer array,
          as  with  other  query  variables.   The  list of comparison
          values  must  be  terminated  by  a   NULL   pointer.    The
          application  must  also make sure the comparison values line
          up appropriately when multiple attributes are given with the
          set operator.

          A single query variable cannot be used with the set operator
          when   the   comparison   attributes   come  from  different
          relations.  This is an implementation  restriction,  due  to
          the  way  such  set  operators are evaluated.  ccccmmmmppppqqqquuuueeeerrrryyyy will
          report an error and fail if this occurs.

     EEEENNNNVVVVIIIIRRRROOOONNNNMMMMEEEENNNNTTTT
          UNITYDFILES
                    A colon-separated list of  directories  to  search
                    for  table  descriptor  files.   If  this  is  not
                    specified, or if a needed file is not found in one
                    of  the  directories,  the  current  directory  is
                    searched.  If that fails, the directory where  the
                    associated  table  is  located (based on the table
                    name on the command line) is searched.

                    NOTE: UNITY commands in _e_x_p_t_o_o_l_s only  accept  one
                    directory  in  this  variable.   Also, they use it
                    only after looking in the current directory and in
                    the table's directory; some commands do not use it
                    at all.

     EEEEXXXXIIIITTTT CCCCOOOODDDDEEEESSSS
          0    Normal termination.

          1    Invocation error - accompanied by explanatory message.

          2    Execution error - accompanied by explanatory message.

          3    Abnormal termination - command killed by signal.

     RRRREEEESSSSTTTTRRRRIIIICCCCTTTTIIIIOOOONNNNSSSS
          No more than eight tables may be given.

          There is no maximum record size limit, but  each  individual
          attribute  is  limited  to  the size of an I/O block: 10K on
          mainframes, 6K on Vaxen and other mid-size machines, and  4K
          on other smaller machines.

          There is a limit on the number of attributes each table  can
          have.   Currently,  this is 200 on mainframes and 100 on all
          other machines.

          The attribute limit for individual tables  applies  also  to



     Page 5                                          (printed 10/8/91)






     ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))



          the   the   total   number  of  projected  attributes.   Any
          attributes beyond this limit are ignored.

          Care should be taken that query variables are unique  across
          all  queries  used  in  an  application,  since they must be
          global to the application.

     EEEEXXXXAAAAMMMMPPPPLLLLEEEE
          Compile just the query source file for a query to  list  the
          names  of all employees who work in the toy department.  The
          query name should be ``toydept.''

               cmpquery -c toydept on empname from employee \
                    where dept = toy

          If the header file for this query  had  been  generated,  it
          would contain:

               #define TOYDEPT_EMPNAME  0

               #define TOYDEPT_MAXATT   1

               extern struct uquery toydept;

          The generated source file would contain the following:

               #include "uquery.h"

               struct uquery toydept = {
                    . . .
               };

               int
               inittoydept( r1_employee )
               struct urelation *r1_employee;
               {
                    . . .
               };

          Compile the header and source file for a query  to  get  the
          name,  department,  and  salary of employees that work for a
          particular manager.  The manager's name will be a  variable.
          The name of the query should be ``manager''.

               cmpquery manager on 1.empname 1.dept 1.salary     \
                    from employee employee department       \
                    where 2.name req '$q_mngrname'               \
                         and 2.title = manager              \
                         and 2.empid f= department.mngrid   \
                         and 1.dept f= department.deptno

          The generated header file for this query would contain:



     Page 6                                          (printed 10/8/91)






     ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))



               #define MANAGER_EMPNAME  0
               #define MANAGER_DEPT     1
               #define MANAGER_SALARY   2

               #define MANAGER_MAXATT   3

               extern struct uquery manager;

          The generated source file would contain the following:

               #include "uquery.h"

               struct uquery manager = {
                    . . .
               };

               extern char q_mngrname[];

               int
               initmanager( r1_employee, r2_employee, r3_department )
               struct urelation *r1_employee;
               struct urelation *r2_employee;
               struct urelation *r3_department;
               {
                    . . .
               };

          Below is a code segment showing a sample use  of  this  last
          query  within an application.  (See the EEEEXXXXTTTTEEEENNNNDDDDEEEEDDDD DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          section and the references in the SSSSEEEEEEEE AAAALLLLSSSSOOOO section for  more
          information.)

               #include "uquery.h"
               #include "manager.h"

               char q_mngrname[40];          /* query variable for manager query */

               struct urelation r_employee;
               struct urelation r_department;
               struct qresult result;
               char *attrvals[MANAGER_MAXATT];
                . . .

               if ( ! getrelinfo( "employee", &r_employee, FALSE ) ) {
                    pruerror( );
                    return( FALSE );
               }
               if ( ! getrelinfo( "department", &r_department, FALSE ) ) {
                    pruerror( );
                    return( FALSE );
               }
               if ( ! initmanager( &r_employee, &r_employee, &r_department ) ) {



     Page 7                                          (printed 10/8/91)






     ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))



                    pruerror( );
                    prmsg( MSG_INTERNAL, "cannot initialize manager query" );
                    return( FALSE );
               }
                . . .

               strcpy( q_mngrname, "Jones" );
               if ( ! queryeval( &manager, &result ) ) {
                    if ( uerror )       /* something went wrong */
                         pruerror( );
                    return( FALSE );
               }
               if ( ! initresult( &result ) ) {
                    pruerror();
                    return( FALSE );
               }
               while( nexttuple( &manager, &result, attrvals ) ) {
                    /*
                     * Do something with the attribute values:
                     *   empname = attrvals[MANAGER_EMPNAME]
                     *   dept = attrvals[MANAGER_DEPT]
                     *   salary = attrvals[MANAGER_SALARY]
                     */
               }
               freeresult( &result );

     EEEEXXXXTTTTEEEENNNNDDDDEEEEDDDD DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
        GGGGeeeennnneeeerrrraaaatttteeeedddd SSSSoooouuuurrrrcccceeee FFFFiiiilllleeee CCCCoooonnnntttteeeennnnttttssss
          The generated C-code for a query is composed  of  two  parts
          within the source file.  The first is the data structure for
          the query itself.  The second is an initialization  function
          for  the query.  This initialization function serves to bind
          the query to the relations used in the query at run time and
          to  initialize  data  within the query itself that cannot be
          done statically (i.e., union information).

          The initialization function takes as arguments  pointers  to
          the  relation structures for each relation used in the query
          in the same order as mentioned on the ccccmmmmppppqqqquuuueeeerrrryyyy command line.
          The  initialization function must be called once, before the
          query is used.  If it is called multiple times, however,  no
          harm will be done.

        BBBBuuuuiiiillllddddiiiinnnngggg CCCCoooommmmmmmmaaaannnnddddssss WWWWhhhhiiiicccchhhh UUUUsssseeee tttthhhheeee NNNNeeeewwww
          In order to compile a  generated  query,  the  header  files
          _u_q_u_e_r_y._h  and  _u_r_e_l_a_t_i_o_n._h  must  be  accessible  to  the  C
          compiler.    Normally,    these    files    are    in    the
          $_T_O_O_L_S/_l_i_b/_n_u_n_i_t_y/_h_d_r   directory.    So,   to  compile  the
          generated query, the following command line can be used:

               cc -c -I$TOOLS/lib/nunity/hdr <_q_u_e_r_y__n_a_m_e>.c




     Page 8                                          (printed 10/8/91)






     ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))                 NNNNeeeewwww UUUUNNNNIIIITTTTYYYY                 ccccmmmmppppqqqquuuueeeerrrryyyy((((1111))))



          In order to link a command which uses any of the  new  UNITY
          functionality,     three     libraries     are     required:
          $_T_O_O_L_S/_l_i_b/_n_u_n_i_t_y/_l_i_b/_l_i_b_u_n_i_t_y._a,
          $_T_O_O_L_S/_l_i_b/_n_u_n_i_t_y/_l_i_b/_l_i_b_m_i_s_c._a,    and   the   Programmers'
          Workbench library (-lPW).  The mmmmaaaalllllllloooocccc(3X)  library  is  also
          recommended  (-lmalloc),  but  not required.  The _l_i_b_u_n_i_t_y._a
          library contains the new UNITY functions  for  querying  and
          altering   a   database.   The  _l_i_b_m_i_s_c._a  library  contains
          miscellaneous functions used by _l_i_b_u_n_i_t_y._a,  but  which  are
          not  directly related to databases (e.g., printing messages,
          checking file permissions, and stripping directory and  file
          names  from  path  names).  So, to link a command which uses
          the new UNITY, the following command line can be used:

               cc -o<_c_o_m_m_a_n_d> <_q_u_e_r_y__n_a_m_e>.o <_o_t_h_e_r__o_b_j_s>...  \
                    $TOOLS/lib/nunity/lib/libunity.a  \
                    $TOOLS/lib/nunity/lib/libmisc.a  \
                    <_o_t_h_e_r__l_i_b_s>... -lPW -lmalloc

     FFFFIIIILLLLEEEESSSS
          <_q_u_e_r_y__n_a_m_e>.c
                    The default name for  the  source  file  generated
                    containing the query data.

          <_q_u_e_r_y__n_a_m_e>.h
                    The header file generated containing query-related
                    #defines and externs.

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          getrelinfo(3), queryeval(3),  nexttuple(3),  set_tplfunc(3),
          retrieve(1) and ``_A_n _I_m_p_r_o_v_e_d _a_n_d _E_x_t_e_n_d_e_d _I_m_p_l_e_m_e_n_t_a_t_i_o_n _o_f
          _t_h_e _U_N_I_T_Y _D_a_t_a _B_a_s_e _M_a_n_a_g_e_m_e_n_t _S_y_s_t_e_m'', E. D.  Scott,  July
          25, 1989, 55634-072589-01TM.






















     Page 9                                          (printed 10/8/91)



