


     ttttaaaabbbblllleeee((((UUUUNNNNIIIITTTTYYYY))))           UUUUNNNNIIIITTTTYYYY UUUUsssseeeerrrr''''ssss MMMMaaaannnnuuuuaaaallll           ttttaaaabbbblllleeee((((UUUUNNNNIIIITTTTYYYY))))



     NNNNAAAAMMMMEEEE
          table -  define table name, attributes, and data types

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          _t_a_b_l_e table aname1 atype1 [...]

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          The _t_a_b_l_e command allows the user to define a table by
          giving the table name and a list of attributes (aname1,
          aname2,...) with their respective data types (atype1,
          atype2,...).  The table specified may exist in any directory
          accessible to the user and the user may reference it by
          supplying either a full, relative, or simple pathname for
          the table (this is true for all UNITY commands).  The _t_a_b_l_e
          command creates a description file for the defined table
          with a name composed by prefixing the simple file name of
          the table with a 'D'.  The description file is created in
          the present working directory and must be present for
          execution of all other UNITY commands.

          Attribute Names:
               Attribute names may be a maximum of 11 characters in
               length; they must begin with an alphabetic character
               and may contain only alphanumeric characters and "_"
               (i.e., A-Z, a-z, 0-9, _).

          Attribute Types:
               The two currently supported data types for attributes
               are fixed-length character strings and variable-length
               character strings ended with a terminator.  A fixed
               length string is indicated by a type of "w" (width)
               followed by the width of the attribute.  A variable-
               length string is indicated by a type of "t"
               (terminator) followed by the terminator for the
               attribute.  If the last attribute for a table is a
               terminator field, then its terminator _m_u_s_t be a newline
               (all records must end with a newline).  All character
               constant escape sequences recognized in the C language
               (newline, horizontal tab, backspace, carriage return,
               form feed, backslash, single quote, and bit pattern)
               are recognized for terminator characters (e.g., the
               strings "\t" and "\n" are recognized as tab and newline
               characters, respectively, for terminator characters).

          Optional Print Information:
               The user may optionally enter the print information
               (i.e., the column width and print justification) for
               the attribute to be used by the _u_p_r_i_n_t(UNITY) program
               directly with the _t_a_b_l_e command by inputing the
               attribute type and the print information separated by a
               tab as a single parameter for the _a_t_y_p_e of an attribute
               (quotes are necessary so that it will be taken as a



     Page 1                                          (printed 1/19/90)






     ttttaaaabbbblllleeee((((UUUUNNNNIIIITTTTYYYY))))           UUUUNNNNIIIITTTTYYYY UUUUsssseeeerrrr''''ssss MMMMaaaannnnuuuuaaaallll           ttttaaaabbbblllleeee((((UUUUNNNNIIIITTTTYYYY))))



               single parameter).  Further information about the use
               of the print information can be found on the
               _u_p_r_i_n_t(UNITY) manual page.

          Optional User-Friendly Name:
               The user may optionally enter a more "user-friendly"
               name for the attribute to be used by printed by various
               UNITY programs.  If entered, the print information is
               NOT optional; it is needed as a positional parameter.
               Thus, the user name is treated as a third part of the
               attribute type and must be separated by a tab from the
               print information (quotes are necessary so that it will
               be taken as a single parameter).  The name may be any
               length and may not contain a tab.  Only 80 characters
               are stored internally and, on output, some programs
               print only 30 characters.

          The format for specifying an attribute type is then

             {w<len> | t<term>}[<tab>[width][just][<tab>username]]

          For example, attribute type

            "t|        10l     Friendly name"
          where the sections of white space are tabs would specify a
          terminator field (terminated with |), print width 10 and
          left justification with user name "Friendly name".  Both the
          print information and user-friendly name are optional.

          In some situations, it is necessary to allow users to
          specify their own description by which records in the table
          are interpreted.  A simple example of a case where this is
          useful is the specification of a date:  one user may want to
          access a date as three two-character fields (e.g., month,
          date, and year) while another user may reference it as a
          single six-character quantity.  In other situations, it is
          advantageous to have one single description file that is
          accessed by all users (i.e., for a single, centrally-located
          table).  When accessing a UNITY table, all UNITY programs
          first look for the description file in the present working
          directory (name composed of the simple file name of the
          table prefixed with a 'D').  If the file does not exist,
          then the program looks for a file with the same name in the
          directory in which the table is located.  If the description
          file is not found, it will then look at the environment
          variable UNITYDFILES to see if a colon-separated list of
          directories is specified, one of which contains the
          description file.  Thus, all description files can be stored
          in one or more common directories by use of the UNITYDFILES
          environment variable.  When description files are created by
          a UNITY command (e.g., _u_j_o_i_n, _u_s_e_l_e_c_t, etc.), they are
          created in the present working directory.



     Page 2                                          (printed 1/19/90)






     ttttaaaabbbblllleeee((((UUUUNNNNIIIITTTTYYYY))))           UUUUNNNNIIIITTTTYYYY UUUUsssseeeerrrr''''ssss MMMMaaaannnnuuuuaaaallll           ttttaaaabbbblllleeee((((UUUUNNNNIIIITTTTYYYY))))



          Lines in the description file beginning with a pound sign
          (#) are ignored.  They may be added using any available text
          editor and used as comment lines (e.g., to hold SCCS what
          strings).

     EEEEXXXXAAAAMMMMPPPPLLLLEEEE
          To use the /etc/passwd file as a UNITY table, a description
          file must be created using _t_a_b_l_e.  The description file,
          "Dpasswd," is created in the present working directory.
          Note that a description file for any table named "passwd"
          will be named "Dpasswd" so that multiple tables with the
          same simple file name can be accessed using the same
          description file.  The command

          table /etc/passwd login  "t:      8l    LOGIN NAME" \
                  passwd "t:      14l     PASSWORD" \
                  uid    "t:      5r      USER ID" \
                  gid    "t:      5r      GROUP ID" \
                  acct   "t:      20l     ACCOUNTING INFORMATION" \
                  home   "t:      15l     HOME DIRECTION" \
                  shell  "t\n     12l    LOGIN SHELL" \

          would produce the following Dpasswd file in the current
          directory:

          login  t:      8l       LOGIN NAME
          passwd t:      14l      PASSWORD
          uid    t:      5r       USER ID
          gid    t:      5r       GROUP ID
          acct   t:      20l      ACCOUNTING INFORMATION
          home   t:      15l      HOME DIRECTORY
          shell  t\n     12l     LOGIN SHELL

          Note that the sections of white space in the output
          description file are tabs.  Thus, the description file is a
          four-column, tab-separated table.  The last two columns are
          optional but the print column must appear if the user-name
          column appears.  The description file may be created using a
          text editor, if desired, instead of using the _t_a_b_l_e command.
          All characters following the user-friendly name (i.e., if a
          tab follows the name) are ignored.

     FFFFIIIILLLLEEEESSSS
          unity/table.c, ztable.c - the C source program
          bin/table - the executable program

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          _u_p_r_i_n_t(UNITY)

     CCCCAAAAVVVVEEEEAAAATTTT
          Most UNITY programs do NOT use the "user-friendly" names and
          thus do not keep the names.  Instead they are thrown away as



     Page 3                                          (printed 1/19/90)






     ttttaaaabbbblllleeee((((UUUUNNNNIIIITTTTYYYY))))           UUUUNNNNIIIITTTTYYYY UUUUsssseeeerrrr''''ssss MMMMaaaannnnuuuuaaaallll           ttttaaaabbbblllleeee((((UUUUNNNNIIIITTTTYYYY))))



          they are read.  This cuts down on the amount of space needed
          by each program.  As a result, some UNITY programs that
          create new description files on output DO NOT write out the
          user-friendly names as part of the new description.  In
          particular, any "user-friendly" names are LOST when a new
          description file is created (when an "into" clause is
          specified) by _u_s_e_l_e_c_t when projection is done, and by _u_j_o_i_n,
          _o_u_t_e_r_j_o_i_n, and _r_e_g_j_o_i_n.  They can be added to the
          description file later if needed by the user with a text
          editor.













































     Page 4                                          (printed 1/19/90)



