		You are looking at the GMACS tutorial.
       Comments on this document should be sent to pegasus!hansen.

Gmacs commands generally involve the CONTROL key (sometimes labelled CTRL or
CTL) or the ESCAPE key (sometimes labelled ESC). Rather than write out
ESCAPE or CONTROL each time we want you to prefix a character, we'll use the
following abbreviations:

    ^<chr>	means hold the CONTROL key while typing the character <chr>
		Thus, ^F would be: hold the CONTROL key and type 'f' or 'F'.
		Note that the shift key is seldom needed for ^F.
    ESC-<chr>	means type <ESC>, release it, then type the character <chr>.
		Note that ESC-F and ESC-f are different.

>>     Important note: if you must exit at some point, type ^C twice.

The characters ">>" at the left margin indicate directions for you to try
using a command. For instance:

>>  Now type ^V (View next screen) to move to the next screen. (go ahead,
	do it by depressing the control key and V together). From now on,
	you'll be expected to do this whenever you finish reading the screen.

Note that there is an overlap when going from screen to screen; this
provides some continuity when moving through the file.

The first thing that you need to know is how to move around from place to
place in the file. You already know how to move forward a screen, with ^V.
To move backwards a screen, type ESC-v.

NOTE: In Gmacs, ESC-v and ESC-V are two different commands. They may do the
same thing, or they may not. All of the commands listed in this tutorial use
the lower case form of the command.

>>  Try typing ESC-v and then ^V to move back and forth a few times.

NOTE: If you follow the ESC-v too fast with a ^V, not all of the previous
screen may be shown. This is because Gmacs is smart enough to know if you
have continued typing commands and will wait until you are completely done
typing commands before it does a final update of the screen.

In summary, the following commands are useful for viewing screenfuls:

	^V	Move forward one screenful
	ESC-v	Move backward one screenful


BASIC CURSOR CONTROL
--------------------

Getting from screenful to screenful is useful, but how do you reposition
yourself within a given screen to a specific place? There are several ways
you can do this. One way (not the best, but the most basic) is to use the
commands previous, backward, forward and next character. As you can imagine,
these commands (which are given to Gmacs as ^P, ^B, ^F, and ^N respectively)
move the cursor from where it currently is to a new place in the given
direction. Here, in a more graphical form are the commands:

			  Previous line, ^P
				  :
				  :
     Backward, ^B .... Current cursor position .... Forward, ^F
				  :
				  :
			  Next line, ^N

You'll probably find it easy to think of these by letter: P for previous, N
for next, B for backward and F for forward. These are the basic cursor
positioning commands and you'll be using them ALL the time so it would be of
great benefit if you learn them now.

>> Do a few ^N's (or ^P's) to bring the cursor down (or up) to this line.

>> Move into the line with ^F's and then up with ^P's.
   See what ^P does when the cursor is in the middle of the line.

Lines are separated by a single Linefeed character, which is what Unix calls
a Newline.

>> Try to ^B at the beginning of a line. Do a few more ^B's.
   Then do ^F's back to the end of the line and beyond.

When you go off the top or bottom of the screen, the text beyond the edge is
shifted onto the screen so that your instructions can be carried out while
keeping the cursor on the screen.

>> Try to move the cursor off the bottom of the screen with ^N and
   see what happens.

If moving by characters is too slow, you can also move by words. ESC-f moves
forward a word and ESC-b moves back a word.

>> Type a few ESC-f's and ESC-b's. Intersperse them with ^F's and ^B's.

Notice the parallel between ^F and ^B on the one hand, and ESC-f and ESC-b
on the other hand. Very often Escape characters are used for operations
related to English text whereas Control characters operate on the basic
textual units that are independent of what you are editing (characters,
lines, etc). There is a similar parallel between lines and sentences: ^A and
^E move to the beginning or end of a line, and ESC-a and ESC-e move to the
beginning or end of a sentence.

>> Try a couple of ^A's, and then a couple of ^E's.
   Make sure that you are on a line with text first.
   Try a couple of ESC-a's, and then a couple of ESC-e's.

See how repeated ^A's do nothing, but repeated ESC-a's keep moving farther.
Do you think that this is right?

Two other simple cursor motion commands are ESC-< (Escape Less-than), which
moves to the beginning of the file, and ESC-> (Escape Greater-than), which
moves to the end of the file. You probably don't need to try them, since
finding this spot again will be boring. If you need the shift key to type a
"<", then you must also use the shift key to type ESC-<.

The location of the cursor in the text is also called "point" or "dot". To
paraphrase, the cursor shows on the screen where point is located in the
text.

Here is a summary of simple moving operations including the word and
sentence moving commands. There are also some other commands not mentioned
before.

	^F	Move forward a character
	^B	Move backward a character

	ESC-f	Move forward a word
	ESC-b	Move backward a word

	^N	Move to next line
	^P	Move to previous line

	^A	Move to beginning of line
	^E	Move to end of line

	ESC-a	Move back to beginning of sentence
	ESC-e	Move forward to end of sentence

	ESC-<	Go to beginning of file
	ESC->	Go to end of file

	ESC-,	Go to beginning of window
	ESC-.	Go to end of window

	ESC-z	Scroll window back, showing previous line
	^Z	Scroll window forward, showing next line

>> Try all of these commands now a few times for practice.
   Since ESC-< and ESC-> will take you away from this screen,
   you can come back here with ESC-v's and ^V's. These are
   the most often used commands.


NUMERIC ARGUMENTS
------- ---------

Like most other commands in Gmacs, these commands can be given arguments
which cause them to be executed repeatedly. The way you give a command a
repeat count is by typing a ^U or an ESC and then the digits before you type
the command. Typing ^U without any digits will give a multiple of 4.  That
is, one ^U gives an argument of 4, two ^U's gives an argument of 16, etc.

For instance, ^U 8 ^F moves forward eight characters, ^U ^U ^F moves forward
sixteen characters, and ESC 55 ^F moves forward 55 characters.

>> Try giving a suitable argument to ^N or ^P to come as close as you can
   to this line in one jump.


Some commands use ^U to just tell a command to alter its normal behavior.
^L is a command which clears the screen and redisplays things.

>> Find the cursor and remember what text is near it. Make sure that
   it is in the middle of some text. Now type a ^L.

   Find the cursor again. Now type ^U ^L and find the cursor again.
   The first time the whole screen was redisplayed; the second time only the
   current line was redisplayed. This command is useful if the screen gets
   messed up by line-noise or a message from another person.


QUITTING FROM COMMANDS
----------------------

The character used in Gmacs to quit out of all commands which request input
is ^G. For example, you can use ^G to discard a numeric argument or the
beginning of a command that you don't want to finish.

The break key may also be used to stop a command after it has begun
executing. When either of these commands are typed, you will hear a bell or
see your screen flash, depending on your type of terminal.

>> Type either ^U 100 or ESC 100 to make a numeric argument of 100, then
   type ^G. Now type ^F. How many characters does it move?
   If you have typed an <ESC> by mistake, you can get rid of it
   with a ^G.

If you type ESC-<ESC>, you get into something known as a "minibuffer". That
is an advanced feature of Gmacs. We mention it now only to say that you can
get out of it with one or two ^G's if you get into it by accident.


ERRORS
------

Sometimes you may do something which Gmacs doesn't allow. If it is something
simple, such as typing a control key sequence which is not associated with
any command, Gmacs will just beep at you. Otherwise, Gmacs will also display
an informative error message.

Sometimes Gmacs will split the screen into two windows to display its error
messages or to show another file. To get rid of the other window, type the
command ^X 1 (delete-other-windows).


UNDOING THINGS
------- ------

Typing ^X ^U undoes the effects of the last command typed. It will then say
"Hit <space> to undo more, <return> to stop", each <space> that you then hit
will undo one more command. Typing anything but space will terminate
undoing. If it is terminated with anything other than <return> the
termination character will be executed just as though it were a normal
command. If you find that you've undone too much, just type ^X ^U again to
undo the undo's.

The commands for deleteing the other windows and undo are unlike the other
commands you have learned in that they start with a different character.
They both start with the character Control-X. There is a whole series of
commands that start with ^X; many of them have to do with files, buffers,
windows, and related things, and all of them consist of ^X followed by some
other character.


INSERTING AND DELETING
----------------------

If you want to type text, just do it. Characters which you can see, such as
A, 7, *, etc. are taken by Gmacs as text and inserted immediately. Type
<Return> (the carriage-return key) to insert a line separator.

You can delete the last character you typed by typing <Backspace> or
<Delete>. <Delete> is a key on the keyboard which may be labeled "Rubout"
instead of "Delete" on some terminals. The <Backspace> may also be typed as
a ^H. More generally, <Backspace> and <Delete> deletes the character
immediately before the current cursor position.

>> Do this now, type a few characters and then delete them
   by typing <Backspace> a few times. Don't worry about this file
   being changed; you won't affect the master tutorial. This is just
   a copy of it.

>> Now start typing text until you reach the right margin, and keep
   typing. When a line of text gets too big for one line on the
   screen, the line of text is "continued" onto a second screen line.
   The backslash at the right margin indicates a line which has
   been continued.

>> Use <Backspace>'s to delete the text until the line fits on one screen
   line again. The continuation line goes away.

>> Move the cursor to the beginning of a line and type <Backspace>. This
   deletes the line separator before the line and merges the line onto
   the previous line. The resulting line may be too long to fit, in
   which case it has a continuation line.

>> Type <Return> to insert the line separator again.

Remember that most Gmacs commands can be given a repeat count.  Note that
this includes characters which insert themselves.

>>  Try that now -- type ^U 8 * or ESC 8 * and see what happens.

If you want to create a blank line in between two lines, move to the second
of the two lines and type ^O.

>>  Try moving to a line and typing ^O now.

You've now learned the most basic way of typing something in Gmacs and
correcting errors. You can delete by words or lines as well. Here is a
summary of the most important delete operations:

	^H (<BS>)    delete the character just before the cursor
	^D   	     delete the next character after the cursor

	ESC-h	     kill the word immediately before the cursor
	ESC-d	     kill the next word after the cursor

	^K	     kill from the cursor position to end of line

Notice that ^H and ^D vs. ESC-h and ESC-d extend the parallel started by ^F
and ESC-f.

Now suppose you kill something, and then you decide that you want to get it
back? Well, whenever you kill something bigger than a single character,
Gmacs saves it for you. To yank it back, use ^Y. Note that you don't have to
be in the same place to do ^Y; This is a good way to move text around. Also
note that the difference between "Killing" and "Deleting" something is that
"Killed" things can be yanked back, and "Deleted" things cannot. Generally,
the commands that can destroy a lot of text save it, while the ones that
attack only one character, or nothing but blank lines and spaces, do not
save. Remember that the undo command will undo anything, though.

For instance, type ^N and ^F a couple times to position the cursor in the
middle of some line on this screen.

>> Do this now, move the cursor and kill that line with ^K. Type ^K again.
   Now move the cursor to the beginning of a line and type ^K.

Note that a single ^K in the middle of a line kills the contents of the
line, and a second ^K kills the line separator, and makes all the other
lines move up. If you do a ^K at the beginning of a line, both the contents
of the line and its line separator will be killed. If you give ^K a repeat
count, it kills that many lines AND their contents.

The text that has just disappeared is saved so that you can retrieve it. To
retrieve the last killed text and put it where the cursor currently is, type
^Y.

>> Try it; type ^Y to yank the text back that you just killed.

Think of ^Y as if you were yanking something back that someone took away
from you. Notice that if you do several ^K's in a row the text that is
killed is all saved together so that one ^Y will yank all of the lines.

>> Do this now, type ^K several times.

Now to retrieve that killed text:

>> Type ^Y. Then move the cursor down a few lines and type ^Y
   again. You now see how to copy some text.

What do you do if you have some text you want to yank back, and then you
kill something else? ^Y would yank the more recent kill. But the previous
text is not lost. You can get back to it by typing ESC-y. After you have
done ^Y to get the most recent kill, typing ESC-y replaces that yanked text
with the previous kill. Typing ESC-y again and again brings in earlier and
earlier kills. When you have reached the text you are looking for, you can
just go away and leave it there. If you type ESC-y enough times, you will
come back to the starting point (the most recent kill). Gmacs saves the last
10 kills in a ring.

>> Kill a line, move around, kill another line.
   Then do ^Y to get back the second killed line.
   Then do ESC-y and it will be replaced by the first killed line.
   Do more ESC-y's and see what you get. Keep doing them until
   the second kill line comes back, and then a few more.


FILES
-----

In order to make the text you edit permanent, you must put it in a file.
Otherwise, it will go away when your invocation of Gmacs goes away. You put
your editing in a file by "visiting" the file. What visiting means is that
you see the contents of the file in your Gmacs; and, loosely speaking, what
you are editing is the file itself. However, the changes still don't become
permanent until you "save" the file. This is so you can have control to
avoid leaving a half-changed file around when you don't want to. Even then,
Gmacs really makes a new version of the file and doesn't change the old
version at all (so that you can verify or throw away your changes later if
you like).

If you look near the bottom of the screen you will see a line that looks
like "Buffer: gmacs-tutorial (Normal)  55% *". The "gmacs-tutorial" refers
to the name of your own temporary copy of the text of the Gmacs tutorial;
the file you are now visiting. Whatever file you visit, that file's name
will appear in that precise spot. The word "buffer" is to remind you that a
file is actually copied into a temporary buffer before you start making your
changes.

The command for visiting a file is different from other commands you have seen
before in that you have to say the name of the file you want. We say the
command "reads an argument from the terminal" (in this case, the argument is
the name of the file). After you type the command

	^X ^V   Visit a file

Gmacs will ask you for the file name. You should end the name with the
Return key. When typing in the name of the file, you may use environment
variables, as in the shell, and the '~', as in uucp. After this command, you
will see the contents of the file in your Gmacs. You can then edit the
contents. (Use "^X ^O gmacs-tutorial" to get back to this buffer. Use ^X 1
to delete the other window.)

When you wish to make the changes permanent, issue the command

	^X ^S   Save the file
   or	^X ^W   Save the file with a new name

A new version of the file will be created. When the operation is finished,
Gmacs prints the name of the file saved.

If you forget to save a file, then visit a different file, Gmacs will not
throw away the changes you have made to the first file.


EXTENDING THE COMMAND SET
-------------------------

There are many, many more Gmacs commands than could possibly be put on all
the control and meta characters. Gmacs gets around this with the X (eXtend)
command. This comes in two flavors:

	^X	Character eXtend. Followed by one character.
	ESC-x	Named command eXtend. Followed by typing a long name.

These are commands that are generally useful but used less than the commands
you have already learned about. You have already seen some of them: the file
commands ^X ^V to Visit a file, ^X ^S to Save a file, and ^X 1 to go back to
one window.

Named eXtend commands are commands which are used even less frequently, or
commands which are used only in certain modes. These commands are usually
called "functions" or "macros". An example is the function Replace String
which globally replaces one string with another. When you type ESC-x, Gmacs
prompts you at the bottom of the screen with ":" and you should type the
name of the function you wish to call; in this case, "replace-string". Just
type "replace<Space>" and Gmacs will complete the name. Then you type the
string that you want to replace, a Return, the string you want to replace it
with, and another Return.

>> Move the cursor to the blank line two lines below this one.
   Then type ESC-x replace<Space>changed<Return>altered<Return>.

   Notice how this line has altered: you've replaced
   the word c-h-a-n-g-e-d with "changed" wherever it occurs
   after the cursor.

The more customary command for replacing strings is the Query Replace
command, which has many options. Note that both query-replace-string and
replace-string are available as ESC-q and ESC-r, respectively, but the point
is that all commands have an extended name that may be specified with ESC-x.


GETTING OUT AND QUITTING
------- --- --- --------

The command to tell Gmacs that you'd like to stop editing is ^C. The
variations of ESC ^C and ^X ^C also work. This does not save your files
automatically. If any of your files HAVE been modified, Gmacs will ask if
you really want to leave.

If you just like to go into Unix temporarily to issue a shell command, use
the command ^_ (control underscore, you'll probably need to use the shift
key). This will give you an entirely new shell. When you are done issuing
shell commands, remember to type control-D to return to Gmacs.


MODE LINE
---------

At the bottom of the screen is an area called the echo area or mini-buffer.
The echo area contains the bottommost line of the screen. The line
immediately above them is called the MODE LINE. The mode line says something
like:

   Buffer:  gmacs-tutorial  (Normal)  86% *

This is a very useful "information" line.

What the "86%" means is that 86 percent of the file is above the current
line.

The star means that you have made changes to the text. Right after you visit
or save a file, there is no star.

The part of the mode line inside the parentheses is to tell you what modes
you are in. The default mode is Normal which is what you are in now. There
are several modes in Gmacs for editing different languages and text, such as
C mode, Text mode, etc. At any time one and only one major mode is active,
and its name can always be found in the mode line just where "Normal" is
now. Each major mode makes a few commands behave differently. For example,
there are commands for creating comments in a program, and since each
programming language has a different idea of what a comment should look
like, each major mode has to insert comments differently. Each major mode is
the name of an extended command, which is how you get into the mode. For
example, "ESC-x normal" is how to get into Normal mode.


GETTING HELP
------- ----

The most basic HELP feature is ESC-x describe-key. Type "ESC-x describe-key"
and a command character, and Gmacs prints a description of the command.

>> Type "ESC-x describe-key ^F".  The message should be something like

   ^F is globally bound to the wired procedure called "forward-character"

The "name of the function" is important for people who are customizing
Gmacs. It is what appears in the GMACS CHART as the documentation for the
command character.

Multi-character commands such as ^X ^V and ESC-v are also allowed after
ESC-x describe-key.

Here are some other useful <HELP> commands:

   ESC-x describe-command
		Describe a command. You type in the name of the function.
		To see your whole file again when it is done, type a ^C.

>> Try typing ESC-x describe-command replace-string<Return>.
   Then type a ^C when you are finished reading it.
   This will load in a "sub-system" called INFO that is an extensive
   information facility. At some later time, you may wish to execute
   the "info" command and learn more about it.

   ESC-? or ESC-x apropos
		Type in a keyword and Gmacs will list all the functions
		containing that keyword. For some functions it will also
		list a one or two character command which has the same effect.

>> Type ESC-? word<Return>. You will see a list of all functions
   (ESC-x commands) with "word" in their names. You will also see commands
   like ESC-h and ESC-b, listed under their corresponding function names.
   Type a ^X 1 when you are finished reading it.


CONCLUSION
----------

Remember, to exit use ^C. Typing it once will place you in Gmacs, working on
your own buffer.  There you may create your own files. (Remember ^X ^V and
^X ^W!) If you don't want to work on your own files, type ^C again.
Normally, you would only have to type ^C once.

See the reference manual for more information on other things Gmacs can do.
The entire reference manual is available on-line within the info sub-system
by using the "ESC-x info" command.

Other documents available off-line are:

"Challenge: Gmacs in Two Pages"		A good cheat sheet.

"The Bare Minimums"			A rehash of this tutorial on paper.

"Local Changes to Gmacs"		Differences from the reference manual.


DISCLAIMER
----------

This tutorial is meant to be understandable to all new users, so if you
found something unclear, don't sit and blame yourself - complain!
(Send mail to pegasus!hansen.)

You'll probably find that if you use Gmacs for a few days you won't be able
to give it up. Initially it may give you trouble. But remember that this is
the case with any editor, especially one that can do many, many things. And
Gmacs can do practically everything.
