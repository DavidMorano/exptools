###############################################################################
#	    This is unpublished AT&T proprietary source code.		      #
#			All rights reserved				      #
#			Copyright (c) 1990				      #
#			AT&T Bell Laboratories				      #
###############################################################################

####################################################################
# Add comments to EPL/SWAP program source
#
#				Author:	Bob Parnass
#				AT&T Bell Laboratories
#				October 1990
#
#
# USAGE:  epl  -f comment_file  [files]
#
# NOTES:
#	searches source for call_sub_ and other opcodes
#
####################################################################
VERSION="1.0"
PGM=`basename $0`
TOOLS=`logdir exptools`
LIBDIR=$TOOLS/lib/comment/

TMP=/usr/tmp

# set temporary files
TMPF1=$TMP/1co$$
TMPCF=$TMP/3co$$
CCFILE=$TMP/4co$$
FCNLINE=$TMP/5co$$
COMMENTS=$TMP/6co$$
FINFILE=$TMP/7co$$
LOCALCMTS=$TMP/8co$$

TMPFILES="$TMPF1 $TMPCF $CCFILE $FCNLINE $COMMENTS $FINFILE $LOCALCMTS"

# trap unexpected signals so we clean up temp files
trap 'rm -f ${TMPFILES};echo "Aborted by user" 1>&2; exit 1' 1 2 3 15

FORHELP="\n\t(Type 'toolman epl' for a manual page, then contact Bob Parnass\n\tif you need help.)\n"
USAGE="USAGE:  ${PGM}   -f comment_file  [files]\nVersion ${VERSION}\n${FORHELP}"

EXIT_CODE=0
FFLAG=
CMTFILE=

# parse command line arguments 
set -- `getopt f: $*`
if [ $? !=  0 ]
then
	echo ${USAGE} 1>&2
	exit 1
else
	ARROWARGS=
	for i in $*
	do
		case $i in

		-f)
			FFLAG=1
			CMTFILE=$2
			test -r "$CMTFILE"
			if [ $? -ne 0 ]
			then
				echo "### error ### ${PGM}: Cannot read file $CMTFILE" 1>&2
				echo ${USAGE} 1>&2
				exit 1
			fi
			shift 2;;
		--)
			shift; break;;
		esac
	done
fi

if [ "$FFLAG" ]
then
	:
else
	echo "### error ### ${PGM}: File of comments must be specified." 1>&2
	echo ${USAGE} 1>&2
	exit 1
fi

NFILES=$#

if [ $# -eq 0 ]
then
	cat > $TMPCF
	CFILE=$TMPCF
	NFILES=1
else
	CFILE=$1
fi

while [ ${NFILES} -ne 0 ]
do
	${LIBDIR}newform -i $CFILE > $CCFILE

	# check for failure
	if [ $? -ne 0 ]
	then
		# probably cannot find file or open for reading
		echo "### error ### ${PGM}: newform failed on file '${CFILE}'." 1>&2
		EXIT_CODE=1;
		> $CCFILE
	fi
	
	# translate source to lower case, strip line numbers

	sed -e 's/^[0-9][0-9][0-9][0-9][0-9].[0-9][0-9][0-9][0-9] //'  $CCFILE \
			| tr '[A-Z]' '[a-z]'  > ${FINFILE}


	awk '\
	# for each line of input
	(index($0, "#") != 1) \
		{
		restline = $0
		# read ahead to assemble all
		# continuation lines into single lines

		len = length(restline)
		atsign = index(restline, "@")

		# if this line contains a continuation
		if(atsign && (atsign == len))
			more = 1
		else
			more = 0

		while(more == 1)
			{
			more = getline(junk)
			if(more == 1)
				{
				len = length($0)
				atsign = index($0, "@")
				# if this line contains a continuation
				if(atsign && (atsign == len))
					more = 1
				else
					more = 0
		
				# append this line to previous line(s)
				restline = restline $0
				}
			}

		# strip comment from line
		pound = index(restline, "#")
		if(pound)
			restline = substr(restline, 1, pound - 1)

		# find first space
		space = index(restline, " ")

		# if line has a label
		if(space != 1)
			{
			if(space == 0)
				label = restline
			else
				{
				label = substr(restline, 1, space-1)
				len = length(restline) - space
				restline = substr(restline, space + 1, len)
				}
			}
		else
			label = ""


		# trim leading blanks from line
		len = length(restline)
		while(index(restline, " ") == 1)
			{
			restline = substr(restline, 2, len-1)
			-- len
			}

		space = index(restline, " ")
		if(space)
			opcode = substr(restline, 1, space - 1)
		else
			opcode = ""

		if(opcode == "dfn_sub_")
			{
			# trim leading blanks from line
			len = length(restline)
			while(index(restline, " ") == 1)
				{
				restline = substr(restline, 2, len-1)
				-- len
				}

			# skip opcode
			len = len -8
			restline = substr(restline, 9, len)

			# trim leading blanks from line
			while(index(restline, " ") == 1)
				{
				restline = substr(restline, 2, len-1)
				-- len
				}

			# extract name of subroutine called
			lp = index(restline, "(")
			name = substr(restline, 1, lp - 1)
			len = len - lp
			restline = substr(restline, lp + 1, len)

			rp = index(restline, ")")
			if(rp)
				descr = substr(restline, 1, rp - 1)
			else
				descr = restline


# printf "%6d. name=%s descr=%s\n", NR, name, descr # kluge

			maxcsize = 50
			# force these to be sorted before
			# comments from global db
			cnt = 0
			while((len = length(descr)) > 0)
				{
				if(len >= maxcsize)
					{
					part = substr(descr, 1, maxcsize)
					descr = substr(descr, maxcsize + 1, len -length(part))
					}
				else
					{
					part = descr
					descr = ""
					}
				if(cnt == 0)
					{
					printf "%s;%d;%s\n", name, cnt, " "
					printf "%s;%d;# %s ==> %s\n", name, cnt, name, part
					}
				else
					printf "%s;%d;#         %s\n", name, cnt, part
				++cnt
				}
			}
		}' $FINFILE > "${LOCALCMTS}"

	awk '\
	# for each line of input
	(index($0, "#") != 1) \
		{
		restline = $0
		# read ahead to assemble all
		# continuation lines into single lines


		len = length($0)
		atsign = index($0, "@")

		# if this line contains a continuation
		if(atsign && (atsign == len))
			more = 1

		while(more == 1)
			{
			more = getline(junk)
			if(more == 1)
				{
				len = length($0)
				atsign = index($0, "@")
				# if this line contains a continuation
				if(atsign && (atsign == len))
					more = 1
				else
					more = 0
		
				# append this line to previous line(s)
				restline = restline $0
				}
			}

		# strip comment from line
		pound = index(restline, "#")
		if(pound)
			restline = substr(restline, 1, pound - 1)

		# find first space
		space = index(restline, " ")

		# if line has a label
		if(space != 1)
			{
			if(space == 0)
				label = restline
			else
				label = substr(restline, 1, space-1)
			}
		else
			{
			label = ""
			if($1 == "mc")
				{
				k = index(restline, "mc")
				len = length(restline)
				restline = substr(restline, k + 3, len - 4)
				}
			else if($1 == "me")
				{
				k = index(restline, "me")
				len = length(restline)
				restline = substr(restline, k + 3, len - 4)
				}
			}

		# if line has a label
		if(label != "")
			{
			restline = substr(restline, length(label) + 1, len - length(label))
			}
		len = length(restline)

		nfields = split(restline, field, " ")
		if(nfields)
			{
			opcode = field[1]
			}
		else
			opcode = "" 
# printf "%4d. %s\n", NR, $0 # kluge
		if(opcode == "call_sub_")
			{
			# extract name of subroutine called
			name = field[2]
			comma = index(name, ",")
			if(comma)
				name = substr(name, 1, comma - 1)
			printf "%s;%d\n", name, NR
			more = 1
			while((more == 1) && ($1 != "me"))
				{
				more = getline(stuff)
				}
			}
		else
			{
			if(($1 != "me") \
				&& ($1 != "mc") \
				&& (index(opcode, "(") != 1))

				printf "%s;%d\n", opcode, NR
			}
		} ' $FINFILE \
		| sort > ${FCNLINE}

				

	sort $LOCALCMTS $CMTFILE > $COMMENTS
# pr  $FCNLINE $COMMENTS # kluge
	join -t\; -j1 1 -j2 1 -o 1.2 2.2 2.3  $FCNLINE $COMMENTS

	if [ $# -ne 0 ]
	then
		shift
	fi

	NFILES=`expr ${NFILES} - 1`

	# set next source input file
	CFILE=$1
done

# clean up
rm -f ${TMPFILES}

exit ${EXIT_CODE}
