


     mmmmaaaakkkkeeeeiiiippppffff((((1111))))    UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((sssslllliiiimmmmmmmmeeeerrrr aaaaddddmmmmiiiinnnniiiissssttttrrrraaaattttoooorrrr))))    mmmmaaaakkkkeeeeiiiippppffff((((1111))))



     NNNNAAAAMMMMEEEE
          makeipf - build a slimmer (iolib) database from raw data

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          mmmmaaaakkkkeeeeiiiippppffff [[[[ooooppppttttiiiioooonnnnaaaallll ppppaaaarrrraaaammmmeeeetttteeeerrrrssss]]]] DDDDBBBBPPPPAAAATTTTHHHH DDDDBBBBNNNNAAAAMMMMEEEE

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          The mmmmaaaakkkkeeeeiiiippppffff command builds a slimmer database out of raw
          ASCII data.  The data must be of the form:
           .new [optional key]
           .desig1 data of field
           .desig2 data of field Usually this command is not invoked
          directly, but rather through the slimmer command
                                  build-db -d.

          The optional parameters for _m_a_k_e_i_p_f are

               ----iiii <<<<iiiinnnnppppuuuuttttffffiiiilllleeee>>>>
                    This causes the input data to come from the
                    indicated file, otherwise stdin is assumed.

               ----SSSS <<<<nnnnuuuummmmbbbbeeeerrrr>>>>
                    This indicates at which record in the database to
                    start assigning record keys.

               ----PPPP   This indicates that spaces are to be preserved in
                    the input data.  It is much better to do this
                    using the slimmer control file
                                      DBPATH/DBNAME
                    with a control line
                                      keep.space: y.

               ----NNNN   This indicates that new lines are to be preserved
                    in the input data.  It is much better to do this
                    using the slimmer control file
                                      DBPATH/DBNAME
                    with a control line
                                       new.line: y.

               ----aaaa   The _m_a_k_e_i_p_f command is designed for building a
                    slimmer IPF from scratch.  The command _m_a_r_g_S_i_p_f is
                    used for updating databases.  However, under
                    special circumstances, it is useful to be able to
                    add records directly to an existing IPF.  Note
                    that if this is done a
                                      build-db -f -i
                    must be done to keep the database in sync with
                    itself.

               ----AAAA   This causes fields to be physically stored in the
                    order they are listed in the incoming record.
                    This is useful for maintaining the order of



     Page 1                                          (printed 8/17/90)






     mmmmaaaakkkkeeeeiiiippppffff((((1111))))    UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((sssslllliiiimmmmmmmmeeeerrrr aaaaddddmmmmiiiinnnniiiissssttttrrrraaaattttoooorrrr))))    mmmmaaaakkkkeeeeiiiippppffff((((1111))))



                    generics.  That is, if you display the generic
                    field "au" which has 20 specific fields (e.g.
                    au.1, au.2, au.3); then the fields are displayed
                    in the order they are stored in the record.
                    Normally this is field number order.  However, the
                    -A flag can cause this to be the order the data
                    lists upon input.

     EEEEXXXXIIIITTTT VVVVAAAALLLLUUUUEEEE
          The function exits with a positive value under a number of
          error conditions.  In each case it prints an error message
          describing the problem.  In particular, it watches and will
          report if the device it is writting the terms to runs out of
          space.

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          build-db(slimmer administrator)
          margSipf(slimmer administrator)





































     Page 2                                          (printed 8/17/90)



