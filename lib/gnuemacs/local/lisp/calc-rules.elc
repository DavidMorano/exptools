
(require (quote calc-ext))

(defun calc-Need-calc-rules nil (byte-code "À‡" [nil] 1))

(defun calc-compile-rule-set (name rules) (byte-code "ÃÄ\"ˆÅ	Â\"ÃÆ\"ˆ‡" [name rules t message "Preparing rule set %s..." math-read-plain-expr "Preparing rule set %s...done"] 6))


(defun calc-CommuteRules () '(vec (calcFunc-iterations 1) (calcFunc-assign (calcFunc-select (calcFunc-plain (+ (var a var-a) (var b var-b)))) (calcFunc-select (calcFunc-plain (+ (var b var-b) (var a var-a))))) (calcFunc-assign (calcFunc-select (calcFunc-plain (- (var a var-a) (var b var-b)))) (calcFunc-select (calcFunc-plain (+ (neg (var b var-b)) (var a var-a))))) (calcFunc-assign (calcFunc-select (calcFunc-plain (* (/ 1 (var a var-a)) (var b var-b)))) (calcFunc-select (/ (var b var-b) (var a var-a)))) (calcFunc-assign (calcFunc-select (calcFunc-plain (* (var a var-a) (var b var-b)))) (calcFunc-select (* (var b var-b) (var a var-a)))) (calcFunc-assign (calcFunc-select (/ (/ 1 (var a var-a)) (var b var-b))) (calcFunc-select (/ (/ 1 (var b var-b)) (var a var-a)))) (calcFunc-assign (calcFunc-select (/ (var a var-a) (var b var-b))) (calcFunc-select (* (/ 1 (var b var-b)) (var a var-a)))) (calcFunc-assign (calcFunc-select (^ (^ (var a var-a) (var b var-b)) (var c var-c))) (calcFunc-select (^ (^ (var a var-a) (var c var-c)) (var b var-b)))) (calcFunc-assign (calcFunc-select (calcFunc-log (var a var-a) (var b var-b))) (calcFunc-select (/ 1 (calcFunc-log (var b var-b) (var a var-a))))) (calcFunc-assign (calcFunc-select (calcFunc-plain (calcFunc-land (var a var-a) (var b var-b)))) (calcFunc-select (calcFunc-land (var b var-b) (var a var-a)))) (calcFunc-assign (calcFunc-select (calcFunc-plain (calcFunc-lor (var a var-a) (var b var-b)))) (calcFunc-select (calcFunc-lor (var b var-b) (var a var-a)))) (calcFunc-assign (calcFunc-select (calcFunc-plain (calcFunc-eq (var a var-a) (var b var-b)))) (calcFunc-select (calcFunc-eq (var b var-b) (var a var-a)))) (calcFunc-assign (calcFunc-select (calcFunc-plain (calcFunc-neq (var a var-a) (var b var-b)))) (calcFunc-select (calcFunc-neq (var b var-b) (var a var-a)))) (calcFunc-assign (calcFunc-select (calcFunc-lt (var a var-a) (var b var-b))) (calcFunc-select (calcFunc-gt (var b var-b) (var a var-a)))) (calcFunc-assign (calcFunc-select (calcFunc-gt (var a var-a) (var b var-b))) (calcFunc-select (calcFunc-lt (var b var-b) (var a var-a)))) (calcFunc-assign (calcFunc-select (calcFunc-leq (var a var-a) (var b var-b))) (calcFunc-select (calcFunc-geq (var b var-b) (var a var-a)))) (calcFunc-assign (calcFunc-select (calcFunc-geq (var a var-a) (var b var-b))) (calcFunc-select (calcFunc-leq (var b var-b) (var a var-a))))))

(defun calc-DistribRules () '(vec (calcFunc-iterations 1) (calcFunc-assign (* (var x var-x) (calcFunc-select (+ (var a var-a) (var b var-b)))) (+ (* (var x var-x) (calcFunc-select (var a var-a))) (* (var x var-x) (var b var-b)))) (calcFunc-assign (* (var x var-x) (calcFunc-select (calcFunc-sum (var a var-a) (var b var-b) (var c var-c) (var d var-d)))) (calcFunc-sum (* (var x var-x) (calcFunc-select (var a var-a))) (var b var-b) (var c var-c) (var d var-d))) (calcFunc-assign (/ (var x var-x) (calcFunc-select (+ (var a var-a) (var b var-b)))) (/ 1 (+ (/ (calcFunc-select (var a var-a)) (var x var-x)) (/ (var b var-b) (var x var-x))))) (calcFunc-assign (/ (calcFunc-select (+ (var a var-a) (var b var-b))) (var x var-x)) (+ (/ (calcFunc-select (var a var-a)) (var x var-x)) (/ (var b var-b) (var x var-x)))) (calcFunc-assign (/ (calcFunc-sum (calcFunc-select (var a var-a)) (var b var-b) (var c var-c) (var d var-d)) (var x var-x)) (calcFunc-sum (/ (calcFunc-select (var a var-a)) (var x var-x)) (var b var-b) (var c var-c) (var d var-d))) (calcFunc-assign (^ (var x var-x) (calcFunc-select (+ (var a var-a) (var b var-b)))) (* (^ (var x var-x) (calcFunc-select (var a var-a))) (^ (var x var-x) (var b var-b)))) (calcFunc-assign (^ (var x var-x) (calcFunc-select (calcFunc-sum (var a var-a) (var b var-b) (var c var-c) (var d var-d)))) (calcFunc-prod (^ (var x var-x) (calcFunc-select (var a var-a))) (var b var-b) (var c var-c) (var d var-d))) (calcFunc-assign (^ (var x var-x) (calcFunc-select (* (var a var-a) (var b var-b)))) (^ (^ (var x var-x) (var a var-a)) (calcFunc-select (var b var-b)))) (calcFunc-assign (^ (var x var-x) (calcFunc-select (/ (var a var-a) (var b var-b)))) (^ (^ (var x var-x) (var a var-a)) (calcFunc-select (/ 1 (var b var-b))))) (calcFunc-condition (calcFunc-condition (calcFunc-condition (calcFunc-condition (calcFunc-assign (^ (calcFunc-select (+ (var a var-a) (var b var-b))) (var n var-n)) (calcFunc-select (var x var-x))) (calcFunc-integer (var n var-n))) (calcFunc-geq (var n var-n) 2)) (calcFunc-let (var x var-x) (calcFunc-expandpow (+ (var a var-a) (var b var-b)) (var n var-n)))) (calcFunc-quote (calcFunc-matches (var x var-x) (+ (var y var-y) (var z var-z))))) (calcFunc-assign (^ (calcFunc-select (+ (var a var-a) (var b var-b))) (var x var-x)) (+ (* (var a var-a) (^ (calcFunc-select (+ (var a var-a) (var b var-b))) (- (var x var-x) 1))) (* (var b var-b) (^ (calcFunc-select (+ (var a var-a) (var b var-b))) (- (var x var-x) 1))))) (calcFunc-assign (^ (calcFunc-select (* (var a var-a) (var b var-b))) (var x var-x)) (* (^ (var a var-a) (var x var-x)) (^ (calcFunc-select (var b var-b)) (var x var-x)))) (calcFunc-assign (^ (calcFunc-select (calcFunc-prod (var a var-a) (var b var-b) (var c var-c) (var d var-d))) (var x var-x)) (calcFunc-prod (^ (calcFunc-select (var a var-a)) (var x var-x)) (var b var-b) (var c var-c) (var d var-d))) (calcFunc-assign (^ (calcFunc-select (/ (var a var-a) (var b var-b))) (var x var-x)) (/ (^ (calcFunc-select (var a var-a)) (var x var-x)) (^ (var b var-b) (var x var-x)))) (calcFunc-assign (^ (calcFunc-select (neg (var a var-a))) (var x var-x)) (* (^ -1 (var x var-x)) (^ (calcFunc-select (var a var-a)) (var x var-x)))) (calcFunc-assign (calcFunc-plain (neg (calcFunc-select (+ (var a var-a) (var b var-b))))) (- (calcFunc-select (neg (var a var-a))) (var b var-b))) (calcFunc-assign (calcFunc-plain (neg (calcFunc-select (calcFunc-sum (var a var-a) (var b var-b) (var c var-c) (var d var-d))))) (calcFunc-sum (calcFunc-select (neg (var a var-a))) (var b var-b) (var c var-c) (var d var-d))) (calcFunc-assign (calcFunc-plain (neg (calcFunc-select (* (var a var-a) (var b var-b))))) (* (calcFunc-select (neg (var a var-a))) (var b var-b))) (calcFunc-assign (calcFunc-plain (neg (calcFunc-select (/ (var a var-a) (var b var-b))))) (/ (calcFunc-select (neg (var a var-a))) (var b var-b))) (calcFunc-assign (calcFunc-sqrt (calcFunc-select (* (var a var-a) (var b var-b)))) (* (calcFunc-sqrt (calcFunc-select (var a var-a))) (calcFunc-sqrt (var b var-b)))) (calcFunc-assign (calcFunc-sqrt (calcFunc-select (calcFunc-prod (var a var-a) (var b var-b) (var c var-c) (var d var-d)))) (calcFunc-prod (calcFunc-sqrt (calcFunc-select (var a var-a))) (var b var-b) (var c var-c) (var d var-d))) (calcFunc-assign (calcFunc-sqrt (calcFunc-select (/ (var a var-a) (var b var-b)))) (/ (calcFunc-sqrt (calcFunc-select (var a var-a))) (calcFunc-sqrt (var b var-b)))) (calcFunc-assign (calcFunc-sqrt (calcFunc-select (neg (var a var-a)))) (* (calcFunc-sqrt -1) (calcFunc-sqrt (calcFunc-select (var a var-a))))) (calcFunc-condition (calcFunc-assign (calcFunc-exp (calcFunc-select (+ (var a var-a) (var b var-b)))) (/ (calcFunc-exp (calcFunc-select (var a var-a))) (calcFunc-exp (neg (var b var-b))))) (calcFunc-negative (var b var-b))) (calcFunc-assign (calcFunc-exp (calcFunc-select (+ (var a var-a) (var b var-b)))) (* (calcFunc-exp (calcFunc-select (var a var-a))) (calcFunc-exp (var b var-b)))) (calcFunc-assign (calcFunc-exp (calcFunc-select (calcFunc-sum (var a var-a) (var b var-b) (var c var-c) (var d var-d)))) (calcFunc-prod (calcFunc-exp (calcFunc-select (var a var-a))) (var b var-b) (var c var-c) (var d var-d))) (calcFunc-condition (calcFunc-assign (calcFunc-exp (calcFunc-select (* (var a var-a) (var b var-b)))) (^ (calcFunc-exp (calcFunc-select (var a var-a))) (var b var-b))) (calcFunc-constant (var b var-b))) (calcFunc-assign (calcFunc-exp (calcFunc-select (* (var a var-a) (var b var-b)))) (^ (calcFunc-exp (calcFunc-select (var a var-a))) (var b var-b))) (calcFunc-assign (calcFunc-exp (calcFunc-select (/ (var a var-a) (var b var-b)))) (^ (calcFunc-exp (calcFunc-select (var a var-a))) (/ 1 (var b var-b)))) (calcFunc-assign (calcFunc-ln (calcFunc-select (* (var a var-a) (var b var-b)))) (+ (calcFunc-ln (calcFunc-select (var a var-a))) (calcFunc-ln (var b var-b)))) (calcFunc-assign (calcFunc-ln (calcFunc-select (calcFunc-prod (var a var-a) (var b var-b) (var c var-c) (var d var-d)))) (calcFunc-sum (calcFunc-ln (calcFunc-select (var a var-a))) (var b var-b) (var c var-c) (var d var-d))) (calcFunc-assign (calcFunc-ln (calcFunc-select (/ (var a var-a) (var b var-b)))) (- (calcFunc-ln (calcFunc-select (var a var-a))) (calcFunc-ln (var b var-b)))) (calcFunc-assign (calcFunc-ln (calcFunc-select (^ (var a var-a) (var b var-b)))) (* (calcFunc-ln (calcFunc-select (var a var-a))) (var b var-b))) (calcFunc-assign (calcFunc-log10 (calcFunc-select (* (var a var-a) (var b var-b)))) (+ (calcFunc-log10 (calcFunc-select (var a var-a))) (calcFunc-log10 (var b var-b)))) (calcFunc-assign (calcFunc-log10 (calcFunc-select (calcFunc-prod (var a var-a) (var b var-b) (var c var-c) (var d var-d)))) (calcFunc-sum (calcFunc-log10 (calcFunc-select (var a var-a))) (var b var-b) (var c var-c) (var d var-d))) (calcFunc-assign (calcFunc-log10 (calcFunc-select (/ (var a var-a) (var b var-b)))) (- (calcFunc-log10 (calcFunc-select (var a var-a))) (calcFunc-log10 (var b var-b)))) (calcFunc-assign (calcFunc-log10 (calcFunc-select (^ (var a var-a) (var b var-b)))) (* (calcFunc-log10 (calcFunc-select (var a var-a))) (var b var-b))) (calcFunc-assign (calcFunc-log (calcFunc-select (* (var a var-a) (var b var-b))) (var x var-x)) (+ (calcFunc-log (calcFunc-select (var a var-a)) (var x var-x)) (calcFunc-log (var b var-b) (var x var-x)))) (calcFunc-assign (calcFunc-log (calcFunc-select (calcFunc-prod (var a var-a) (var b var-b) (var c var-c) (var d var-d))) (var x var-x)) (calcFunc-sum (calcFunc-log (calcFunc-select (var a var-a)) (var x var-x)) (var b var-b) (var c var-c) (var d var-d))) (calcFunc-assign (calcFunc-log (calcFunc-select (/ (var a var-a) (var b var-b))) (var x var-x)) (- (calcFunc-log (calcFunc-select (var a var-a)) (var x var-x)) (calcFunc-log (var b var-b) (var x var-x)))) (calcFunc-assign (calcFunc-log (calcFunc-select (^ (var a var-a) (var b var-b))) (var x var-x)) (* (calcFunc-log (calcFunc-select (var a var-a)) (var x var-x)) (var b var-b))) (calcFunc-assign (calcFunc-log (var a var-a) (calcFunc-select (var b var-b))) (/ (calcFunc-ln (var a var-a)) (calcFunc-select (calcFunc-ln (var b var-b))))) (calcFunc-assign (calcFunc-sin (calcFunc-select (+ (var a var-a) (var b var-b)))) (+ (* (calcFunc-sin (calcFunc-select (var a var-a))) (calcFunc-cos (var b var-b))) (* (calcFunc-cos (var a var-a)) (calcFunc-sin (var b var-b))))) (calcFunc-assign (calcFunc-sin (calcFunc-select (* 2 (var a var-a)))) (* 2 (* (calcFunc-sin (calcFunc-select (var a var-a))) (calcFunc-cos (var a var-a))))) (calcFunc-condition (calcFunc-condition (calcFunc-assign (calcFunc-sin (calcFunc-select (* (var n var-n) (var a var-a)))) (- (* 2 (* (calcFunc-sin (* (- (var n var-n) 1) (calcFunc-select (var a var-a)))) (calcFunc-cos (var a var-a)))) (calcFunc-sin (* (- (var n var-n) 2) (var a var-a))))) (calcFunc-integer (var n var-n))) (calcFunc-gt (var n var-n) 2)) (calcFunc-assign (calcFunc-cos (calcFunc-select (+ (var a var-a) (var b var-b)))) (- (* (calcFunc-cos (calcFunc-select (var a var-a))) (calcFunc-cos (var b var-b))) (* (calcFunc-sin (var a var-a)) (calcFunc-sin (var b var-b))))) (calcFunc-assign (calcFunc-cos (calcFunc-select (* 2 (var a var-a)))) (- (* 2 (^ (calcFunc-cos (calcFunc-select (var a var-a))) 2)) 1)) (calcFunc-condition (calcFunc-condition (calcFunc-assign (calcFunc-cos (calcFunc-select (* (var n var-n) (var a var-a)))) (- (* 2 (* (calcFunc-cos (* (- (var n var-n) 1) (calcFunc-select (var a var-a)))) (calcFunc-cos (var a var-a)))) (calcFunc-cos (* (- (var n var-n) 2) (var a var-a))))) (calcFunc-integer (var n var-n))) (calcFunc-gt (var n var-n) 2)) (calcFunc-assign (calcFunc-tan (calcFunc-select (+ (var a var-a) (var b var-b)))) (/ (+ (calcFunc-tan (calcFunc-select (var a var-a))) (calcFunc-tan (var b var-b))) (- 1 (* (calcFunc-tan (var a var-a)) (calcFunc-tan (var b var-b)))))) (calcFunc-assign (calcFunc-tan (calcFunc-select (* 2 (var a var-a)))) (/ (* 2 (calcFunc-tan (calcFunc-select (var a var-a)))) (- 1 (^ (calcFunc-tan (var a var-a)) 2)))) (calcFunc-condition (calcFunc-condition (calcFunc-assign (calcFunc-tan (calcFunc-select (* (var n var-n) (var a var-a)))) (/ (+ (calcFunc-tan (* (- (var n var-n) 1) (calcFunc-select (var a var-a)))) (calcFunc-tan (var a var-a))) (- 1 (* (calcFunc-tan (* (- (var n var-n) 1) (var a var-a))) (calcFunc-tan (var a var-a)))))) (calcFunc-integer (var n var-n))) (calcFunc-gt (var n var-n) 2)) (calcFunc-assign (calcFunc-sinh (calcFunc-select (+ (var a var-a) (var b var-b)))) (+ (* (calcFunc-sinh (calcFunc-select (var a var-a))) (calcFunc-cosh (var b var-b))) (* (calcFunc-cosh (var a var-a)) (calcFunc-sinh (var b var-b))))) (calcFunc-assign (calcFunc-cosh (calcFunc-select (+ (var a var-a) (var b var-b)))) (+ (* (calcFunc-cosh (calcFunc-select (var a var-a))) (calcFunc-cosh (var b var-b))) (* (calcFunc-sinh (var a var-a)) (calcFunc-sinh (var b var-b))))) (calcFunc-assign (calcFunc-tanh (calcFunc-select (+ (var a var-a) (var b var-b)))) (/ (+ (calcFunc-tanh (calcFunc-select (var a var-a))) (calcFunc-tanh (var b var-b))) (+ 1 (* (calcFunc-tanh (var a var-a)) (calcFunc-tanh (var b var-b)))))) (calcFunc-assign (calcFunc-land (var x var-x) (calcFunc-select (calcFunc-lor (var a var-a) (var b var-b)))) (calcFunc-lor (calcFunc-land (var x var-x) (calcFunc-select (var a var-a))) (calcFunc-land (var x var-x) (var b var-b)))) (calcFunc-assign (calcFunc-land (calcFunc-select (calcFunc-lor (var a var-a) (var b var-b))) (var x var-x)) (calcFunc-lor (calcFunc-land (calcFunc-select (var a var-a)) (var x var-x)) (calcFunc-land (var b var-b) (var x var-x)))) (calcFunc-assign (calcFunc-lnot (calcFunc-select (calcFunc-land (var a var-a) (var b var-b)))) (calcFunc-lor (calcFunc-lnot (var a var-a)) (calcFunc-lnot (var b var-b)))) (calcFunc-assign (calcFunc-lnot (calcFunc-select (calcFunc-lor (var a var-a) (var b var-b)))) (calcFunc-land (calcFunc-lnot (var a var-a)) (calcFunc-lnot (var b var-b))))))

(defun calc-FactorRules () '(vec (calcFunc-condition (calcFunc-condition (calcFunc-assign (calcFunc-thecoefs (var x var-x) (vec (var z var-z) (+ (var a var-a) (var b var-b)) (var c var-c))) (calcFunc-thefactors (var x var-x) (vec (+ (* (var d var-d) (var x var-x)) (/ (* (var d var-d) (var a var-a)) (var c var-c))) (+ (* (/ (var c var-c) (var d var-d)) (var x var-x)) (/ (var b var-b) (var d var-d)))))) (calcFunc-eq (var z var-z) (/ (* (var a var-a) (var b var-b)) (var c var-c)))) (calcFunc-let (calcFunc-assign (var d var-d) (calcFunc-pgcd (calcFunc-pcont (var c var-c)) (calcFunc-pcont (var b var-b)))))) (calcFunc-condition (calcFunc-condition (calcFunc-condition (calcFunc-assign (calcFunc-thecoefs (var x var-x) (vec (var z var-z) (var a var-a) (var c var-c))) (calcFunc-thefactors (var x var-x) (vec (^ (+ (* (var r var-r) (var x var-x)) (/ (var a var-a) (* 2 (var r var-r)))) 2)))) (calcFunc-eq (var z var-z) (/ (^ (/ (var a var-a) 2) 2) (var c var-c)))) (calcFunc-let (calcFunc-assign (var r var-r) (calcFunc-esimplify (calcFunc-sqrt (var c var-c)))))) (calcFunc-lnot (calcFunc-matches (var r var-r) (calcFunc-sqrt (var rr var-rr))))) (calcFunc-condition (calcFunc-condition (calcFunc-condition (calcFunc-condition (calcFunc-condition (calcFunc-assign (calcFunc-thecoefs (var x var-x) (vec (var z var-z) 0 (var c var-c))) (calcFunc-thefactors (var x var-x) (vec (+ (* (var rc var-rc) (var x var-x)) (var rz var-rz)) (- (* (var rc var-rc) (var x var-x)) (var rz var-rz))))) (calcFunc-negative (var z var-z))) (calcFunc-let (calcFunc-assign (var rz var-rz) (calcFunc-esimplify (calcFunc-sqrt (neg (var z var-z))))))) (calcFunc-lnot (calcFunc-matches (var rz var-rz) (calcFunc-sqrt (var rzz var-rzz))))) (calcFunc-let (calcFunc-assign (var rc var-rc) (calcFunc-esimplify (calcFunc-sqrt (var c var-c)))))) (calcFunc-lnot (calcFunc-matches (var rc var-rc) (calcFunc-sqrt (var rcc var-rcc))))) (calcFunc-condition (calcFunc-condition (calcFunc-condition (calcFunc-condition (calcFunc-condition (calcFunc-assign (calcFunc-thecoefs (var x var-x) (vec (var z var-z) 0 (var c var-c))) (calcFunc-thefactors (var x var-x) (vec (+ (var rz var-rz) (* (var rc var-rc) (var x var-x))) (- (var rz var-rz) (* (var rc var-rc) (var x var-x)))))) (calcFunc-negative (var c var-c))) (calcFunc-let (calcFunc-assign (var rz var-rz) (calcFunc-esimplify (calcFunc-sqrt (var z var-z)))))) (calcFunc-lnot (calcFunc-matches (var rz var-rz) (calcFunc-sqrt (var rzz var-rzz))))) (calcFunc-let (calcFunc-assign (var rc var-rc) (calcFunc-esimplify (calcFunc-sqrt (neg (var c var-c))))))) (calcFunc-lnot (calcFunc-matches (var rc var-rc) (calcFunc-sqrt (var rcc var-rcc)))))))

(defun calc-FitRules () '(vec (calcFunc-schedule 1 2 3 4) (calcFunc-iterations (var inf var-inf)) (calcFunc-phase 1) (calcFunc-assign (^ (var e var-e) (var x var-x)) (calcFunc-exp (var x var-x))) (calcFunc-condition (calcFunc-assign (^ (var x var-x) (var y var-y)) (calcFunc-exp (* (var y var-y) (calcFunc-ln (var x var-x))))) (calcFunc-lnot (calcFunc-istrue (calcFunc-constant (var y var-y))))) (calcFunc-assign (/ (var x var-x) (var y var-y)) (* (var x var-x) (calcFunc-fitinv (var y var-y)))) (calcFunc-assign (calcFunc-fitinv (* (var x var-x) (var y var-y))) (* (calcFunc-fitinv (var x var-x)) (calcFunc-fitinv (var y var-y)))) (calcFunc-assign (* (calcFunc-exp (var a var-a)) (calcFunc-exp (var b var-b))) (calcFunc-exp (+ (var a var-a) (var b var-b)))) (calcFunc-condition (calcFunc-assign (* (var a var-a) (calcFunc-exp (var b var-b))) (calcFunc-exp (+ (calcFunc-ln (var a var-a)) (var b var-b)))) (calcFunc-lnot (calcFunc-hasfitvars (var a var-a)))) (calcFunc-assign (calcFunc-fitinv (calcFunc-exp (var a var-a))) (calcFunc-exp (neg (var a var-a)))) (calcFunc-assign (calcFunc-ln (* (var a var-a) (var b var-b))) (+ (calcFunc-ln (var a var-a)) (calcFunc-ln (var b var-b)))) (calcFunc-assign (calcFunc-ln (calcFunc-fitinv (var a var-a))) (neg (calcFunc-ln (var a var-a)))) (calcFunc-assign (calcFunc-log10 (* (var a var-a) (var b var-b))) (+ (calcFunc-log10 (var a var-a)) (calcFunc-log10 (var b var-b)))) (calcFunc-assign (calcFunc-log10 (calcFunc-fitinv (var a var-a))) (neg (calcFunc-log10 (var a var-a)))) (calcFunc-assign (calcFunc-log (var a var-a) (var b var-b)) (/ (calcFunc-ln (var a var-a)) (calcFunc-ln (var b var-b)))) (calcFunc-assign (calcFunc-ln (calcFunc-exp (var a var-a))) (var a var-a)) (calcFunc-assign (* (var a var-a) (+ (var b var-b) (var c var-c))) (+ (* (var a var-a) (var b var-b)) (* (var a var-a) (var c var-c)))) (calcFunc-condition (calcFunc-condition (calcFunc-condition (calcFunc-condition (calcFunc-assign (^ (+ (var a var-a) (var b var-b)) (var n var-n)) (var x var-x)) (calcFunc-integer (var n var-n))) (calcFunc-geq (var n var-n) 2)) (calcFunc-let (var x var-x) (calcFunc-expandpow (+ (var a var-a) (var b var-b)) (var n var-n)))) (calcFunc-quote (calcFunc-matches (var x var-x) (+ (var y var-y) (var z var-z))))) (calcFunc-phase 1 2) (calcFunc-assign (calcFunc-fitmodel (calcFunc-eq (var y var-y) (var x var-x))) (calcFunc-fitmodel 0 (- (var y var-y) (var x var-x)))) (calcFunc-condition (calcFunc-assign (calcFunc-fitmodel (var y var-y) (+ (var x var-x) (var c var-c))) (calcFunc-fitmodel (- (var y var-y) (var c var-c)) (var x var-x))) (calcFunc-lnot (calcFunc-hasfitparams (var c var-c)))) (calcFunc-condition (calcFunc-assign (calcFunc-fitmodel (var y var-y) (* (var x var-x) (var c var-c))) (calcFunc-fitmodel (/ (var y var-y) (var c var-c)) (var x var-x))) (calcFunc-lnot (calcFunc-hasfitparams (var c var-c)))) (calcFunc-condition (calcFunc-assign (calcFunc-fitmodel (var y var-y) (/ (var x var-x) (* (var c var-c) (calcFunc-opt (var d var-d))))) (calcFunc-fitmodel (* (var y var-y) (var c var-c)) (/ (var x var-x) (var d var-d)))) (calcFunc-lnot (calcFunc-hasfitparams (var c var-c)))) (calcFunc-condition (calcFunc-condition (calcFunc-assign (calcFunc-fitmodel (var y var-y) (calcFunc-apply (var f var-f) (vec (var x var-x)))) (calcFunc-fitmodel (var yy var-yy) (var x var-x))) (calcFunc-hasfitparams (var x var-x))) (calcFunc-let (calcFunc-eq (calcFunc-FTemp) (var yy var-yy)) (calcFunc-solve (calcFunc-eq (calcFunc-apply (var f var-f) (vec (calcFunc-FTemp))) (var y var-y)) (calcFunc-FTemp)))) (calcFunc-condition (calcFunc-condition (calcFunc-assign (calcFunc-fitmodel (var y var-y) (calcFunc-apply (var f var-f) (vec (var x var-x) (var c var-c)))) (calcFunc-fitmodel (var yy var-yy) (var x var-x))) (calcFunc-lnot (calcFunc-hasfitparams (var c var-c)))) (calcFunc-let (calcFunc-eq (calcFunc-FTemp) (var yy var-yy)) (calcFunc-solve (calcFunc-eq (calcFunc-apply (var f var-f) (vec (calcFunc-FTemp) (var c var-c))) (var y var-y)) (calcFunc-FTemp)))) (calcFunc-condition (calcFunc-condition (calcFunc-assign (calcFunc-fitmodel (var y var-y) (calcFunc-apply (var f var-f) (vec (var c var-c) (var x var-x)))) (calcFunc-fitmodel (var yy var-yy) (var x var-x))) (calcFunc-lnot (calcFunc-hasfitparams (var c var-c)))) (calcFunc-let (calcFunc-eq (calcFunc-FTemp) (var yy var-yy)) (calcFunc-solve (calcFunc-eq (calcFunc-apply (var f var-f) (vec (var c var-c) (calcFunc-FTemp))) (var y var-y)) (calcFunc-FTemp)))) (calcFunc-phase 2 3) (calcFunc-assign (calcFunc-fitmodel (var y var-y) (var x var-x)) (calcFunc-fitsystem (var y var-y) (vec) (vec) (calcFunc-fitpart 1 1 (var x var-x)))) (calcFunc-assign (calcFunc-fitpart (var a var-a) (var b var-b) (calcFunc-plain (+ (var x var-x) (var y var-y)))) (+ (calcFunc-fitpart (var a var-a) (var b var-b) (var x var-x)) (calcFunc-fitpart (var a var-a) (var b var-b) (var y var-y)))) (calcFunc-assign (calcFunc-fitpart (var a var-a) (var b var-b) (calcFunc-plain (- (var x var-x) (var y var-y)))) (+ (calcFunc-fitpart (var a var-a) (var b var-b) (var x var-x)) (calcFunc-fitpart (neg (var a var-a)) (var b var-b) (var y var-y)))) (calcFunc-assign (calcFunc-fitpart (var a var-a) (var b var-b) (calcFunc-plain (neg (var x var-x)))) (calcFunc-fitpart (neg (var a var-a)) (var b var-b) (var x var-x))) (calcFunc-condition (calcFunc-assign (calcFunc-fitpart (var a var-a) (var b var-b) (* (var x var-x) (calcFunc-opt (var c var-c)))) (calcFunc-fitpart (var a var-a) (* (var x var-x) (var b var-b)) (var c var-c))) (calcFunc-lnot (calcFunc-hasfitvars (var x var-x)))) (calcFunc-condition (calcFunc-assign (calcFunc-fitpart (var a var-a) (* (var x var-x) (calcFunc-opt (var b var-b))) (var c var-c)) (calcFunc-fitpart (* (var x var-x) (var a var-a)) (var b var-b) (var c var-c))) (calcFunc-lnot (calcFunc-hasfitparams (var x var-x)))) (calcFunc-assign (calcFunc-fitpart (var a var-a) (+ (* (var x var-x) (var y var-y)) (* (var x var-x) (calcFunc-opt (var z var-z)))) (var c var-c)) (calcFunc-fitpart (var a var-a) (* (var x var-x) (+ (var y var-y) (var z var-z))) (var c var-c))) (calcFunc-assign (calcFunc-fitpart (var a var-a) (var b var-b) (var c var-c)) (calcFunc-fitpart2 (var a var-a) (var b var-b) (var c var-c))) (calcFunc-phase 3) (calcFunc-assign (+ (calcFunc-fitpart2 (var a1 var-a1) (var b1 var-b1) (var x var-x)) (calcFunc-fitpart2 (var a2 var-a2) (var b2 var-b2) (var x var-x))) (calcFunc-fitpart 1 (+ (* (var a1 var-a1) (var b1 var-b1)) (* (var a2 var-a2) (var b2 var-b2))) (var x var-x))) (calcFunc-assign (+ (calcFunc-fitpart2 (var a1 var-a1) (var x var-x) (var c1 var-c1)) (calcFunc-fitpart2 (var a2 var-a2) (var x var-x) (var c2 var-c2))) (calcFunc-fitpart2 1 (var x var-x) (+ (* (var a1 var-a1) (var c1 var-c1)) (* (var a2 var-a2) (var c2 var-c2))))) (calcFunc-phase 4) (calcFunc-assign (calcFunc-fitinv (var x var-x)) (/ 1 (var x var-x))) (calcFunc-assign (calcFunc-exp (+ (var x var-x) (calcFunc-ln (var y var-y)))) (* (var y var-y) (calcFunc-exp (var x var-x)))) (calcFunc-assign (calcFunc-exp (* (var x var-x) (calcFunc-ln (var y var-y)))) (^ (var y var-y) (var x var-x))) (calcFunc-assign (+ (calcFunc-ln (var x var-x)) (calcFunc-ln (var y var-y))) (calcFunc-ln (* (var x var-x) (var y var-y)))) (calcFunc-assign (- (calcFunc-ln (var x var-x)) (calcFunc-ln (var y var-y))) (calcFunc-ln (/ (var x var-x) (var y var-y)))) (calcFunc-assign (+ (* (var x var-x) (var y var-y)) (* (var x var-x) (var z var-z))) (* (var x var-x) (+ (var y var-y) (var z var-z)))) (calcFunc-condition (calcFunc-assign (calcFunc-fitsystem (var y var-y) (var xv var-xv) (var pv var-pv) (+ (calcFunc-fitpart2 (var a var-a) (calcFunc-fitparam (var b var-b)) (var c var-c)) (calcFunc-opt (var d var-d)))) (calcFunc-fitsystem (var y var-y) (calcFunc-rcons (var xv var-xv) (* (var a var-a) (var c var-c))) (calcFunc-rcons (var pv var-pv) (calcFunc-eq (calcFunc-fitdummy (var b var-b)) (calcFunc-fitparam (var b var-b)))) (var d var-d))) (calcFunc-eq (var b var-b) (+ (calcFunc-vlen (var pv var-pv)) 1))) (calcFunc-assign (calcFunc-fitsystem (var y var-y) (var xv var-xv) (var pv var-pv) (+ (calcFunc-fitpart2 (var a var-a) (var b var-b) (var c var-c)) (calcFunc-opt (var d var-d)))) (calcFunc-fitsystem (var y var-y) (calcFunc-rcons (var xv var-xv) (* (var a var-a) (var c var-c))) (calcFunc-rcons (var pv var-pv) (calcFunc-eq (calcFunc-fitdummy (+ (calcFunc-vlen (var pv var-pv)) 1)) (var b var-b))) (var d var-d))) (calcFunc-condition (calcFunc-condition (calcFunc-assign (calcFunc-fitsystem (var y var-y) (var xv var-xv) (var pv var-pv) 0) (calcFunc-fitsystem (var y var-y) (var xv var-xv) (calcFunc-cons (var fvh var-fvh) (var fvt var-fvt)))) (calcFunc-lnot (calcFunc-hasfitparams (var xv var-xv)))) (calcFunc-let (calcFunc-cons (var fvh var-fvh) (var fvt var-fvt)) (calcFunc-solve (var pv var-pv) (calcFunc-table (calcFunc-fitparam (var j var-j)) (var j var-j) 1 (calcFunc-hasfitparams (var pv var-pv)))))) (calcFunc-assign (calcFunc-eq (calcFunc-fitparam (var n var-n)) (var x var-x)) (var x var-x))))

(defun calc-IntegAfterRules () '(vec (calcFunc-condition (calcFunc-condition (calcFunc-assign (+ (* (calcFunc-opt (var a var-a)) (calcFunc-ln (var x var-x))) (* (calcFunc-opt (var b var-b)) (calcFunc-ln (var y var-y)))) (* 2 (* (var a var-a) (calcFunc-esimplify (calcFunc-arctanh (- (var x var-x) 1)))))) (calcFunc-eq (+ (var a var-a) (var b var-b)) 0)) (calcFunc-lor (calcFunc-eq (calcFunc-nrat (+ (var x var-x) (var y var-y))) 2) (calcFunc-eq (calcFunc-nrat (- (var x var-x) (var y var-y))) 2))) (calcFunc-condition (calcFunc-assign (* (var a var-a) (+ (var b var-b) (var c var-c))) (+ (* (var a var-a) (var b var-b)) (* (var a var-a) (var c var-c)))) (calcFunc-constant (var a var-a)))))

(defun calc-InvertRules () '(vec (calcFunc-iterations 1) (calcFunc-assign (* (var a var-a) (calcFunc-select (var x var-x))) (/ (var a var-a) (calcFunc-select (/ 1 (var x var-x))))) (calcFunc-assign (/ (var a var-a) (calcFunc-select (var x var-x))) (* (var a var-a) (calcFunc-select (/ 1 (var x var-x))))) (calcFunc-assign (/ (calcFunc-select (var x var-x)) (var a var-a)) (/ 1 (* (calcFunc-select (/ 1 (var x var-x))) (var a var-a)))) (calcFunc-assign (calcFunc-prod (calcFunc-select (var x var-x)) (var b var-b) (var c var-c) (var d var-d)) (/ 1 (calcFunc-prod (calcFunc-select (/ 1 (var x var-x))) (var b var-b) (var c var-c) (var d var-d)))) (calcFunc-assign (calcFunc-abs (calcFunc-select (var x var-x))) (/ 1 (calcFunc-abs (calcFunc-select (/ 1 (var x var-x)))))) (calcFunc-assign (calcFunc-sqrt (calcFunc-select (var x var-x))) (/ 1 (calcFunc-sqrt (calcFunc-select (/ 1 (var x var-x)))))) (calcFunc-assign (calcFunc-ln (calcFunc-select (var x var-x))) (neg (calcFunc-ln (calcFunc-select (/ 1 (var x var-x)))))) (calcFunc-assign (calcFunc-log10 (calcFunc-select (var x var-x))) (neg (calcFunc-log10 (calcFunc-select (/ 1 (var x var-x)))))) (calcFunc-assign (calcFunc-log (calcFunc-select (var x var-x)) (var a var-a)) (neg (calcFunc-log (calcFunc-select (/ 1 (var x var-x))) (var a var-a)))) (calcFunc-assign (calcFunc-log (var a var-a) (calcFunc-select (var x var-x))) (neg (calcFunc-log (var a var-a) (calcFunc-select (/ 1 (var x var-x)))))) (calcFunc-assign (calcFunc-arctan (calcFunc-select (var x var-x))) (- (calcFunc-simplify (* 2 (calcFunc-arctan 1))) (calcFunc-arctan (calcFunc-select (/ 1 (var x var-x)))))) (calcFunc-assign (calcFunc-eq (calcFunc-select (var x var-x)) (var a var-a)) (calcFunc-eq (calcFunc-select (/ 1 (var x var-x))) (/ 1 (var a var-a)))) (calcFunc-assign (calcFunc-neq (calcFunc-select (var x var-x)) (var a var-a)) (calcFunc-neq (calcFunc-select (/ 1 (var x var-x))) (/ 1 (var a var-a)))) (calcFunc-assign (calcFunc-lt (calcFunc-select (var x var-x)) (var a var-a)) (calcFunc-gt (calcFunc-select (/ 1 (var x var-x))) (/ 1 (var a var-a)))) (calcFunc-assign (calcFunc-gt (calcFunc-select (var x var-x)) (var a var-a)) (calcFunc-lt (calcFunc-select (/ 1 (var x var-x))) (/ 1 (var a var-a)))) (calcFunc-assign (calcFunc-leq (calcFunc-select (var x var-x)) (var a var-a)) (calcFunc-geq (calcFunc-select (/ 1 (var x var-x))) (/ 1 (var a var-a)))) (calcFunc-assign (calcFunc-geq (calcFunc-select (var x var-x)) (var a var-a)) (calcFunc-leq (calcFunc-select (/ 1 (var x var-x))) (/ 1 (var a var-a)))) (calcFunc-assign (calcFunc-lt (var a var-a) (calcFunc-select (var x var-x))) (calcFunc-gt (/ 1 (var a var-a)) (calcFunc-select (/ 1 (var x var-x))))) (calcFunc-assign (calcFunc-gt (var a var-a) (calcFunc-select (var x var-x))) (calcFunc-lt (/ 1 (var a var-a)) (calcFunc-select (/ 1 (var x var-x))))) (calcFunc-assign (calcFunc-leq (var a var-a) (calcFunc-select (var x var-x))) (calcFunc-geq (/ 1 (var a var-a)) (calcFunc-select (/ 1 (var x var-x))))) (calcFunc-assign (calcFunc-geq (var a var-a) (calcFunc-select (var x var-x))) (calcFunc-leq (/ 1 (var a var-a)) (calcFunc-select (/ 1 (var x var-x))))) (calcFunc-assign (calcFunc-select (var x var-x)) (/ 1 (calcFunc-select (/ 1 (var x var-x)))))))

(defun calc-JumpRules () '(vec (calcFunc-iterations 1) (calcFunc-assign (calcFunc-plain (calcFunc-eq (calcFunc-select (var x var-x)) (var y var-y))) (calcFunc-eq 0 (+ (calcFunc-select (neg (var x var-x))) (var y var-y)))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (+ (var a var-a) (calcFunc-select (var x var-x))) (var y var-y))) (calcFunc-eq (var a var-a) (+ (calcFunc-select (neg (var x var-x))) (var y var-y)))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (- (var a var-a) (calcFunc-select (var x var-x))) (var y var-y))) (calcFunc-eq (var a var-a) (+ (calcFunc-select (var x var-x)) (var y var-y)))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (+ (calcFunc-select (var x var-x)) (var a var-a)) (var y var-y))) (calcFunc-eq (var a var-a) (+ (calcFunc-select (neg (var x var-x))) (var y var-y)))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (* (var a var-a) (calcFunc-select (var x var-x))) (var y var-y))) (calcFunc-eq (var a var-a) (/ (var y var-y) (calcFunc-select (var x var-x))))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (/ (var a var-a) (calcFunc-select (var x var-x))) (var y var-y))) (calcFunc-eq (var a var-a) (* (calcFunc-select (var x var-x)) (var y var-y)))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (/ (calcFunc-select (var x var-x)) (var a var-a)) (var y var-y))) (calcFunc-eq (/ 1 (var a var-a)) (/ (var y var-y) (calcFunc-select (var x var-x))))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (^ (var a var-a) (calcFunc-select 2)) (var y var-y))) (calcFunc-eq (var a var-a) (calcFunc-select (calcFunc-sqrt (var y var-y))))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (^ (var a var-a) (calcFunc-select (var x var-x))) (var y var-y))) (calcFunc-eq (var a var-a) (^ (var y var-y) (calcFunc-select (/ 1 (var x var-x)))))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (^ (calcFunc-select (var x var-x)) (var a var-a)) (var y var-y))) (calcFunc-eq (var a var-a) (calcFunc-log (var y var-y) (calcFunc-select (var x var-x))))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (calcFunc-log (var a var-a) (calcFunc-select (var x var-x))) (var y var-y))) (calcFunc-eq (var a var-a) (^ (calcFunc-select (var x var-x)) (var y var-y)))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (calcFunc-log (calcFunc-select (var x var-x)) (var a var-a)) (var y var-y))) (calcFunc-eq (var a var-a) (^ (calcFunc-select (var x var-x)) (/ 1 (var y var-y))))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (var y var-y) (calcFunc-select (var x var-x)))) (calcFunc-eq (- (var y var-y) (calcFunc-select (var x var-x))) 0)) (calcFunc-assign (calcFunc-plain (calcFunc-eq (var y var-y) (+ (var a var-a) (calcFunc-select (var x var-x))))) (calcFunc-eq (- (var y var-y) (calcFunc-select (var x var-x))) (var a var-a))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (var y var-y) (- (var a var-a) (calcFunc-select (var x var-x))))) (calcFunc-eq (+ (var y var-y) (calcFunc-select (var x var-x))) (var a var-a))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (var y var-y) (+ (calcFunc-select (var x var-x)) (var a var-a)))) (calcFunc-eq (- (var y var-y) (calcFunc-select (var x var-x))) (var a var-a))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (var y var-y) (* (var a var-a) (calcFunc-select (var x var-x))))) (calcFunc-eq (/ (var y var-y) (calcFunc-select (var x var-x))) (var a var-a))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (var y var-y) (/ (var a var-a) (calcFunc-select (var x var-x))))) (calcFunc-eq (* (var y var-y) (calcFunc-select (var x var-x))) (var a var-a))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (var y var-y) (/ (calcFunc-select (var x var-x)) (var a var-a)))) (calcFunc-eq (/ (var y var-y) (calcFunc-select (var x var-x))) (/ 1 (var a var-a)))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (var y var-y) (^ (var a var-a) (calcFunc-select 2)))) (calcFunc-eq (calcFunc-select (calcFunc-sqrt (var y var-y))) (var a var-a))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (var y var-y) (^ (var a var-a) (calcFunc-select (var x var-x))))) (calcFunc-eq (^ (var y var-y) (calcFunc-select (/ 1 (var x var-x)))) (var a var-a))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (var y var-y) (^ (calcFunc-select (var x var-x)) (var a var-a)))) (calcFunc-eq (calcFunc-log (var y var-y) (calcFunc-select (var x var-x))) (var a var-a))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (var y var-y) (calcFunc-log (var a var-a) (calcFunc-select (var x var-x))))) (calcFunc-eq (^ (calcFunc-select (var x var-x)) (var y var-y)) (var a var-a))) (calcFunc-assign (calcFunc-plain (calcFunc-eq (var y var-y) (calcFunc-log (calcFunc-select (var x var-x)) (var a var-a)))) (calcFunc-eq (^ (calcFunc-select (var x var-x)) (/ 1 (var y var-y))) (var a var-a)))))

(defun calc-MergeRules () '(vec (calcFunc-iterations 1) (calcFunc-assign (+ (* (var x var-x) (calcFunc-opt (var a var-a))) (calcFunc-select (* (var x var-x) (var b var-b)))) (* (var x var-x) (+ (var a var-a) (calcFunc-select (var b var-b))))) (calcFunc-assign (- (* (var x var-x) (calcFunc-opt (var a var-a))) (calcFunc-select (* (var x var-x) (var b var-b)))) (* (var x var-x) (- (var a var-a) (calcFunc-select (var b var-b))))) (calcFunc-assign (calcFunc-sum (* (calcFunc-select (var x var-x)) (var a var-a)) (var b var-b) (var c var-c) (var d var-d)) (* (var x var-x) (calcFunc-sum (calcFunc-select (var a var-a)) (var b var-b) (var c var-c) (var d var-d)))) (calcFunc-assign (+ (/ (var a var-a) (var x var-x)) (calcFunc-select (/ (var b var-b) (var x var-x)))) (/ (+ (var a var-a) (calcFunc-select (var b var-b))) (var x var-x))) (calcFunc-assign (- (/ (var a var-a) (var x var-x)) (calcFunc-select (/ (var b var-b) (var x var-x)))) (/ (- (var a var-a) (calcFunc-select (var b var-b))) (var x var-x))) (calcFunc-assign (calcFunc-sum (/ (var a var-a) (calcFunc-select (var x var-x))) (var b var-b) (var c var-c) (var d var-d)) (/ (calcFunc-sum (calcFunc-select (var a var-a)) (var b var-b) (var c var-c) (var d var-d)) (var x var-x))) (calcFunc-assign (+ (/ (var a var-a) (calcFunc-opt (var b var-b))) (calcFunc-select (/ (var c var-c) (var d var-d)))) (/ (+ (* (calcFunc-select (var a var-a)) (var d var-d)) (* (var b var-b) (var c var-c))) (* (var b var-b) (var d var-d)))) (calcFunc-assign (- (/ (var a var-a) (calcFunc-opt (var b var-b))) (calcFunc-select (/ (var c var-c) (var d var-d)))) (/ (- (* (calcFunc-select (var a var-a)) (var d var-d)) (* (var b var-b) (var c var-c))) (* (var b var-b) (var d var-d)))) (calcFunc-assign (* (^ (var x var-x) (calcFunc-opt (var a var-a))) (calcFunc-select (^ (var x var-x) (var b var-b)))) (^ (var x var-x) (+ (var a var-a) (calcFunc-select (var b var-b))))) (calcFunc-assign (/ (^ (var x var-x) (calcFunc-opt (var a var-a))) (calcFunc-select (^ (var x var-x) (var b var-b)))) (^ (var x var-x) (- (var a var-a) (calcFunc-select (var b var-b))))) (calcFunc-assign (/ (calcFunc-select (^ (var x var-x) (var a var-a))) (^ (var x var-x) (calcFunc-opt (var b var-b)))) (^ (var x var-x) (- (calcFunc-select (var a var-a)) (var b var-b)))) (calcFunc-assign (calcFunc-prod (^ (calcFunc-select (var x var-x)) (var a var-a)) (var b var-b) (var c var-c) (var d var-d)) (^ (var x var-x) (calcFunc-sum (calcFunc-select (var a var-a)) (var b var-b) (var c var-c) (var d var-d)))) (calcFunc-assign (/ (calcFunc-select (^ (var x var-x) (var a var-a))) (^ (var x var-x) (calcFunc-opt (var b var-b)))) (^ (var x var-x) (- (calcFunc-select (var a var-a)) (var b var-b)))) (calcFunc-assign (* (^ (var a var-a) (var x var-x)) (calcFunc-select (^ (var b var-b) (var x var-x)))) (calcFunc-select (^ (* (var a var-a) (var b var-b)) (var x var-x)))) (calcFunc-assign (/ (^ (var a var-a) (var x var-x)) (calcFunc-select (^ (var b var-b) (var x var-x)))) (calcFunc-select (^ (/ (var b var-b) (var b var-b)) (var x var-x)))) (calcFunc-assign (/ (calcFunc-select (^ (var a var-a) (var x var-x))) (^ (var b var-b) (var x var-x))) (calcFunc-select (^ (/ (var a var-a) (var b var-b)) (var x var-x)))) (calcFunc-assign (calcFunc-prod (^ (var a var-a) (calcFunc-select (var x var-x))) (var b var-b) (var c var-c) (var d var-d)) (calcFunc-select (^ (calcFunc-prod (var a var-a) (var b var-b) (var c var-c) (var d var-d)) (var x var-x)))) (calcFunc-assign (* (^ (var a var-a) (var x var-x)) (calcFunc-select (^ (var b var-b) (var y var-y)))) (calcFunc-select (^ (* (var a var-a) (^ (var b var-b) (- (var y var-y) (var x var-x)))) (var x var-x)))) (calcFunc-assign (/ (^ (var a var-a) (var x var-x)) (calcFunc-select (^ (var b var-b) (var y var-y)))) (calcFunc-select (^ (/ (var b var-b) (^ (var b var-b) (- (var y var-y) (var x var-x)))) (var x var-x)))) (calcFunc-assign (/ (calcFunc-select (^ (var a var-a) (var x var-x))) (^ (var b var-b) (var y var-y))) (calcFunc-select (^ (/ (var a var-a) (^ (var b var-b) (- (var y var-y) (var x var-x)))) (var x var-x)))) (calcFunc-assign (^ (calcFunc-select (^ (var x var-x) (var a var-a))) (var b var-b)) (^ (var x var-x) (calcFunc-select (* (var a var-a) (var b var-b))))) (calcFunc-assign (^ (^ (var x var-x) (var a var-a)) (calcFunc-select (var b var-b))) (^ (var x var-x) (calcFunc-select (* (var a var-a) (var b var-b))))) (calcFunc-assign (^ (calcFunc-select (calcFunc-sqrt (var a var-a))) (var b var-b)) (calcFunc-select (^ (var a var-a) (/ (var b var-b) 2)))) (calcFunc-assign (^ (calcFunc-sqrt (var a var-a)) (calcFunc-select (var b var-b))) (calcFunc-select (^ (var a var-a) (/ (var b var-b) 2)))) (calcFunc-assign (calcFunc-sqrt (^ (calcFunc-select (var a var-a)) (var b var-b))) (calcFunc-select (^ (var a var-a) (/ (var b var-b) 2)))) (calcFunc-assign (calcFunc-sqrt (^ (var a var-a) (calcFunc-select (var b var-b)))) (calcFunc-select (^ (var a var-a) (/ (var b var-b) 2)))) (calcFunc-assign (* (calcFunc-sqrt (var a var-a)) (calcFunc-select (calcFunc-sqrt (var b var-b)))) (calcFunc-select (calcFunc-sqrt (* (var a var-a) (var b var-b))))) (calcFunc-assign (/ (calcFunc-sqrt (var a var-a)) (calcFunc-select (calcFunc-sqrt (var b var-b)))) (calcFunc-select (calcFunc-sqrt (/ (var a var-a) (var b var-b))))) (calcFunc-assign (/ (calcFunc-select (calcFunc-sqrt (var a var-a))) (calcFunc-sqrt (var b var-b))) (calcFunc-select (calcFunc-sqrt (/ (var a var-a) (var b var-b))))) (calcFunc-assign (calcFunc-prod (calcFunc-select (calcFunc-sqrt (var a var-a))) (var b var-b) (var c var-c) (var d var-d)) (calcFunc-select (calcFunc-sqrt (calcFunc-prod (var a var-a) (var b var-b) (var c var-c) (var d var-d))))) (calcFunc-assign (* (calcFunc-exp (var a var-a)) (calcFunc-select (calcFunc-exp (var b var-b)))) (calcFunc-select (calcFunc-exp (+ (var a var-a) (var b var-b))))) (calcFunc-assign (/ (calcFunc-exp (var a var-a)) (calcFunc-select (calcFunc-exp (var b var-b)))) (calcFunc-select (calcFunc-exp (- (var a var-a) (var b var-b))))) (calcFunc-assign (/ (calcFunc-select (calcFunc-exp (var a var-a))) (calcFunc-exp (var b var-b))) (calcFunc-select (calcFunc-exp (- (var a var-a) (var b var-b))))) (calcFunc-assign (calcFunc-prod (calcFunc-select (calcFunc-exp (var a var-a))) (var b var-b) (var c var-c) (var d var-d)) (calcFunc-select (calcFunc-exp (calcFunc-sum (var a var-a) (var b var-b) (var c var-c) (var d var-d))))) (calcFunc-assign (^ (calcFunc-select (calcFunc-exp (var a var-a))) (var b var-b)) (calcFunc-select (calcFunc-exp (* (var a var-a) (var b var-b))))) (calcFunc-assign (^ (calcFunc-exp (var a var-a)) (calcFunc-select (var b var-b))) (calcFunc-select (calcFunc-exp (* (var a var-a) (var b var-b))))) (calcFunc-assign (+ (calcFunc-ln (var a var-a)) (calcFunc-select (calcFunc-ln (var b var-b)))) (calcFunc-select (calcFunc-ln (* (var a var-a) (var b var-b))))) (calcFunc-assign (- (calcFunc-ln (var a var-a)) (calcFunc-select (calcFunc-ln (var b var-b)))) (calcFunc-select (calcFunc-ln (/ (var a var-a) (var b var-b))))) (calcFunc-assign (- (calcFunc-select (calcFunc-ln (var a var-a))) (calcFunc-ln (var b var-b))) (calcFunc-select (calcFunc-ln (/ (var a var-a) (var b var-b))))) (calcFunc-assign (calcFunc-sum (calcFunc-select (calcFunc-ln (var a var-a))) (var b var-b) (var c var-c) (var d var-d)) (calcFunc-select (calcFunc-ln (calcFunc-prod (var a var-a) (var b var-b) (var c var-c) (var d var-d))))) (calcFunc-assign (* (var b var-b) (calcFunc-select (calcFunc-ln (var a var-a)))) (calcFunc-select (calcFunc-ln (^ (var a var-a) (var b var-b))))) (calcFunc-assign (* (calcFunc-select (var b var-b)) (calcFunc-ln (var a var-a))) (calcFunc-select (calcFunc-ln (^ (var a var-a) (var b var-b))))) (calcFunc-assign (/ (calcFunc-select (calcFunc-ln (var a var-a))) (calcFunc-ln (var b var-b))) (calcFunc-select (calcFunc-log (var a var-a) (var b var-b)))) (calcFunc-assign (/ (calcFunc-ln (var a var-a)) (calcFunc-select (calcFunc-ln (var b var-b)))) (calcFunc-select (calcFunc-log (var a var-a) (var b var-b)))) (calcFunc-assign (/ (calcFunc-select (calcFunc-ln (var a var-a))) (var b var-b)) (calcFunc-select (calcFunc-ln (^ (var a var-a) (/ 1 (var b var-b)))))) (calcFunc-assign (/ (calcFunc-ln (var a var-a)) (calcFunc-select (var b var-b))) (calcFunc-select (calcFunc-ln (^ (var a var-a) (/ 1 (var b var-b)))))) (calcFunc-assign (+ (calcFunc-log10 (var a var-a)) (calcFunc-select (calcFunc-log10 (var b var-b)))) (calcFunc-select (calcFunc-log10 (* (var a var-a) (var b var-b))))) (calcFunc-assign (- (calcFunc-log10 (var a var-a)) (calcFunc-select (calcFunc-log10 (var b var-b)))) (calcFunc-select (calcFunc-log10 (/ (var a var-a) (var b var-b))))) (calcFunc-assign (- (calcFunc-select (calcFunc-log10 (var a var-a))) (calcFunc-log10 (var b var-b))) (calcFunc-select (calcFunc-log10 (/ (var a var-a) (var b var-b))))) (calcFunc-assign (calcFunc-sum (calcFunc-select (calcFunc-log10 (var a var-a))) (var b var-b) (var c var-c) (var d var-d)) (calcFunc-select (calcFunc-log10 (calcFunc-prod (var a var-a) (var b var-b) (var c var-c) (var d var-d))))) (calcFunc-assign (* (var b var-b) (calcFunc-select (calcFunc-log10 (var a var-a)))) (calcFunc-select (calcFunc-log10 (^ (var a var-a) (var b var-b))))) (calcFunc-assign (* (calcFunc-select (var b var-b)) (calcFunc-log10 (var a var-a))) (calcFunc-select (calcFunc-log10 (^ (var a var-a) (var b var-b))))) (calcFunc-assign (/ (calcFunc-select (calcFunc-log10 (var a var-a))) (calcFunc-log10 (var b var-b))) (calcFunc-select (calcFunc-log (var a var-a) (var b var-b)))) (calcFunc-assign (/ (calcFunc-log10 (var a var-a)) (calcFunc-select (calcFunc-log10 (var b var-b)))) (calcFunc-select (calcFunc-log (var a var-a) (var b var-b)))) (calcFunc-assign (/ (calcFunc-select (calcFunc-log10 (var a var-a))) (var b var-b)) (calcFunc-select (calcFunc-log10 (^ (var a var-a) (/ 1 (var b var-b)))))) (calcFunc-assign (/ (calcFunc-log10 (var a var-a)) (calcFunc-select (var b var-b))) (calcFunc-select (calcFunc-log10 (^ (var a var-a) (/ 1 (var b var-b)))))) (calcFunc-assign (+ (calcFunc-log (var a var-a) (var x var-x)) (calcFunc-select (calcFunc-log (var b var-b) (var x var-x)))) (calcFunc-select (calcFunc-log (* (var a var-a) (var b var-b)) (var x var-x)))) (calcFunc-assign (- (calcFunc-log (var a var-a) (var x var-x)) (calcFunc-select (calcFunc-log (var b var-b) (var x var-x)))) (calcFunc-select (calcFunc-log (/ (var a var-a) (var b var-b)) (var x var-x)))) (calcFunc-assign (- (calcFunc-select (calcFunc-log (var a var-a) (var x var-x))) (calcFunc-log (var b var-b) (var x var-x))) (calcFunc-select (calcFunc-log (/ (var a var-a) (var b var-b)) (var x var-x)))) (calcFunc-assign (calcFunc-sum (calcFunc-select (calcFunc-log (var a var-a) (var x var-x))) (var b var-b) (var c var-c) (var d var-d)) (calcFunc-select (calcFunc-log (calcFunc-prod (var a var-a) (var b var-b) (var c var-c) (var d var-d)) (var x var-x)))) (calcFunc-assign (* (var b var-b) (calcFunc-select (calcFunc-log (var a var-a) (var x var-x)))) (calcFunc-select (calcFunc-log (^ (var a var-a) (var b var-b)) (var x var-x)))) (calcFunc-assign (* (calcFunc-select (var b var-b)) (calcFunc-log (var a var-a) (var x var-x))) (calcFunc-select (calcFunc-log (^ (var a var-a) (var b var-b)) (var x var-x)))) (calcFunc-assign (/ (calcFunc-select (calcFunc-log (var a var-a) (var x var-x))) (calcFunc-log (var b var-b) (var x var-x))) (calcFunc-select (calcFunc-log (var a var-a) (var b var-b)))) (calcFunc-assign (/ (calcFunc-log (var a var-a) (var x var-x)) (calcFunc-select (calcFunc-log (var b var-b) (var x var-x)))) (calcFunc-select (calcFunc-log (var a var-a) (var b var-b)))) (calcFunc-assign (/ (calcFunc-select (calcFunc-log (var a var-a) (var x var-x))) (var b var-b)) (calcFunc-select (calcFunc-log (^ (var a var-a) (/ 1 (var b var-b))) (var x var-x)))) (calcFunc-assign (/ (calcFunc-log (var a var-a) (var x var-x)) (calcFunc-select (var b var-b))) (calcFunc-select (calcFunc-log (^ (var a var-a) (/ 1 (var b var-b))) (var x var-x)))) (calcFunc-assign (calcFunc-lor (calcFunc-select (calcFunc-land (var x var-x) (var a var-a))) (calcFunc-land (var x var-x) (calcFunc-opt (var b var-b)))) (calcFunc-land (var x var-x) (calcFunc-lor (calcFunc-select (var a var-a)) (var b var-b))))))

(defun calc-NegateRules () '(vec (calcFunc-iterations 1) (calcFunc-assign (+ (var a var-a) (calcFunc-select (var x var-x))) (- (var a var-a) (calcFunc-select (neg (var x var-x))))) (calcFunc-assign (- (var a var-a) (calcFunc-select (var x var-x))) (+ (var a var-a) (calcFunc-select (neg (var x var-x))))) (calcFunc-assign (calcFunc-sum (calcFunc-select (var x var-x)) (var b var-b) (var c var-c) (var d var-d)) (neg (calcFunc-sum (calcFunc-select (neg (var x var-x))) (var b var-b) (var c var-c) (var d var-d)))) (calcFunc-assign (* (var a var-a) (calcFunc-select (var x var-x))) (* (neg (var a var-a)) (calcFunc-select (neg (var x var-x))))) (calcFunc-assign (/ (var a var-a) (calcFunc-select (var x var-x))) (/ (neg (var a var-a)) (calcFunc-select (neg (var x var-x))))) (calcFunc-assign (/ (calcFunc-select (var x var-x)) (var a var-a)) (/ (neg (calcFunc-select (neg (var x var-x)))) (var a var-a))) (calcFunc-assign (calcFunc-prod (calcFunc-select (var x var-x)) (var b var-b) (var c var-c) (var d var-d)) (* (^ -1 (+ (- (var d var-d) (var c var-c)) 1)) (calcFunc-prod (calcFunc-select (neg (var x var-x))) (var b var-b) (var c var-c) (var d var-d)))) (calcFunc-condition (calcFunc-condition (calcFunc-assign (^ (calcFunc-select (var x var-x)) (var n var-n)) (^ (calcFunc-select (neg (var x var-x))) (var a var-a))) (calcFunc-integer (var n var-n))) (calcFunc-eq (% (var n var-n) 2) 0)) (calcFunc-condition (calcFunc-condition (calcFunc-assign (^ (calcFunc-select (var x var-x)) (var n var-n)) (neg (^ (calcFunc-select (neg (var x var-x))) (var a var-a)))) (calcFunc-integer (var n var-n))) (calcFunc-eq (% (var n var-n) 2) 1)) (calcFunc-assign (^ (calcFunc-select (var x var-x)) (var a var-a)) (^ (neg (calcFunc-select (neg (var x var-x)))) (var a var-a))) (calcFunc-assign (^ (var a var-a) (calcFunc-select (var x var-x))) (^ (/ 1 (var a var-a)) (calcFunc-select (neg (var x var-x))))) (calcFunc-assign (calcFunc-abs (calcFunc-select (var x var-x))) (calcFunc-abs (calcFunc-select (neg (var x var-x))))) (calcFunc-assign (* (var i var-i) (calcFunc-sqrt (calcFunc-select (var x var-x)))) (neg (calcFunc-sqrt (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-sqrt (calcFunc-select (var x var-x))) (* (var i var-i) (calcFunc-sqrt (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-re (calcFunc-select (var x var-x))) (neg (calcFunc-re (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-im (calcFunc-select (var x var-x))) (neg (calcFunc-im (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-conj (calcFunc-select (var x var-x))) (neg (calcFunc-conj (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-trunc (calcFunc-select (var x var-x))) (neg (calcFunc-trunc (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-round (calcFunc-select (var x var-x))) (neg (calcFunc-round (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-floor (calcFunc-select (var x var-x))) (neg (calcFunc-ceil (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-ceil (calcFunc-select (var x var-x))) (neg (calcFunc-floor (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-ftrunc (calcFunc-select (var x var-x))) (neg (calcFunc-ftrunc (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-fround (calcFunc-select (var x var-x))) (neg (calcFunc-fround (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-ffloor (calcFunc-select (var x var-x))) (neg (calcFunc-fceil (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-fceil (calcFunc-select (var x var-x))) (neg (calcFunc-ffloor (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-exp (calcFunc-select (var x var-x))) (/ 1 (calcFunc-exp (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-sin (calcFunc-select (var x var-x))) (neg (calcFunc-sin (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-cos (calcFunc-select (var x var-x))) (calcFunc-cos (calcFunc-select (neg (var x var-x))))) (calcFunc-assign (calcFunc-tan (calcFunc-select (var x var-x))) (neg (calcFunc-tan (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-arcsin (calcFunc-select (var x var-x))) (neg (calcFunc-arcsin (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-arccos (calcFunc-select (var x var-x))) (- (* 4 (calcFunc-arctan 1)) (calcFunc-arccos (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-arctan (calcFunc-select (var x var-x))) (neg (calcFunc-arctan (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-sinh (calcFunc-select (var x var-x))) (neg (calcFunc-sinh (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-cosh (calcFunc-select (var x var-x))) (calcFunc-cosh (calcFunc-select (neg (var x var-x))))) (calcFunc-assign (calcFunc-tanh (calcFunc-select (var x var-x))) (neg (calcFunc-tanh (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-arcsinh (calcFunc-select (var x var-x))) (neg (calcFunc-arcsinh (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-arctanh (calcFunc-select (var x var-x))) (neg (calcFunc-arctanh (calcFunc-select (neg (var x var-x)))))) (calcFunc-assign (calcFunc-eq (calcFunc-select (var x var-x)) (var a var-a)) (calcFunc-eq (calcFunc-select (neg (var x var-x))) (neg (var a var-a)))) (calcFunc-assign (calcFunc-neq (calcFunc-select (var x var-x)) (var a var-a)) (calcFunc-neq (calcFunc-select (neg (var x var-x))) (neg (var a var-a)))) (calcFunc-assign (calcFunc-lt (calcFunc-select (var x var-x)) (var a var-a)) (calcFunc-gt (calcFunc-select (neg (var x var-x))) (neg (var a var-a)))) (calcFunc-assign (calcFunc-gt (calcFunc-select (var x var-x)) (var a var-a)) (calcFunc-lt (calcFunc-select (neg (var x var-x))) (neg (var a var-a)))) (calcFunc-assign (calcFunc-leq (calcFunc-select (var x var-x)) (var a var-a)) (calcFunc-geq (calcFunc-select (neg (var x var-x))) (neg (var a var-a)))) (calcFunc-assign (calcFunc-geq (calcFunc-select (var x var-x)) (var a var-a)) (calcFunc-leq (calcFunc-select (neg (var x var-x))) (neg (var a var-a)))) (calcFunc-assign (calcFunc-lt (var a var-a) (calcFunc-select (var x var-x))) (calcFunc-gt (neg (var a var-a)) (calcFunc-select (neg (var x var-x))))) (calcFunc-assign (calcFunc-gt (var a var-a) (calcFunc-select (var x var-x))) (calcFunc-lt (neg (var a var-a)) (calcFunc-select (neg (var x var-x))))) (calcFunc-assign (calcFunc-leq (var a var-a) (calcFunc-select (var x var-x))) (calcFunc-geq (neg (var a var-a)) (calcFunc-select (neg (var x var-x))))) (calcFunc-assign (calcFunc-geq (var a var-a) (calcFunc-select (var x var-x))) (calcFunc-leq (neg (var a var-a)) (calcFunc-select (neg (var x var-x))))) (calcFunc-assign (calcFunc-select (var x var-x)) (neg (calcFunc-select (neg (var x var-x)))))))
