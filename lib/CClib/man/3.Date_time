


     DDDDAAAATTTTEEEE____TTTTIIIIMMMMEEEE((((3333CCCC++++++++))))               CCCCCCCClllliiiibbbb               DDDDAAAATTTTEEEE____TTTTIIIIMMMMEEEE((((3333CCCC++++++++))))



     NNNNAAAAMMMMEEEE
          Date_time - a date and time class

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          ####iiiinnnncccclllluuuuddddeeee """"DDDDaaaatttteeee____ttttiiiimmmmeeee....hhhh""""
          ccccllllaaaassssssss DDDDaaaatttteeee____ttttiiiimmmmeeee :::: ppppuuuubbbblllliiiicccc EEEErrrrrrrroooorrrr____bbbbuuuuffff {{{{
          ppppuuuubbbblllliiiicccc::::
               /* _c_o_n_s_t_r_u_c_t_o_r_s */
               DDDDaaaatttteeee____ttttiiiimmmmeeee((((SSSSttttrrrriiiinnnngggg&&&& ddddaaaatttteeee,,,, SSSSttttrrrriiiinnnngggg&&&& ttttiiiimmmmeeee))));;;;
               DDDDaaaatttteeee____ttttiiiimmmmeeee((((lllloooonnnngggg sssseeeeccccssss____1111999977770000))));;;;
               DDDDaaaatttteeee____ttttiiiimmmmeeee((((DDDDaaaatttteeee____ttttiiiimmmmeeee&&&& ddddtttt))));;;;
               DDDDaaaatttteeee____ttttiiiimmmmeeee(((())));;;;
               /* _a_s_s_i_g_n_m_e_n_t */
               DDDDaaaatttteeee____ttttiiiimmmmeeee&&&& ooooppppeeeerrrraaaattttoooorrrr====((((DDDDaaaatttteeee____ttttiiiimmmmeeee&&&& ddddtttt))));;;;
               /* _D_a_t_e__t_i_m_e _f_u_n_c_t_i_o_n_s */
               iiiinnnntttt ggggeeeetttt____mmmmoooo(((())));;;;
               iiiinnnntttt ggggeeeetttt____ddddaaaayyyy(((())));;;;
               iiiinnnntttt ggggeeeetttt____yyyyrrrr(((())));;;;
               iiiinnnntttt ggggeeeetttt____hhhhrrrr(((())));;;;
               iiiinnnntttt ggggeeeetttt____mmmmiiiinnnn(((())));;;;
               iiiinnnntttt ggggeeeetttt____sssseeeecccc(((())));;;;
               cccchhhhaaaarrrr**** ggggeeeetttt____mmmmoooossss(((())));;;;
               cccchhhhaaaarrrr**** ggggeeeetttt____ddddaaaayyyy____ooooffff____wwwweeeeeeeekkkk(((())));;;;
               lllloooonnnngggg ggggeeeetttt____sssseeeeccccssss1111999977770000(((())));;;;
               DDDDaaaatttteeee____ttttiiiimmmmeeee ooooffffffffsssseeeetttt((((iiiinnnntttt ddddaaaayyyyssss====0000,,,, iiiinnnntttt hhhhoooouuuurrrrssss====0000,,,, mmmmiiiinnnnssss====0000,,,, sssseeeeccccssss====0000))));;;;
                /* _o_p_e_r_a_t_o_r_s */
               ffffrrrriiiieeeennnndddd oooossssttttrrrreeeeaaaammmm&&&& ooooppppeeeerrrraaaattttoooorrrr<<<<<<<<((((oooossssttttrrrreeeeaaaammmm&&&&,,,, DDDDaaaatttteeee____ttttiiiimmmmeeee&&&&))));;;;
               iiiinnnntttt ooooppppeeeerrrraaaattttoooorrrr========((((DDDDaaaatttteeee____ttttiiiimmmmeeee&&&&))));;;;
               iiiinnnntttt ooooppppeeeerrrraaaattttoooorrrr!!!!====((((DDDDaaaatttteeee____ttttiiiimmmmeeee&&&&))));;;;
               iiiinnnntttt ooooppppeeeerrrraaaattttoooorrrr<<<<((((DDDDaaaatttteeee____ttttiiiimmmmeeee&&&&))));;;;
               iiiinnnntttt ooooppppeeeerrrraaaattttoooorrrr<<<<====((((DDDDaaaatttteeee____ttttiiiimmmmeeee&&&&))));;;;
               iiiinnnntttt ooooppppeeeerrrraaaattttoooorrrr>>>>((((DDDDaaaatttteeee____ttttiiiimmmmeeee&&&&))));;;;
               iiiinnnntttt ooooppppeeeerrrraaaattttoooorrrr>>>>====((((DDDDaaaatttteeee____ttttiiiimmmmeeee&&&&))));;;;
          }}}};;;;

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          Date_time is a fairly rudimentary class for date and time
          manipulation, in the sense that input specifications for
          constructors are limited, it can not represent a date
          earlier than 1970, and no output formatting functions are
          provided.  However, with so many formatting possibilities,
          it is best done by the class user anyway, and can easily be
          facilitated with this class.  Its strong points are date
          offsets (adding or subtracting time from a Date_time
          object), and Date_time comparisons.

          DDDDaaaatttteeee____ttttiiiimmmmeeee((((SSSSttttrrrriiiinnnngggg&&&& ddddaaaatttteeee,,,, SSSSttttrrrriiiinnnngggg&&&& ttttiiiimmmmeeee)))) is a constructor
          taking two String& arguments, ddddaaaatttteeee in MM-DD-YY format and
          ttttiiiimmmmeeee in HH:MM:SS format.  The characters '-' and ':' are not
          checked, so other separators are allowed. Otherwise, the
          syntax is rigid (use '09', not '9', for example).




     Page 1                                          (printed 11/9/90)






     DDDDAAAATTTTEEEE____TTTTIIIIMMMMEEEE((((3333CCCC++++++++))))               CCCCCCCClllliiiibbbb               DDDDAAAATTTTEEEE____TTTTIIIIMMMMEEEE((((3333CCCC++++++++))))



          DDDDaaaatttteeee____ttttiiiimmmmeeee((((lllloooonnnngggg sssseeeeccccssss____1111999977770000)))) is a constructor taking one
          argument, sssseeeeccccssss____1111999977770000,,,, which represents the number of seconds
          elapsed since 00:00:00 GMT, January 1, 1970.

          DDDDaaaatttteeee____ttttiiiimmmmeeee((((DDDDaaaatttteeee____ttttiiiimmmmeeee&&&& ddddtttt)))) constructs an object from the
          existing Date_time object ddddtttt....

          DDDDaaaatttteeee____ttttiiiimmmmeeee(((()))) constructs an object representing the current
          date and time.

          If the constructors create a Date_time object successfully,
          the Error_buf public variable ssssttttaaaatttteeee will be set to ____SSSSUUUUCCCCCCCCEEEESSSSSSSS,,,,
          else ____FFFFAAAAIIIILLLL.... If ssssttttaaaatttteeee is ____FFFFAAAAIIIILLLL,,,, the Error_buf member function
          bbbbuuuuffffvvvvaaaalllluuuueeee can be used to return an explanation of the
          failure.

          Functions ggggeeeetttt____mmmmoooo,,,, ggggeeeetttt____ddddaaaayyyy,,,, ggggeeeetttt____yyyyrrrr,,,, ggggeeeetttt____hhhhrrrr,,,, ggggeeeetttt____mmmmiiiinnnn,,,, and
          ggggeeeetttt____sssseeeecccc return int values of the object's month (1-12), day
          (1-31), year (0-99), hour (0-23), minute (0-59), and second
          (0-59), respectively.

          Functions ggggeeeetttt____mmmmoooossss and ggggeeeetttt____ddddaaaayyyy____ooooffff____wwwweeeeeeeekkkk return a char* of
          length three(3) in a form like "Sep" and "Mon".

          Function ggggeeeetttt____sssseeeeccccssss1111999977770000 returns a long integer representing
          the number of seconds elapsed between 00:00:00 GMT, January
          1, 1970 and the object's date and time.

          Function ooooffffffffsssseeeetttt((((iiiinnnntttt ddddaaaayyyyssss,,,, iiiinnnntttt hhhhoooouuuurrrrssss,,,, iiiinnnntttt mmmmiiiinnnnssss,,,, iiiinnnntttt sssseeeeccccssss))))
          returns a new Date_time object obtained from adding days,
          hours, minutes, and seconds, represented by ddddaaaayyyyssss,,,, hhhhoooouuuurrrrssss,,,,
          mmmmiiiinnnnssss,,,, and sssseeeeccccssss,,,, to the implicit Date_time object.  The
          effect of a _n_e_g_a_t_i_v_e argument is _n_e_g_a_t_i_v_e _t_i_m_e, so if dt is
          a Date_time object representing today's date at 12:00:00,
          dt.offset(-1,0,5) returns yesterday's date at 12:05:00.
          Trailing arguments need not be specified because default
          arguments are provided.

          The ostream operator << calls ggggeeeetttt____mmmmoooo,,,, ggggeeeetttt____ddddaaaayyyy,,,, ggggeeeetttt____yyyyrrrr,,,,
          ggggeeeetttt____hhhhrrrr,,,, ggggeeeetttt____mmmmiiiinnnn,,,, ggggeeeetttt____mmmmoooossss,,,, ggggeeeetttt____ddddaaaayyyy____ooooffff____wwwweeeeeeeekkkk,,,, and ggggeeeetttt____sssseeeeccccssss1111999977770000
          and writes their return values to the output stream.  It is
          not intended for formatting but proves useful in debugging.

          Some relational operators are also defined.  The relational
          operators return _z_e_r_o if the relation is _f_a_l_s_e, and a _n_o_n-
          _z_e_r_o value if the relation is _t_r_u_e.

     EEEEXXXXAAAAMMMMPPPPLLLLEEEESSSS
          The following is an example of how Date_time might be used
          in a program:

                #include "Date_time.h"



     Page 2                                          (printed 11/9/90)






     DDDDAAAATTTTEEEE____TTTTIIIIMMMMEEEE((((3333CCCC++++++++))))               CCCCCCCClllliiiibbbb               DDDDAAAATTTTEEEE____TTTTIIIIMMMMEEEE((((3333CCCC++++++++))))



                main()
                {
                    Date_time d1("12/28/86","23:08:26");
                    if (d1.state == _FAIL) {
                        cout << "d1 failed: " << d1.bufvalue();
                    }
                    else {
                        cout << "Date d1 is \n" << d1;
                    }
                    Date_time d2;
                    Date_time d3 = d2.offset(60);  // 60 days in future
                    if (d3 < d2) { /*...*/ }  // it's not
                    cout << "day of week is " << d2.get_day_of_week() << "\n";
                }


     FFFFIIIILLLLEEEESSSS
          Date_time.h

          Date_time.c

          Error_buf.h

          Error_buf.c

     BBBBUUUUGGGGSSSS
          Date_time objects can not represent a date earlier than
          1970.

     DDDDIIIIAAAAGGGGNNNNOOOOSSSSTTTTIIIICCCCSSSS
          Date_time errors are detected by its constructors when
          passed invalid input.  When this happens, the Error_buf
          public variable ssssttttaaaatttteeee will be set to ____FFFFAAAAIIIILLLL,,,, and the
          Error_buf member function bbbbuuuuffffvvvvaaaalllluuuueeee can be used to return an
          explanation of the failure.

     CCCCAAAAVVVVEEEEAAAATTTTSSSS
          Error_buf should probably not be a base class but rather a
          public member of Date_time.  This may change in future
          releases.

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          Error_buf class

          String class










     Page 3                                          (printed 11/9/90)



