


     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



     NNNNAAAAMMMMEEEE
          digraph - directed graph toolkit


     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          #include <universe.h>

          #include <node.h>

          #include <edge.h>


        PPPPuuuubbbblllliiiicccc DDDDaaaattttaaaa::::
          None.


        CCCCoooonnnnssssttttrrrruuuuccccttttoooorrrrssss::::
          uuuunnnniiiivvvveeeerrrrsssseeee((((ccccoooonnnnsssstttt cccchhhhaaaarrrr ****uuuunnnn____nnnnaaaammmmeeee))));;;;
          nnnnooooddddeeee((((cccchhhhaaaarrrr ****nnnnooooddddeeee____nnnnaaaammmmeeee,,,, uuuunnnniiiivvvveeeerrrrsssseeee ****mmmmyyyy____uuuunnnniiiivvvveeeerrrrsssseeee))));;;;



        UUUUnnnniiiivvvveeeerrrrsssseeee FFFFuuuunnnnccccttttiiiioooonnnnssss
          _O_p_e_r_a_t_i_o_n_s

          nnnnooooddddeeee ****nnnnooooddddeeee____ffffrrrroooommmm____nnnnaaaammmmeeee((((ccccoooonnnnsssstttt cccchhhhaaaarrrr ****nnnnooooddddeeee____nnnnaaaammmmeeee))));;;;

          cccchhhhaaaarrrr ****ggggeeeetttt____nnnnaaaammmmeeee(((())));;;;

          _C_r_e_a_t_i_o_n

          nnnnooooddddeeee ****ccccaaaapppp((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, eeeeddddggggeeee ****nnnneeeeddddggggeeee,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222,,,,vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          nnnnooooddddeeee ****cccciiiipppp((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, eeeeddddggggeeee ****nnnneeeeddddggggeeee,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222,,,,vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          nnnnooooddddeeee ****ccccoooopppp((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, eeeeddddggggeeee ****nnnneeeeddddggggeeee,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222,,,,vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          _D_e_s_t_r_u_c_t_i_o_n

          iiiinnnntttt dddduuuunnnn((((nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          iiiinnnntttt ddddiiiinnnn((((nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          iiiinnnntttt ddddoooonnnn((((nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          iiiinnnntttt ddddaaaannnn((((nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          iiiinnnntttt ddddiiiinnnngggg((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;


                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 1                                          (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



          iiiinnnntttt ddddoooonnnngggg((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          iiiinnnntttt ddddaaaannnngggg((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          iiiinnnntttt ddddiiiigggg((((nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          iiiinnnntttt ddddoooogggg((((nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          iiiinnnntttt ddddaaaagggg((((nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          iiiinnnntttt ddddiiiigggggggg((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          iiiinnnntttt ddddoooogggggggg((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          iiiinnnntttt ddddaaaagggggggg((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          iiiinnnntttt ddddiiiiggggnnnn((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          iiiinnnntttt ddddooooggggnnnn((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          iiiinnnntttt ddddaaaaggggnnnn((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          vvvvooooiiiidddd dddduuuugggg((((eeeeddddggggeeee ****ddddeeeellll____eeeeddddggggeeee))));;;;

          _E_x_i_s_t_e_n_c_e

          iiiinnnntttt xxxxuuuunnnn((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          iiiinnnntttt xxxxiiiipppp((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          iiiinnnntttt xxxxoooopppp((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          iiiinnnntttt xxxxaaaapppp((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          _S_e_t _R_e_t_r_i_e_v_a_l

          sssslllllllliiiisssstttt ****ssssssssuuuunnnn(((())));;;;

          sssslllllllliiiisssstttt ****ssssaaaannnn((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          sssslllllllliiiisssstttt ****ssssiiiinnnn((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          sssslllllllliiiisssstttt ****ssssoooonnnn((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          sssslllllllliiiisssstttt ****ssssiiiinnnngggg((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          sssslllllllliiiisssstttt ****ssssoooonnnngggg((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          sssslllllllliiiisssstttt ****ssssaaaannnngggg((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 2                                          (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



          sssslllllllliiiisssstttt ****ssssiiiipppp((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          sssslllllllliiiisssstttt ****ssssoooopppp((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          sssslllllllliiiisssstttt ****ssssaaaapppp((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          iiiinnnntttt____sssslllllllliiiisssstttt ****ssssiiiigggg((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          iiiinnnntttt____sssslllllllliiiisssstttt ****ssssoooogggg((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          iiiinnnntttt____sssslllllllliiiisssstttt ****ssssaaaagggg((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          iiiinnnntttt____sssslllllllliiiisssstttt ****ssssiiiiggggnnnn((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          iiiinnnntttt____sssslllllllliiiisssstttt ****ssssooooggggnnnn((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          iiiinnnntttt____sssslllllllliiiisssstttt ****ssssaaaaggggnnnn((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          BBBBiiiinnnnddddiiiinnnngggg

          vvvvooooiiiidddd bbbbuuuussss((((vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          vvvvooooiiiidddd bbbbuuuunnnn((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          vvvvooooiiiidddd ****vvvvuuuussss(((())));;;;

          vvvvooooiiiidddd ****vvvvuuuunnnn((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111))));;;;

          nnnnooooddddeeee ****bbbbiiiipppp((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222,,,, vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          nnnnooooddddeeee ****bbbboooopppp((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222,,,, vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          nnnnooooddddeeee ****bbbbaaaapppp((((nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222,,,, vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          vvvvooooiiiidddd ****vvvviiiipppp((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          vvvvooooiiiidddd ****vvvvoooopppp((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee1111,,,, ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;




        NNNNooooddddeeee FFFFuuuunnnnccccttttiiiioooonnnnssss::::
          _O_p_e_r_a_t_i_o_n_s

          cccchhhhaaaarrrr ****ggggeeeetttt____nnnnaaaammmmeeee(((())));;;;

          _C_r_e_a_t_i_o_n

          nnnnooooddddeeee ****ccccaaaapppp((((eeeeddddggggeeee ****nnnneeeeddddggggeeee,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222,,,,vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 3                                          (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



          nnnnooooddddeeee ****cccciiiipppp((((eeeeddddggggeeee ****nnnneeeeddddggggeeee,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222,,,,vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          nnnnooooddddeeee ****ccccoooopppp((((eeeeddddggggeeee ****nnnneeeeddddggggeeee,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222,,,,vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          _D_e_s_t_r_u_c_t_i_o_n

          iiiinnnntttt dddduuuunnnn(((())));;;;

          iiiinnnntttt ddddiiiinnnn(((())));;;;

          iiiinnnntttt ddddoooonnnn(((())));;;;

          iiiinnnntttt ddddaaaannnn(((())));;;;

          iiiinnnntttt ddddiiiinnnngggg((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          iiiinnnntttt ddddoooonnnngggg((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          iiiinnnntttt ddddaaaannnngggg((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          iiiinnnntttt ddddiiiigggg(((())));;;;

          iiiinnnntttt ddddoooogggg(((())));;;;

          iiiinnnntttt ddddaaaagggg(((())));;;;

          iiiinnnntttt ddddiiiigggggggg((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          iiiinnnntttt ddddoooogggggggg((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          iiiinnnntttt ddddaaaagggggggg((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          iiiinnnntttt ddddiiiiggggnnnn((((nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          iiiinnnntttt ddddooooggggnnnn((((nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          iiiinnnntttt ddddaaaaggggnnnn((((nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          _E_x_i_s_t_e_n_c_e

          iiiinnnntttt xxxxiiiipppp((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          iiiinnnntttt xxxxoooopppp((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          iiiinnnntttt xxxxaaaapppp((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          _S_e_t _R_e_t_r_i_e_v_a_l

          sssslllllllliiiisssstttt ****ssssaaaannnn(((())));;;;

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 4                                          (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



          sssslllllllliiiisssstttt ****ssssiiiinnnn(((())));;;;

          sssslllllllliiiisssstttt ****ssssoooonnnn(((())));;;;

          sssslllllllliiiisssstttt ****ssssiiiinnnngggg((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          sssslllllllliiiisssstttt ****ssssoooonnnngggg((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          sssslllllllliiiisssstttt ****ssssaaaannnngggg((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee))));;;;

          sssslllllllliiiisssstttt ****ssssiiiipppp(((())));;;;

          sssslllllllliiiisssstttt ****ssssoooopppp(((())));;;;

          sssslllllllliiiisssstttt ****ssssaaaapppp(((())));;;;

          iiiinnnntttt____sssslllllllliiiisssstttt ****ssssiiiigggg(((())));;;;

          iiiinnnntttt____sssslllllllliiiisssstttt ****ssssoooogggg(((())));;;;

          iiiinnnntttt____sssslllllllliiiisssstttt ****ssssaaaagggg(((())));;;;

          iiiinnnntttt____sssslllllllliiiisssstttt ****ssssiiiiggggnnnn((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          iiiinnnntttt____sssslllllllliiiisssstttt ****ssssooooggggnnnn((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          iiiinnnntttt____sssslllllllliiiisssstttt ****ssssaaaaggggnnnn((((ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          _B_i_n_d_i_n_g

          vvvvooooiiiidddd bbbbuuuunnnn((((vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          vvvvooooiiiidddd ****vvvvuuuunnnn(((())));;;;

          nnnnooooddddeeee ****bbbbiiiipppp((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222,,,, vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          nnnnooooddddeeee ****bbbboooopppp((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222,,,, vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          nnnnooooddddeeee ****bbbbaaaapppp((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, nnnnooooddddeeee ****nnnnooooddddeeee2222,,,, vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          vvvvooooiiiidddd ****vvvviiiipppp((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;

          vvvvooooiiiidddd ****vvvvoooopppp((((ccccoooonnnnsssstttt iiiinnnntttt eeeeddddggggeeee____ttttyyyyppppeeee,,,, ccccoooonnnnsssstttt nnnnooooddddeeee ****nnnnooooddddeeee2222))));;;;


        EEEEddddggggeeee FFFFuuuunnnnccccttttiiiioooonnnnssss::::
          _O_p_e_r_a_t_i_o_n_s

          iiiinnnntttt ggggeeeetttt____ttttyyyyppppeeee(((())));;;;

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 5                                          (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



          _C_r_e_a_t_i_o_n - _e_d_g_e_s _m_u_s_t _b_e _c_r_e_a_t_e_d _t_h_r_o_u_g_h _a _u_n_i_v_e_r_s_e _o_r _a _n_o_d_e

          _D_e_s_t_r_u_c_t_i_o_n

          vvvvooooiiiidddd dddduuuugggg(((())));;;;

          _S_e_t _R_e_t_r_i_e_v_a_l - _e_d_g_e_s _m_u_s_t _b_e _r_e_t_r_i_e_v_e_d _t_h_r_o_u_g_h _a _u_n_i_v_e_r_s_e _o_r _a _n_o_d_e

          _B_i_n_d_i_n_g

          vvvvooooiiiidddd bbbbuuuugggg((((vvvvooooiiiidddd ****nnnnvvvvaaaalllluuuueeee ==== ((((vvvvooooiiiidddd ****))))0000))));;;;

          vvvvooooiiiidddd ****vvvvuuuugggg(((())));;;;

          _E_x_i_s_t_e_n_c_e - _e_d_g_e _e_x_i_s_t_e_n_c_e _i_s _d_e_t_e_r_m_i_n_e_d _t_h_r_o_u_g_h _a _u_n_i_v_e_r_s_e _o_r _a _n_o_d_e


     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          The _d_i_g_r_a_p_h library provides the toolkit for creating and
          maintaining directed graphs.  Relevant enitites are a
          universe, nodes, and edges.  Each can be named (node names
          must be unique), and bound to a value.  All nodes and edges
          must reside in a single universe.  Multiple universes may
          exist.  Nodes are placed in a universe when they are
          created.  Edges can only be created through a universe or a
          node.  If an edge is created through other means, such as
          _n_e_w _e_d_g_e, a fatal error will occur to maintain the integrity
          of the graph.

          The following sections describe the interface to this
          library.  The descriptions are grouped into the following
          sections of related functionality:
               operations

               creation

               destruction

               existence

               set retrieval

               binding operations.


          Operations contains utility functions such as retrieving a
          name from a node, or a node from a name.  These functions
          are used frequently to retrieve information about an
          enitity.

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 6                                          (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



          Creation contains the functions used to create nodes and
          edges in a graph.  The universe is created implicitly
          through a constructor when it is declared.

          Destruction contains the functions used to destroy nodes and
          edges in a graph.  The universe is destroyed either when it
          goes out of scope, or if it was created using the _n_e_w
          operator, when explicitly deleted.

          Existence contains the functions used to verify the
          existence of certain nodes or edges or combinations of
          either or both.

          Set retrieval contains the functions used to retrieve lists
          of nodes, edges, or edge types, depending on the functions
          and qualifiers used.

          Binding operations contains the functions used to bind
          values to a universe, nodes, or edges.

          It is not apparent from the function names what they will do
          so here is a few hints to follow that may help.

          - creation functions start with a c

          - destruction functions start with a d

          - set retrieval functions start with an s

          - existence functions start with an x

          - binding functions start with a b

          - value retrieval functions start with a v

          - function names ending in an n work with nodes

          - function names ending in a g work with edges

          - function names ending in a p work with edges between pairs of nodes

          - function names with an a work with adjacent nodes or edges

          - function names with an i work with inpointing nodes or edges

          - funciton names with an o work with outpointing nodes or edges

          - function names with a u work with unqualified nodes


                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 7                                          (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



          The naming conventions used in the LISP implementation were
          used in the C++ implementation.


        CCCCoooonnnnssssttttrrrruuuuccccttttoooorrrrssss
          _u_n_i_v_e_r_s_e
               _U_n_i_v_e_r_s_e is the constructor for a universe. It is
               implicitly called when a universe is declared.

               _U_n__n_a_m_e is a pointer to a character string.  This is
               the name that should be assigned when a universe is
               created


          _n_o_d_e _N_o_d_e is the constructor for a node. It is implicitly
               called when a node is created.  The arguments that
               follow are required when a node is declared.

               _N_o_d_e__n_a_m_e is a pointer to a unique name assigned to the
               node.

               _M_y__u_n_i_v_e_r_s_e is a pointer to a universe where the node
               will exist.


        OOOOppppeeeerrrraaaattttiiiioooonnnnssss
          _n_o_d_e__f_r_o_m__n_a_m_e
               _N_o_d_e__f_r_o_m__n_a_m_e will find an unqualified node from the
               provided name.

               _N_o_d_e__n_a_m_e is a pointer to a character string that
               contains the name of the node.

               This function returns a pointer to the appropriate
               node.  If a node is not found, with the provided name,
               a NULL pointer is returned.


          _g_e_t__t_y_p_e
               _G_e_t__t_y_p_e retrieves the integer value of an edge.

               _E_d_g_e is a pointer to the specific edge.

               This function returns an integer representing the edge
               type.


          _g_e_t__n_a_m_e
               _G_e_t__n_a_m_e retrieves the name of a node or a universe.

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 8                                          (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               _N_o_d_e_1 is a pointer to the node.

               If it is invoked through a universe, a universe name is
               returned. If it is invoked through a node the name of
               the node is returned.


        CCCCrrrreeeeaaaattttiiiioooonnnn
          _c_a_p  _C_a_p creates an inpointing and an outpointing edge
               between two nodes given an edge type.

               _N_o_d_e_1 is a pointer to the first node in the pair.

               _N_e_d_g_e is pointer to an edge.  The edge has a type and
               must be unique between nodes, only one edge, inpointing
               and/or outpointing, may exist between nodes.

               _N_o_d_e_2 is a pointer to the second node in the pair.

               _N_v_a_l_u_e is a void pointer to an object.  This parameter
               is optional. If a value is not provided it defaults to
               NULL.

               This function returns a pointer to the first node.


          _c_i_p  _C_i_p creates an inpointing edge between two nodes given
               an edge type.

               _N_o_d_e_1 is a pointer to the first node in the pair.

               _N_e_d_g_e is a pointer to an edge.  The edge has a type and
               only one inpointing edge of the specified type may
               exist between the nodes.

               _N_o_d_e_2 is a pointer to the second node in the pair.

               _N_v_a_l_u_e is a void pointer to an object.  This parameter
               is optional if a value is not provided it defaults to
               NULL.

               This function returns a pointer to the first node.


          _c_o_p  _C_o_p creates an outpointing edge between two nodes given
               an edge type.

               _N_o_d_e_1 is a pointer to the first node in the pair.


                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 9                                          (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               _N_e_d_g_e is a pointer to an edge.  The edge has a type and
               only one outpointing edge of the specified type may
               exist between the nodes.

               _N_o_d_e_2 is a pointer to the second node in the pair.

               _N_v_a_l_u_e is a void pointer to an object.  This parameter
               is optional. If a value is not provided it defaults to
               NULL.

               This function returns a pointer to the first node.


        DDDDeeeessssttttrrrruuuuccccttttiiiioooonnnn
          _d_u_n  _D_u_n destroys an unqualified node in a universe and
               remove all of its adjacent edges.

               _N_o_d_e_1 is a pointer to the node to be destroyed.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_a_n  _D_a_n destroys nodes adjacent to a node in a universe and
               remove all of their adjacent edges.

               _N_o_d_e_1 is a pointer to a node in a universe, nodes
               adjacent to this one are destroyed.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_o_n  _D_o_n destroys nodes with edges outpointing from a node
               in a universe and destroy the adjacent edges to these
               nodes.

               _N_o_d_e_1 is a pointer to a node in a universe, nodes with
               edges outpointing from this node are destroyed.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_i_n  _D_i_n destroys nodes with edges inpointing from a node in
               a universe and destroy the adjacent edges to these
               nodes.

               _N_o_d_e_1 is a pointer to a node in a universe, nodes with

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 10                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               edges inpointing from this node are destroyed.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_i_n_g _D_i_n_g destroys inpointing nodes given a specific edge
               type.

               _N_o_d_e_1 is a pointer to a node in a universe.  Nodes with
               the specified edge type inpointing from this node are
               destroyed.

               _E_d_g_e__t_y_p_e is an integer value representing the edge
               type.

               This function will return 0 if it is successful and -1
               if it is not.


          _d_o_n_g _D_o_n_g destroys outpointing nodes given a specified edge
               type.

               _N_o_d_e_1 is a pointer to a node in a universe.  Nodes with
               the specified edge type outpointing from this node are
               destroyed.

               _E_d_g_e__t_y_p_e is an integer value representing the edge
               type.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_a_n_g _D_a_n_g destroys nodes with specified edges adjacent to a
               node in a universe.

               _N_o_d_e_1 is a pointer to a node in a universe.  Nodes with
               the specific edge type, whether inpointing or
               outpointing from this node, are destroyed.

               _E_d_g_e__t_y_p_e is an integer value representing the edge
               type.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_i_g  _D_i_g destroys the inpointing edges of a node.

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 11                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               _N_o_d_e_1 is a pointer to a node.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_o_g  _D_o_g destroys the outpointing edges of a node.

               _N_o_d_e_1 is a pointer to a node.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_a_g  _D_a_g destroys all adjacent edges of a node.

               _N_o_d_e_1 is a pointer to a node.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_i_g_g _D_i_g_g destroys inpointing edges given an edge type.

               _N_o_d_e_1 is a pointer to a node.  The inpointing edges of
               the specified type are destroyed.

               _E_d_g_e__t_y_p_e is an integer value representing the edge
               type.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_o_g_g _D_o_g_g destroys outpointing edges given an edge type.

               _N_o_d_e_1 is a pointer to a node.  The outpointing edges of
               the specified type are destroyed.

               _E_d_g_e__t_y_p_e is an integer value representing the edge
               type.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_a_g_g _D_a_g_g destroys adjacent edges given an edge type.

               _N_o_d_e_1 is a pointer to a node.

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 12                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               _E_d_g_e__t_y_p_e is an integer value representing the edge
               type.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_i_g_n _D_i_g_n destroys inpointing edges between two specifed
               nodes.

               _N_o_d_e_1 is a pointer to the first node.

               _N_o_d_e_2 is a pointer to the second node.

               This function returns 0 if it is successful and -1 if
               it is not.

          _d_o_g_n _D_o_g_n destroys outpointing edges between two specifed
               nodes.

               _N_o_d_e_1 is a pointer to the first node.

               _N_o_d_e_2 is a pointer to the second node.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_a_g_n _D_a_g_n destroys adjacent edges between two specifed
               nodes.

               _N_o_d_e_1 is a pointer to the first node.

               _N_o_d_e_2 is a pointer to the second node.

               This function returns 0 if it is successful and -1 if
               it is not.


          _d_u_g  _D_u_g will destroy an unqualified edge.

               _D_e_l__e_d_g_e is a pointer to an edge to be destroyed.

               Nothing is returned from this function


        EEEExxxxiiiisssstttteeeennnncccceeee
          _x_u_n  _X_u_n verifies the existence of a node in a particular
               universe.

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 13                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               _N_o_d_e_1 is a pointer to the node to be verified.

               This function returns TRUE if the node exists in the
               universe and FALSE if it does not.


          _x_i_p  _X_i_p verifies the existence of an inpointing pair in a
               universe.

               _N_o_d_e_1 is a pointer to the first node.

               _E_d_g_e__t_y_p_e is an integer representing the edge type.

               _N_o_d_e_2 is a pointer to the second node.

               This function returns TRUE if the pair exist and FALSE
               if they do not.


          _x_o_p  _X_o_p verifies the existence of an outpointing pair in a
               universe.

               _N_o_d_e_1 is a pointer to the first node.

               _E_d_g_e__t_y_p_e is an integer representing the edge type.

               _N_o_d_e_2 is a pointer to the second node.

               This function returns TRUE if the pair exist and FALSE
               if they do not.


          _x_a_p  _X_a_p verifies the existence of an adjacent pair in a
               universe.

               _N_o_d_e_1 is a pointer to the first node.

               _E_d_g_e__t_y_p_e is an integer representing the edge type.

               _N_o_d_e_2 is a pointer to the second node.

               This function returns TRUE if the pair exist and FALSE
               if they do not.


        SSSSeeeetttt RRRReeeettttrrrriiiieeeevvvvaaaallll
          _s_s_u_n _S_s_u_n retrieves the list of all unqualified nodes in a
               universe.


                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 14                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               This function returns a singly linked list containing
               the set.


          _s_a_n  _S_a_n retrieves a set of nodes that have adjacent edges
               to a specified node.

               _N_o_d_e_1 is a pointer to a node.

               This function returns a singly linked list of nodes.
               If there are not any adjacent nodes it returns a NULL
               pointer.


          _s_i_n  _S_i_n retrieves a set of nodes that have inpointing edges
               to a specified node.

               _N_o_d_e_1 is a pointer to a node.

               This function returns a singly linked list of nodes.
               If there are not any inpointing nodes it returns a NULL
               pointer.


          _s_o_n  _S_o_n retrieves a set of nodes that have outpointing
               edges to a specified node.

               _N_o_d_e_1 is a pointer to a node.

               This function returns a singly linked list of nodes.
               If there are not any outpointing nodes it returns a
               NULL pointer.


          _s_i_n_g _S_i_n_g retrieves a set of nodes with edges inpointing to
               this node given the edge type.

               _N_o_d_e_1 is a pointer to a node.

               _E_d_g_e__t_y_p_e is an integer representing the edge type.

               This function returns a singly linked list of nodes.
               If there are not any inpointing nodes with the
               specified edge type a NULL pointer is returned.


          _s_o_n_g _S_o_n_g retrieves a set of nodes with edges outpointing to
               this node given the edge type.


                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 15                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               _N_o_d_e_1 is a pointer to a node.

               _E_d_g_e__t_y_p_e is an integer representing the edge type.

               This function returns a singly linked list of nodes.
               If there are not any outpointing nodes with the
               specified edge type a NULL pointer is returned.


          _s_a_n_g _S_a_n_g retrieves a set of nodes with edges adjacent to
               this node given the edge type.

               _N_o_d_e_1 is a pointer to a node.

               _E_d_g_e__t_y_p_e is an integer representing the edge type.

               This function returns a singly linked list of nodes.
               If there are not any adjacent nodes with the specified
               edge type a NULL pointer is returned.


          _s_i_p  _S_i_p retrieves a set of edges inpointing to a given
               node.

               _N_o_d_e_1 is a pointer to a node.

               This function returns a singly linked list of edges.
               If the node does not have any inpointing edges a NULL
               pointer is returned.


          _s_o_p  _S_o_p retrieves a set of edges outpointing to a given
               node.

               _N_o_d_e_1 is a pointer to a node.

               This function returns a singly linked list of edges.
               If the node does not have any outpointing edges a NULL
               pointer is returned.


          _s_a_p  _S_a_p retrieves a set of edges adjacent to a given node.

               _N_o_d_e_1 is a pointer to a node.

               This function returns a singly linked list of edges.
               If the node does not have any adjacent edges a NULL
               pointer is returned.


                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 16                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



          _s_i_g  _S_i_g retrieves a set of inpointing edge types for a
               node.

               _N_o_d_e_1 is a pointer to a node.

               This function returns a singly linked list of edge
               types.  If the node does not have any inpointing edges
               a NULL is returned.


          _s_o_g  _S_o_g retrieves a set of outpointing edge types for a
               node.

               _N_o_d_e_1 is a pointer to a node.

               This function returns a singly linked list of edge
               types.  If the node does not have any outpointing edges
               a NULL is returned.


          _s_a_g  _S_a_g retrieves a set of adjacent edge types for a node.

               _N_o_d_e_1 is a pointer to a node.

               This function returns a singly linked list of edge
               types.  If the node does not have any adjacent edges a
               NULL is returned.


          _s_i_g_n _S_i_g_n retrieves a set of inpointing edge types given a
               node.

               _N_o_d_e_1 is a pointer to a node.

               _N_o_d_e_2 is a pointer to the second node.

               This function returns a singly linked list of
               inpointing edge types between the two specified nodes.
               If there does not exist any inpointing edges a NULL
               pointer is returned.


          _s_o_g_n _S_o_g_n retrieves a set of outpointing edge types given a
               node.

               _N_o_d_e_1 is a pointer to a node.

               _N_o_d_e_2 is a pointer to the second node.


                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 17                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               This function returns a singly linked list of
               outpointing edge types between the two specified nodes.
               If there does not exist any inpointing edges a NULL
               pointer is returned.


          _s_a_g_n _S_a_g_n retrieves a set of adjacent edge types given a
               node.

               _N_o_d_e_1 is a pointer to a node.

               _N_o_d_e_2 is a pointer to the second node.

               This function returns a singly linked list of adjacent
               edge types between the two specified nodes.  If there
               does not exist any inpointing edges a NULL pointer is
               returned.


        BBBBiiiinnnnddddiiiinnnngggg
          _b_u_s  _B_u_s binds a universe with a value.

               _N_v_a_l_u_e is a void pointer to the value that is stored in
               a universe.

               This function returns void.


          _v_u_s  _V_u_s returns the value stored in a universe.


          _b_u_n  _B_u_n binds a node with a value.

               _N_o_d_e_1 is a pointer to a node.

               _N_v_a_l_u_e is a void pointer to the value that is stored in
               the node.

               This function returns void.


          _v_u_n  _V_u_n returns the value stored in a node.

               _N_o_d_e_1 is a pointer to a node.

               This function returns void.


          _b_u_g  _B_u_g binds an edge with a value.

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 18                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               _N_v_a_l_u_e is a void pointer to the value that is stored in
               the edge.

               This funciton returns void.


          _v_u_g  _V_u_g returns the value stored in an edge.


          _b_i_p  _B_i_p binds a value to an inpointing pair.

               _N_o_d_e_1 is a pointer to the first node.

               _E_d_g_e__t_y_p_e is an integer representing the edge type.

               _N_o_d_e_2 is a pointer to the second node.  _N_v_a_l_u_e is a
               void pointer to the value to be stored in the pair.

               Nothing is returned from this function


          _b_o_p  _B_o_p binds a value to an outpointing pair.

               _N_o_d_e_1 is a pointer to the first node.

               _E_d_g_e__t_y_p_e is an integer representing the edge type.

               _N_o_d_e_2 is a pointer to the second node.  _N_v_a_l_u_e is a
               void pointer to the value to be stored in the pair.

               Nothing is returned from this function.


          _b_a_p  _B_a_p binds a value to an adjacent pair.

               _N_o_d_e_1 is a pointer to the first node.

               _E_d_g_e__t_y_p_e is an integer representing the edge type.

               _N_o_d_e_2 is a pointer to the second node.  _N_v_a_l_u_e is a
               void pointer to the value to be stored in the pair.

               Nothing is returned from this function.


          _v_i_p  _V_i_p returns the value of an inpointing pair.

               _N_o_d_e_1 is a pointer to the first node.


                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 19                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               _E_d_g_e__t_y_p_e is an integer value representing the edge
               type.

               _N_o_d_e_2 is a pointer to the second node.

               This function returns a void pointer to the value
               stored in the pair.


          _v_o_p  _V_o_p returns the value of an outpointing pair.

               _N_o_d_e_1 is a pointer to the first node.

               _E_d_g_e__t_y_p_e is an integer value representing the edge.

               _N_o_d_e_2 is a pointer to the second node.

               This function returns a void pointer to the value
               stored in the pair.































                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 20                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



     EEEEXXXXAAAAMMMMPPPPLLLLEEEESSSS
          scale=100
          define t173 |
          [ box invis ht 32 wid 10 with .sw at 0,0
          "5" at 5,24
          "" at 5,8
          ] |

          define t185 |
          [ box invis ht 32 wid 10 with .sw at 0,0
          "3" at 5,24
          "" at 5,8
          ] |

          define t145 |
          [ box invis ht 32 wid 10 with .sw at 0,0
          "3" at 5,24
          "" at 5,8
          ] |

          box invis ht 640 wid 616 with .sw at 0,0
          "2" at 316,234
          line -> from 296,352 to 96,416
          line <- from 128,296 to 56,224
          line -> from 144,288 to 80,224
          line <- from 168,288 to 96,216
          line -> from 248,168 to 184,288
          line -> from 112,192 to 216,152
          line -> from 88,184 to 232,56
          line -> from 248,120 to 248,56
          line -> from 320,336 to 264,168
          line <- from 344,328 to 296,160
          line -> from 480,552 to 368,528
          line -> from 384,512 to 464,528
          "6" at 424,542
          "3" at 412,522
          "4" at 432,510
          line -> from 376,496 to 480,520
          line -> from 296,32 to 440,24
          line -> from 296,24 to 456,8
          line <- from 272,8 to 472,0
          line -> from 296,40 to 448,40
          line <- from 400,152 to 288,48
          "3" at 356,118
          "6" at 364,98
          line -> from 408,168 to 312,136
          line -> from 416,144 to 288,40
          line -> from 464,136 to 480,48
          "4" at 468,90

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 21                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



          t173 with .nw at 551,166
          line -> from 520,40 to 576,256
          "3" at 496,94
          line -> from 480,144 to 496,48
          "Directed Graph: example program" at 296,630
          line -> from 488,176 to 552,256
          "4" at 508,226
          "1" at 492,234
          "3" at 520,206
          line -> from 472,184 to 536,264
          line -> from 456,184 to 528,272
          line -> from 448,184 to 464,400
          line <- from 440,184 to 456,400
          "4" at 436,278
          "2" at 444,254
          "3" at 460,278
          line -> from 432,184 to 448,400
          line <- from 432,408 to 304,152
          "5" at 364,278
          "3" at 376,266
          line <- from 440,400 to 312,144
          line -> from 416,424 to 360,376
          line <- from 424,408 to 384,368
          line -> from 472,448 to 504,512
          line <- from 488,448 to 520,512
          line <- from 504,440 to 536,512
          "6" at 484,478
          "2" at 504,478
          "5" at 516,462
          line -> from 552,520 to 560,304
          line -> from 536,520 to 544,296
          "4" at 536,378
          line -> from 528,288 to 488,408
          "8" at 512,358
          "2" at 564,382
          "7" at 88,254
          "1" at 112,254
          "1" at 136,246
          "2" at 168,114
          "4" at 156,98
          "4" at 360,150
          "5" at 136,82
          "" at 608,606
          "6" at 296,86
          "1" at 268,86
          "4" at 244,86
          t185 with .nw at 147,190
          t145 with .nw at 211,254
          line -> from 216,320 to 304,344

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 22                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



          "4" at 244,334
          "5" at 352,2
          "4" at 380,14
          "1" at 368,26
          "2" at 404,42
          line -> from 272,120 to 272,56
          line -> from 296,128 to 288,48
          line -> from 64,176 to 216,48
          line <- from 40,176 to 200,32
          "3" at 192,382
          line -> from 64,400 to 144,328
          line <- from 40,400 to 128,320
          "4" at 112,362
          "7" at 72,358
          "1" at 260,494
          "1" at 400,382
          "1" at 352,414
          line -> from 320,488 to 328,376
          line -> from 352,488 to 344,376
          line -> from 312,368 to 208,504
          "" at 240,534
          line <- from 96,432 to 176,496
          "" at 328,126
          ellipse ht 48 wid 96 at 48,424
          ellipse ht 48 wid 96 at 344,352
          ellipse ht 48 wid 96 at 168,312
          ellipse ht 48 wid 96 at 264,144
          ellipse ht 48 wid 96 at 448,160
          ellipse ht 48 wid 96 at 464,424
          ellipse ht 48 wid 96 at 176,520
          ellipse ht 48 wid 96 at 336,512
          ellipse ht 48 wid 96 at 568,280
          ellipse ht 48 wid 96 at 512,536
          ellipse ht 48 wid 96 at 64,200
          ellipse ht 48 wid 96 at 248,32
          ellipse ht 48 wid 96 at 488,24
          "anand" at 44,422
          "mark" at 176,518
          "john" at 168,310
          "maryann" at 56,198
          "deb" at 340,350
          "sam" at 336,510
          "mike" at 264,142
          "alex" at 248,30
          "joe" at 484,22
          "karen" at 452,158
          "ernie" at 572,278
          "mani" at 464,422
          "terri" at 512,534

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 23                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



          line <- from 40,448 to 128,520
          line -> from 72,448 to 144,504
          line -> from 88,440 to 160,496
          "8" at 84,494
          "8" at 120,462
          "1" at 96,474
          "2" at 132,450
          line -> from 216,536 to 304,528
          line -> from 224,520 to 288,512
          line -> from 224,512 to 304,496
          "5" at 252,538
          "5" at 384,398
          "5" at 320,414
          "2" at 260,518
          "2" at 256,438
          "2" at 288,246
          // System include files
          #include <stdio.h>
          #include <string.h>

          // unit include files
          #include "universe.h"
          #include "node.h"
          #include "edge.h"
          #include "sllist.h"
          #include "int_sllist.h"

          // example object
          #include "String.h"

          // internal function declarations
          void print_edgelist(int_sllist*);
          void print_edgeolist(sllist *);
          void print_nodelist(sllist *);
          void sxgn(node *node1, node *node2);
          void sxn(universe *);
          void sxg(universe *);
          void sxng(universe *);
          void bxg(universe *);
          void bxp(universe *);
          void xxp(universe *);
          void dxn(universe *);
          void add_node(universe*);
          void connect_nodes(universe*);
          main()
          {

               // create a universe
               universe my_world("michelle");

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 24                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))




               // create the graph
               add_node(&my_world);
               connect_nodes(&my_world);

               // set retrieval
               sxn(&my_world);
               sxg(&my_world);
               sxng(&my_world);

               // bind values
               bxg(&my_world);
               bxp(&my_world);

               // existence
               xxp(&my_world);

               // destroy the world
               dxn(&my_world);

          }

          void
          add_node(universe *my_world)
          {
               sllist *node_list;
               node *tmp_node;

               // create nodes in a universe
               tmp_node = new node("anand", my_world);
               tmp_node = new node("terri", my_world);
                        .
                              .

                              .
               tmp_node = new node("ernie", my_world);

          }

          void
          connect_nodes(universe *my_world)
          {
               node *tmp_node, *node1, *node2;
               edge *nedge;


               // create the edges, shown in the graph, between nodes

               // get the nodes based on names

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 25                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               node1 = my_world->node_from_name("anand");
               node2 = my_world->node_from_name("mark");

               // create the edges between nodes
               nedge = new edge(8);
               tmp_node = my_world->cap(node1, nedge, node2);
               nedge = new edge(1);
               tmp_node = my_world->cop(node1,nedge,node2);
               nedge = new edge(2);
               tmp_node = my_world->cip(node1,nedge,node2);
               // get a list of the edge types between nodes
               sxgn(node1,node2);
                         .
                         .
                         .

               node1 = my_world->node_from_name("john");
               node2 = my_world->node_from_name("anand");
               nedge = new edge(7);
               tmp_node = node1->cop(nedge,node2);
               nedge = new edge(4);
               tmp_node = node2->cop(nedge,node1);
               sxgn(node1,node2);
                         .
                         .
                         .
               node1 = my_world->node_from_name("alex");
               node2 = my_world->node_from_name("joe");
               nedge = new edge(5);
               tmp_node = node1->cip(nedge,node2);
               nedge = new edge(4);
               tmp_node = node1->cop(nedge,node2);
               nedge = new edge(1);
               tmp_node = node1->cop(nedge,node2);
               nedge = new edge(2);
               tmp_node = node1->cop(nedge,node2);
               sxgn(node1,node2);

               node1 = my_world->node_from_name("alex");
               node2 = my_world->node_from_name("karen");
               nedge = new edge(6);
               tmp_node = node1->cip(nedge,node2);
               nedge = new edge(3);
               tmp_node = node1->cop(nedge,node2);
               sxgn(node1,node2);

               node1 = my_world->node_from_name("mike");
               node2 = my_world->node_from_name("deb");
               nedge = new edge(2);

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 26                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               tmp_node = node1->cap(nedge,node2);
               sxgn(node1,node2);

               node1 = my_world->node_from_name("terri");
               node2 = my_world->node_from_name("sam");
               nedge = new edge(3);
               tmp_node = node1->cip(nedge,node2);
               nedge = new edge(4);
               tmp_node = node1->cip(nedge,node2);
               nedge = new edge(6);
               tmp_node = node1->cop(nedge,node2);
               sxgn(node1,node2);
          }

          // traverse a list of nodes and display something
          // using object print function
          void
          print_nodelist(sllist *node_list)
          {
               node *tmp_node;
               int i;

               for(i=0;(tmp_node = (node *)node_list->nth(i)) != (node *)NULL;i++)
               {
                    printf("node %d is %s0,i, tmp_node->get_name());
               }
          }

          // traverse a list of edges and get and display the edge type
          void
          print_edgeolist(sllist *edge_list)
          {
               edge *tmp_edge;
               int i;

               for(i=0;(tmp_edge = (edge*)edge_list->nth(i)) != (edge*)NULL;i++)
               {
                    printf("edge type is: %d 0,tmp_edge->get_type());
               }
          }


          // traverse list of edge types displaying the
          // types
          void
          print_edgelist(int_sllist *edge_list)
          {
               int *j, i;


                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 27                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               for(i = 0; (j = (int *)edge_list->nth(i)) != (int *)NULL; i++)
               {
                    printf("type is %d0,*j);
               }
          }

          // get set of inpointing, outpointing and adjacent edge types
          // given a node
          void
          sxgn(node *node1, node *node2)
          {
               int_sllist *tmp_types;

               // get adjacent edge types
               tmp_types = node1->sagn(node2);
               // display list
               print_edgelist(tmp_types);

               // get inpointing edge types
               tmp_types = node1->sign(node2);
               // display list
               print_edgelist(tmp_types);

               // get outpointing edge types
               tmp_types = node1->sogn(node2);
               //display list
               print_edgelist(tmp_types);
                    .
                    .
                    .
          }
          // retrieve set of inpointing, outpointing and adjacent nodes
          void
          sxn(universe *my_world)
          {
               sllist *nodes, *list1, *list2, *list3;
               int i;
               node *tmp_node;

               nodes = my_world->ssun();

               for(i =0; (tmp_node = (node *)nodes->nth(i)) != (node *)NULL; i++)
               {
                    list1 = tmp_node->san();
                    list2 = tmp_node->sin();
                    list3 = tmp_node->son();
                    // display lists
                         .
                         .

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 28                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



                         .
               }
          }

          // retrieve set of edge types
          void
          sxg(universe *my_world)
          {

               int_sllist  *list1, *list2, *list3;
               sllist *nodes;
               int i;
               node *tmp_node;

               // get set of all nodes
               nodes = my_world->ssun();

               for(i =0; (tmp_node = (node *)nodes->nth(i)) != (node *)NULL; i++)
               {
                    list1 = tmp_node->sag();
                    list2 = tmp_node->sig();
                    list3 = tmp_node->sog();
                    // display list
                         .
                         .
                         .
               }
          }

          // retrieve set of nodes outpointing, inpointing and adjacent
          // with a specific edge type
          void
          sxng(universe *me)
          {
               sllist *nodes, *nxt_list;
               int i, j;
               node *tmp_node;

               // retrieve set of all nodes
               nodes = me->ssun();

               for(i =0; (tmp_node = (node *)nodes->nth(i)) != (node *)NULL; i++)
               {
                    printf("0de is %s0,tmp_node->get_name());
                    for(j = 0; j < 8; j++)
                    {
                         nxt_list = tmp_node->sang(j);
                         nxt_list = tmp_node->sing(j);
                         nxt_list = tmp_node->song(j);

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 29                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



                              .
                              .
                              .
                    }
               }
          }

          // bind a value to nodes, universe and edges
          void
          bxg(universe *me)
          {
               sllist *nodes, *edges_list;
               node *tmp_node;
               edge *tmp_edge;
               String string3 = "universe_string";
               String string4 = "inpointing_edge";
               String string5 = "outpointing_edge";
               String string6 = "adjacent_edge";
                    .
                    .
                    .
               String *str_ptr;


               // bind value to a universe
               me->bus((void *)&string3);
               str_ptr = (String *)me->vus();


               // get list of all nodes
               nodes = me->ssun();

               for(i =0; (tmp_node = (node *)nodes->nth(i)) != (node *)NULL; i++)
               {
                    // bind value to a node
                    tmp_node->bun((void *)&string1);

                    // retrieve value from node
                    str_ptr = (String*)tmp_node->vun();
               }


               for(i =0; (tmp_node = (node *)nodes->nth(i)) != (node *)NULL; i++)
               {
                    // get list of inpointing edges
                    edges_list = tmp_node->sip();
                    for(j = 0;(tmp_edge = (edge *)edges_list->nth(j)) != (edge *)NULL;j++)
                    {
                         // bind value to an edge

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 30                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



                         tmp_edge->bug((void*)&string4);

                         // retrieve value from edge
                         str_ptr = (String *)me->vug(tmp_edge);
                    }

                    // get list of outpointing edges
                    edges_list = tmp_node->sop();
                    for(j = 0; (tmp_edge = (edge*)edges_list->nth(j)) != (edge *)NULL;j++)
                    {
                                   .
                                   .
                                   .
                    }

                    // get list of adjacent edges
                    edges_list = tmp_node->sap();
                    for(j = 0; (tmp_edge = (edge*)edges_list->nth(j)) != (edge *)NULL;j++)
                    {
                                   .
                                   .
                                   .
                    }
               }
          }

          // bind value to pair of edges
          void
          bxp(universe *me)
          {
               String string1 = "john-n-maryann";
                         .
                         .
                         .
               String *str_ptr;

               node *node1, *node2;

               // get node from name
               node1 = me->node_from_name("john");
               node2 = me->node_from_name("maryann");

               // bind value to adjacent pair
               me->bap(node1,1,node2,(void *)&string1);

               // retrieve value from inpointing pair
               str_ptr = (String *)me->vip(node1,1,node2);

               // retrieve value from oupointing pair

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 31                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



               str_ptr = (String *)me->vop(node1,1,node2);

                         .
                         .
                         .
               // bind value to outpointing pair
               me->bop(node1,4,node2,(void *)&string2);

               // retrieve value from outpointing pair
               str_ptr = (String *)me->vop(node1,4,node2);

                         .
                         .
                         .
          }


          // check existence of nodes
          void
          xxp(universe *me)
          {

               node *node1, *node2;

               // get node from name
               node1 = me->node_from_name("anand");

               // check to see if it exists
               if(me->xun(node1) == TRUE)
                    printf("anand exists0);
               else
                    printf("anand does not exist0);

               //get node from name
               node2 = me->node_from_name("mickey");

               // check to see if it exists
               if(me->xun(node2) == TRUE)
                    printf("mickey exists0);
               else
                    printf("mickey does not exist0);
                         .
                         .
                         .

               // see if inpointing pair exist
               if(me->xip(node1,1,node2) == TRUE)
                    fprintf(stderr,"exists");
                         .

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 32                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))



                         .
                         .

               // see if outpointing pair exist
               if(me->xop(node1,8,node2) == TRUE)
                    fprintf(stderr, "exists");
                         .
                         .
                         .
          }


          // destroy nodes
          void
          dxn(universe *me)
          {

               node *node1, *tmp_node, *node2;
               sllist *nodes, *node_list;
               int i;

               // get node from name
               node1 = me->node_from_name("terri");

               // destroy unqualified node
               me->dun(node1);
                         .
                         .
                         .
               // get set of all adjacent nodes from node1
               nodes = node1->san();

               // destroy inpointing nodes
               node1->din();
                         .
                         .
                         .
               // destroy outpoint nodes
               if(node1->don() == ERROR )
                    printf("error0);
                         .
                         .
                         .
               // get list of all nodes
               node_list = me->ssun();
               for(i = 0; (tmp_node = (node *)node_list->nth(i)) != (node *)NULL;i++)
               {
                    //delete inpointing edges for temp_node of edge type 1
                    tmp_node->digg(1);

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 33                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))




                    //delete outpointing edges for temp_node of edge type 2
                    tmp_node->dogg(2);

                    //delete adjacent edges for temp_node of edge type 5
                    tmp_node->dagg(5);

               }

               //recreate graph for further testing
               add_node(me);
               connect_nodes(me);

               for(i = 0; (tmp_node = (node *)node_list->nth(i)) != (node *)NULL;i++)
               {
                    // delete inpointing edges
                    if(tmp_node->dig() == ERROR)
                         printf("ERROR0);

                    // delete outpointing edges
                    if(tmp_node->dog() == ERROR)
                         printf("ERROR0);

                    // delete adjacent edges
                    if(tmp_node->dag() == ERROR)
                         printf("ERROR0);
               }

               // recreate graph for further testing
               add_node(me);
               connect_nodes(me);

               // get nodes from names
               node1 = me->node_from_name("anand");
               node2 = me->node_from_name("mark");

               //delete inpointing edges between nodes
               node1->dign(node2);
                         .
                         .
                         .
               // delete adjacent edges between nodes
               node1->dagn(node2);
               node_list = node1->san();
                         .
                         .
                         .
               // delete outpointing edges between nodes
               node1->dogn(node2);

                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 34                                         (printed 11/9/90)






     ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))                 CCCCCCCClllliiiibbbb                 ddddiiiiggggrrrraaaapppphhhh((((3333CCCC++++++++))))




          }


     WWWWAAAARRRRNNNNIIIINNNNGGGGSSSS
     CCCCAAAAVVVVEEEEAAAATTTTSSSS
     FFFFIIIILLLLEEEESSSS
     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          sllist(3), int_sllist(3)


     SSSSCCCCCCCCSSSSIIIIDDDD
          %W%





































                            _A_T_&_T _- _P_R_O_P_R_I_E_T_A_R_Y
                   Use pursuant to Company Instructions.



     Page 35                                         (printed 11/9/90)



