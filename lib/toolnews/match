match 1.02A:
-----------

The most common problem with match being the omission of quotes to
keep the first argument all in tact, as in:

SOMETHING='a lot of stuff with white spaces, etc. & so on & so on'
match $SOMETHING '&'  # WRONGO!

I've added more argument validity checking to match.  Especially
since the above example would cause match to dump core (too many
supposed sub-expression match variables, which match didn't handle
correctly).  The above is interpreted as: match the word 'a' (first
word in $SOMETHING) against the regular expression 'lot' (second
word in $SOMETHING) and assign any (...)$X sub-expressions to
variables named (0) of, (1) stuff, (2) with, (3) white, (4) spaces,,
(5) etc., (6) &, (7) so, (8) on, (9) &, <<core dump>>

A. What the user probably wanted was:

       match "$SOMETHING" '&'  # RIGHT!

   Note the double quotes (double inverted commas for our friends
   from across the pond).
   PLEASE REMEMBER THIS WHEN YOU USE MATCH (or any tool for that
   matter!)

B. It no longer dumps core if more than 10 variables are given.

C. It gives warning messages about things that don't look like
   (Bourne shell) variable names:

       match "$SOMETHING" '&' Abc.def a[1] +3

For more information, use: toolman match

match is provided by:           /~~~~~~~~~~~~~~~~ ~ ~ ~ ~ ~  ~  ~  ~
  Warren D. Swan  (WooDS)      Y n ni____ ___#_   ___n___  ________
  AT&T Bell Laboratories      -(((((([__]/_____].(_______).\__  __/.
  Naperville, Illinois        /o-OOOOO~~  oo oo   oo   oo  oo `' oo
  woods@toontown.att.com    ########################################
----------------------------------------------------------------------
OLD NEWS RELEASE:

match  1.01A:
------------
Here is a tool that I've been using for several years that may help
your shell programming from time to time.  The name of the tool is:
                               ---------
                               | match |
                               ---------
As usual, a manual page is available for it.  It amounts to a shell
user's call to the regcmp(3X)/regex(3X) pair.

SYNTAX SYNOPSIS:
   match <string> <RE> [ or <RE> ] ... [-n] [ <VARNAME> ] ...

EXAMPLES:

1. match can be used to supplement the shell's simplistic pattern
   matching:

   if match "$REPLY" '^[Yy]' or '^[Oo][Kk]$'
   then
      # Affirmative branch
   fi

   This checks to see if REPLY starts with a y (either case) or is
   ok (either case or mixed).

2. Including things that are very messy in shell:
      # Make sure ISSUE contains a valid FOCUS-PDD drawing issue
      # (#, #w#, #W#).  One to 3 digits (before the w, if any).
      # 1 or 2 digits after the w:
   WITHOUT MATCH:
      case "$ISSUE" in
       [0-9]|[0-9][0-9]|[0-9][0-9][0-9]|\
       [0-9][wW][0-9]|[0-9][0-9][wW][0-9]|[0-9][0-9][0-9][wW][0-9]|\
       [0-9][wW][0-9][0-9]|[0-9][0-9][wW][0-9][0-9]|\
       [0-9][0-9][0-9][wW][0-9][0-9])
         : LOOKS GOOD! ;;
       * )
         error "$ISSUE isn't valid."
         ;;
      esac

   WITH MATCH:
      if match "$ISSUE" '^[0-9]{1,3}([wW][0-9]{1,2}){0,1}$'
      then : LOOKS GOOD!
      else
         error "$ISSUE isn't valid."
      fi

      [0-9]{1,3}     1 to 3 digits
      ( ... ){0,1}   optionally followed by
      [wW]           w or W and
      [0-9]{1,2}     1 to 2 digits

3. match can be used to assign shell variables to portions of the
   matched string.

   match "$ISSUE" '^([0-9]{1,3})$0([wW]([0-9]{1,2})$1){0,1}$' WHOLE WORK

   Given this ISSUE it outputs:
              20W03    WHOLE='20'
                       WORK ='03'
              200      WHOLE='200'
                       WORK=
   Notice that the $0 match buffer is given to the first variable, the
   $1 match buffer to the second, and so on.

      ISSUEMATCH='^([0-9]{1,3})$0([wW]([0-9]{1,2})$1){0,1}$'
      eval `match "$ISSUE" "$ISSUEMATCH" WHOLE WORK`

   will set the WHOLE and WORK variables as shown above.

4. Warning: Writing regcmp/regex patterns is like writing APL program
   code.  Best to comment 'em a bunch.  For example: Here's something
   from some application code I recently wrote.  This routine
   normalizes a phone number no matter how it is input, as in
   INPUT PHONE #:   NORMALIZED:
   --------------   ------------
   1(815)824-2249   815-824-2249
   979-2260         979-2260
   (908) 949-6455   908-949-6455
   708 979-3360     708-979-3360
   7089790116       708-979-0116
   9491234          949-1234

   Now for the yummy shell code:
      # First pitch out any leading 1 & following punctuation, if any:
      PHONEMATCH='^(1[- ]*){0,1}'
      # Second, parse out any leading area code digits, optionally
      # parenthesized, & pitch out any optional following punctuation:
      PHONEMATCH="$PHONEMATCH"'\(*([0-9]*)$0[- \)]*'
      # Third, parse out the 3 digit office number, and pitch out any
      # optional following punctuation:
      PHONEMATCH="$PHONEMATCH"'([0-9]{3})$1[- ]*'
      # Fourthly, parse out the 4 digit line number, right anchored:
      PHONEMATCH="$PHONEMATCH"'([0-9]{4})$2$'
      # [Area code (if any) into $0, office into $1, line into $2.]

      norm_phone()
      {
         AREA=  OFFC=  LINE=
         eval `match "$1" "$PHONEMATCH" AREA OFFC LINE`
         if [ -n "$OFFC" -a -n "$LINE" ]
         then
            if [ -n "$AREA" ]
            then  echo "$AREA-$OFFC-$LINE"
            else  echo "$OFFC-$LINE"
            fi
         else
            echo "$1"
         fi
      }

      norm_phone 7089793311
   outputs: 708-979-3311

NOTE: Regular expressions meta-characters in match (regcmp/regex) are
      not exactly the same as those in ed/grep/ex/vi/...  nor egrep.
      See the manual page for regcmp(3X) for a precise description.
