
                       F I T  Version 1.2.10

I N C O M P A T I B L E   C H A N G E S  ********************************

These changes may cause existing programs to break:

  1. Change, Cut, and Find now LEAVE THE SEQUENCE CUE UNCHANGED when
     there is no match.  Before, the cue was moved to the end of the
     sequence when there was no match.

  2. Change and Delete now requires the |"status"| option in order
     to set the status of the edited sequence to reflect whether
     the sequence was modified or not.  Before, Change and Delete
     always set the status.

  3. If a function returns a share and you want the share, you must now
     prepend & to the function.  Otherwise, you will get a copy, not a
     share.  Before, the & was not necessary.

  4. Fit binaries (i.e., Fit executibles or libraries compiled using
     the -o flag of fit) have changed.  The new version of Fit will load
     old binaries, however, it would be best to recompile all Fit binaries
     in case we made a mistake.  The old version of Fit cannot load
     new binaries and will give an error.
     
==========================================================================
               * * *  Change, Delete, Find, Match  * * *
==========================================================================

Change, Delete, Find, and Match now leave the sequence cue unchanged
when there is no match.  Before, the cue was moved to the end of the
sequence when there was no match.  This change was made so that a
sequence can be searched repeatedly from the point of the last match
with the |"cue"| option using different regular expressions until a
match is finally found.  Before, you had to save the cue and restore
it before each search; this was a nuisance, and failing to do so was
a hard-to-find bug.

Change and Delete now requires the |"status"| option if they are to
set the status of the return value (and/or shared sequence) true or
false depending on whether the sequence was modified or not.  Before,
Change and Delete always set the status, which often led to obscure
bugs when that behavior was inappropriate.  This change fixes a design
botch which was contrary to Fit's philosophy that the code make
explicit the intentions of the programmer.


==========================================================================
                               Layout
==========================================================================

Layout now takes options that change the special characters used to
indicate justified fields, superfields, and the indexer line.  This makes
Layout easier to use with templates that contain verbatim characters
that conflict with Layout's default special characters.

  |"justifier" "@~$"|    Set left, center, and right field justifier
                         to @, ~, and $, respectively
  |"superfielder" "`'"|  Set superfield begin and end delimiters to
                         ` and ', respectively
  |"indexer" "<>"|       Set indexer begin and end delimiters to < and >,
                         respectively

This option lets you declare calculator functions Local so as not to
clutter the function name space, yet have those function accessible to
Layout.  The option tells Layout the name of the module file where it
can find the local calculator functions.

  |"calculator" "prog"|  Tells Layout to look for calculators in file "prog"

This option tells Layout to retain superfields and any verbatim text
they might contain whether or not their fields where filled with values.
Before, superfields disappeared (its presence was conditional) if none
of their fields were filled.

  |"keep super"|         Retain superfield and any verbatim text it might
                         contain even if its fields were not filled

This option tells Layout to stretch or shrink superfields to fit the text
it contains after filling its fields.

  |"adjust super"|       Make superfield elastic to fit the text it contains

This option enables you to built up a line a piece at a time with each piece
generated by a call to Layout.

  |"end" ""|             Tells Layout to end every line with nothing instead
                         of the usual newline


==========================================================================
                               Chron
==========================================================================

Assumes time zone of system (if the TZ environment variable is set) when
no time zone is given.

No longer requires space between time and am or pm.


==========================================================================
                               Data type
==========================================================================

The "type" field of a system tag now returns the name of a data type.  The
possible names are: nil, boolean, function, whole, decimal, text, file,
terminal, pipe, array, record, or poison.  For a record made with the
Record constructor and for an object, the name of the data type is the name
in the Record or Object definition.  For example:

  > Set (a b c) 1 "two" Chron
  > (!a)["type"] (!b)["type"] (!c)["type"]
  "whole" "text" "Chron"


==========================================================================
                               Date
==========================================================================

Added more fields to Date record, including the local time zone from TZ,
if set.  For example:
  > Date Time
  {
    year              1994
    month             12
    day               16
    hour              15
    minute            7
    second            33
    day_of_week       6
    day_of_year       350
    zone              "EST"
    12hour            3
    meridiem          "pm"
    month_name        "December"
    day_name          "Friday"
    sun_week_of_year  50
    mon_week_of_year  50
  }


==========================================================================
                            Evaluate, Closure
==========================================================================

Improved error handling in Evaluate and Closure.

Changed module name construction for un-named Closures.


==========================================================================
                       File size: maximum size
==========================================================================

Changed max_size error to be maximum increase in the size of the file.
This means that a file cannot grow by more than max_size (default: 3 MB)
characters when appended to.


==========================================================================
                           File buffered input
==========================================================================

Added buffering to file reads to make file input faster.


==========================================================================
                               ForEach
==========================================================================

For both more convenience and efficiency, ForEach now allows its list
argument to be an enumeration.

  OLD:
  ForEach x { xarray[Thru 2 $-1] }

  NEW:
  ForEach x xarray[Thru 2 $-1]


==========================================================================
                               Form feed
==========================================================================

Formfeeds and other whitespace characters are now allowed anywhere in Fit
source file where a space is legal.  A formfeed in a source file causes
a page break in a listing printed with pr.


==========================================================================
                * * *  Function returning a share  * * *
==========================================================================

You must now prepend an & to a function that returns a share if you want
to share the variable that is returned.  Otherwise, you will get a copy,
not a share.  This is a bug fix to prevent inadvertent side effects on a
variable returned as a share when the receiver is unaware that a share
was returned.

In this example, Foo returns a share, and the user wants x to be a share
to the variable returned by Foo:

  OLD:
  Set x Foo a

  NEW:
  Set x &Foo a


==========================================================================
                           Function system tag
==========================================================================

Added "file", "begin", and "end" fields to the system tag of functions.
The value of the "file" field is the name of source file of the function,
and the values of the "begin" and "end" fields are the starting and ending
line numbers of the function within the source file.


==========================================================================
                               GetTill
==========================================================================

Added |"at"| option to leave the cue at the beginning of the matched
pattern in the input sequence even when the matched pattern is included
in the returned sequence (|"include"| option).


==========================================================================
                       Object inheritance hierarchy
==========================================================================

The system tag of an object is now the class inheritance tree.  The tree
is a record whose field keys are the class names, and field values are
shares of the class objects.  The first field refers to the object itself.
For example:

  Object Foo
      Class Bar
      "foo" 1
  Object Bar
      "bar" 2
  
  > Set a Foo
  > !a
  {
    Foo  {
           foo  1
         }
    Bar  {
           bar  2
         }
  }
 

==========================================================================
                Object: overloading type predicates
==========================================================================

A "type" method in an object with a value of "whole" overloads IsWhole
and IsNumber, "decimal" overloads IsDecimal and IsNumber, and "text"
overloads IsText and IsSequence so that the functions return true.
See the example below.


==========================================================================
                   Object that behaves like text
==========================================================================

You can now define an object that can be operated on just like ordinary
text.  The "<>" method overloads sequence indexing in a source object,
the "Set<>" method overloads sequence indexing in a target object, the
"Set<$+>" method overloads appending to a target object, the "$" method
overloads the $ size qualifier, the "Set$" method overloads setting the
size of the object, the "^" method overloads the cue index, and the
"Set^" method overloads setting the cue of the object.  Here is an example
of a text object:

  Object TextObject &arg
      Method
          "type"  "text"
          "Text"  '( obj Return obj["data"] )
          "<>"    '( obj a b Return obj["data"]<Thru a b> )
          "Set<>" '( &obj a b value Return Set obj["data"]<Thru a b> value )
          "Set<$+>"   '( &obj value Return Set obj["data"]<$+> value )
          "$"     '( obj Return $obj["data"] )
          "Set$"  '( &obj value Return Set $obj["data"] value )
          "^"     '( obj Return ^obj["data"] )
          "Set^"  '( &obj value Return Set ^obj["data"] value )
      "data" &arg
  
  > Set t TextObject "hello"
  > IsText t
  true
  > t<Thru 3 $>
  "llo"
  > Set t<1> "H"
  > t
  "Hello"
  > Set t<$+> " there"
  > t
  "Hello there"
  > $t
  11
  > Set $t $t+1
  > Set t<$> "."
  > t
  "Hello there.
  > Set ^t 7
  > t<Thru ^ $>
  "there."


==========================================================================
             Qualifiers are distributive over enumerations
==========================================================================

The qualifiers %, @, ?, !, &, $ and ^ are now distributive over
enumerations.  For example:

  > Set a { Thru 1 5 }
  > a[]
  1 2 3 4 5
  > Set %a[] Thru 5 1 -1
  > %a[]
  5 4 3 2 1

  > Set planet {"mars" "earth" "jupiter"}
  > $planet[]
  4 5 7
  > planet[ Max |"index"| $planet[] ]   # Longest planet name
  "jupiter"


==========================================================================
                            Record, Object
==========================================================================

Record and Object definitions now allow code after the last field.  The
code uses the variable named "self" to refer to the record or object
created by the definition.


==========================================================================
                               Sleep
==========================================================================

Sleep now uses select or poll if possible so that the sleep time is
resolved to the highest possible resolution.


==========================================================================
                               Splice
==========================================================================

Splice now takes "begin" and "end" options for convenience in splicing
a specified sequence to the beginning or end.  For example:

  > Set a { "The" "fox" "jumped" }
  > Splice |"begin" "`"| |" "| |"end" ".'"| a[]
  "`The fox jumped.'"


==========================================================================
                              System tag
==========================================================================

The "flag" field of the system tag has been removed.


==========================================================================
                               Bug Fixes
==========================================================================

QuoteChar
--------------------------------------------------------------------------
    Octal chars are always made 3 digits to avoid ambiguity.  Used by PP.

Layout
--------------------------------------------------------------------------
    Multiple calculators in superfield gave wrong subfield size.

    Fixed bug in quoting of metacharacters <, ~, >, [, and &.

    \ in layout spec now deleted only when it quotes a Layout metachar.

    \[...\] was treated as quoted superfield; should have been interpreted
    as quoted square brackets.

Chron
--------------------------------------------------------------------------
    Doesn't require space between time and meridiem (e.g., 7pm)

    Gave wrong result when given only time such as "8:16:26" with meridiem.

    Shift between daylight savings and standard time gave wrong result.

    Did not set status false when given illegal time or date.

DirName
--------------------------------------------------------------------------
    Failed when given "/" or "/dir".

|"sep"| for Find
--------------------------------------------------------------------------
    Find |chunk| |"sep"| failed for certain chunk sizes.

|"tag"| for Give
--------------------------------------------------------------------------
    Fixed (Give |"tag"| obj) so it would reset object tags to nil.

Change
--------------------------------------------------------------------------
    (Change a b &n) crashed if n was not a sequence.  Likewise
    (Translit a b n) did not produce correct answer.

Splice
--------------------------------------------------------------------------
    Fixed Splice |"\0"| bug.

Options, GetOption
--------------------------------------------------------------------------
    Options and GetOption aborted if used in command mode.

Cut
--------------------------------------------------------------------------
    (Cut |1| "^" s) left the cue of s at 2 instead of 1

    Cut on length failed with pipes.

Access
--------------------------------------------------------------------------
    Access function failed when given more than one option.

-O fit option
--------------------------------------------------------------------------
    Fixed initialization bug when -O option was given to fit command.

Permanent argument
--------------------------------------------------------------------------
    If a function argument was redefined as a permanent, fit crashed.

Thru
--------------------------------------------------------------------------
    Return Thru a b was not returned properly.

Give
--------------------------------------------------------------------------
    Fixed bug which allowed Give or a *'& to work on a function argument.

Interpreter prompt
--------------------------------------------------------------------------
    Fixed the fit prompt level.

Evaluate
--------------------------------------------------------------------------
    Evaluate crashed on (Evaluate |"top"|).

N (Next line)
--------------------------------------------------------------------------
    If N was applied to a function containing Evaluate, the program did
    not stop at the next line.

Either
--------------------------------------------------------------------------
    Either failed when given () or some other void for first argument.
    Also certain enumerated predicate tests worked incorrectly.

|"sep"| for Change, Cut, Delete, Find, Match
--------------------------------------------------------------------------
    The |"sep"| option failed if the regular expression contained a $.

Macro
--------------------------------------------------------------------------
    Space at end of Macro is now removed (messed up infix operations).

E
--------------------------------------------------------------------------
    Calling E or Trace from a variable initializer caused a dump.
