PC emacs is proprietary software of AT&T.  You may make copies for
personal use (nothing on the disk is copy protected), however you
must return all copies if you terminate your employment with AT&T. 
The AT&T legal staff is very anxious to preserve our rights to this
software and to other software packages that are proprietary to AT&T
and I have been informed that they will take steps to identify and
prosecute anyone responsible for illicit release of AT&T software.

Welcome to emacs for the ibm pc.  You should have the following files:

emacs.com:	Emacs object file
ecomp.com:	Macro compiler object file
setup.com:	Path name setup procedure
edefs.dat:	Data file for macro compiler
readme:		This explaination
error.blk,help.blk:	Error and help message files
dired		A macro package directory editor

If you have not already done so, please move these files to your
PC.  All of the files except for this one (readme) should be
transferred to your PC as binary data.  (i.e. without
mapping from unix to DOS conventions for end of line).

Hardware requirements:  Emacs will run on AT&T and IBM PC's and most
compatibles.  As distributed, it requires 128K of user memory (after
memory for DOS, RAM disks, and memory resident utilities), and will
work with either color or monochrome displays.  A RAM disk or fast
hard disk as drive c: is preferred, but it will run on a floppy only
system if set up properly.

This version of emacs will also run as a DOS program under
windows.  If you are running windows, though, there is another
emacs binary available that will use the mouse for pointing.

The first thing you will need to do is set up your installation of
PC emacs.  Emacs sometimes requires access to three data files
(edefs.dat, help.blk, and error.blk) while running.  To set up emacs,
first decide where you would like to keep the data files.  They can
be in any directory on any disk.  If you decide to put them in a
directory, create it.  After deciding where to put them, run the
setup program. You can run the setup program either by putting the
distribution disk in the 'A' drive, typing "a:<return>" to DOS, and
then running "setup", or by moving setup.com, emacs,com, and
ecomp.com to the directory where you normally keep executable files,
making that the current directory, and then running setup.  Setup
will ask you for a path name for the emacs library and for
temporary files.  When it asks for the library, give the place you
want to put the library files.  You should specify either a disk
letter followed by a colon, or a full path in either MS-DOS or UNIX
style (using '/' instead of '\').

Here are some examples:

a:		The current directory on drive a
c:/emacs/	The emacs directory on drive c
b:\data\	The data directory on drive B.

Note that you must supply the trailing '/' or '\' if you put the
files in a directory.

When it asks you for a temporary file path, supply a path like above
where you want emacs to keep the temporary files it uses while
editing.  emacs will run much faster if this is on a hard disk or a
ram disk.  The same conventions apply as above.

NOTE:  You must supply answers for both setup paths.  If you hit
return in response to a question, it will be taken as an empty path
not the current path, and emacs will look for the emacs library or
temporary files in the current directory.

When the setup program returns, the object files emacs.com and
ecomp.com have been updated to reflect your selections.  You should
next move the three data files, edefs.dat, help.blk, and error.blk,
into the place you have chosen.  The macro file "dired" should also
be placed there if you intend to use it so that you can invoke it
directly with M-xdired.  To test that everything is working
properly, run emacs, type escape-? escape-?.  This should cause a
help message to be printed.  If emacs does not come up or gives
giberrish in response to this test, you probably haven't got it set
up properly.  If emacs will not come up or gives errors before doing
so, chances are very good that you have the temporary file path
wrong.  If you get giberish or errors in response to escape-?, you
have the library directory wrong.

When you are satisfied that everything is OK, you can move the two
object files (ecomp.com and emacs.com) to any place that is
convenient.

Most of what you have come to know about emacs will work as you
expect here, with the exception of operating system dependent
commands, like M-!, M-$, environment variable expansion, etc  (See
section 9 for specifics on this).  Files
can be read or written with DOS file names.  (x:foo.bar, or
foo/bar.c).  (Note that emacs will accept either '/' or '\' to
indicate directories.

Here are some of the differences you might encounter:

1)	You can have a startup file, like .emacs_init, by putting
	emacs commands in a file called "emacs.ini"  Emacs looks for
	this file in the current directory, and in the library
	directory you specified in setup.
	
2)	Emacs uses disk files to hold large buffers and buffers not
	in use.  As distributed, these are put on the C drive,
	however they can be moved by setup.  Emacs will run much
	faster if the temporary files are not on a floppy.  Emacs
	will not come up properly if this is not set up properly. 
	Depending on the model of your PC and the version of DOS,
	it may display nothing at all, print error messages, or just
	do nothing.

	You can change the location of the temp file directory in
	two ways:  You can set the environment variable $TMP to
	the pathname of the directory you want emacs to use, or
	you can use the M-t command to change the temporary
	directory after emacs is running.  This command will
	prompt you for a drive letter and change the temp files to
	there.  Thus typing "<escape> t a: <newline> will change
	the location of the temp files to drive a. (Note, however,
	emacs will need to be able to access the path specified in
	setup before it can start up and read this command, even
	if you put it in your initialization file.)

	One use for the M-t command is to edit huge files that
	require lots of temporary space without changing your
	default drive assignments.  On a two floppy system,
	for example, you can load emacs, and then put the floppy
	with the files you want to edit in one drive and an blank
	formatted floppy in the other and use M-t to assign the
	temporary files to the blank disk.  If you do use M-t,
	please note that you cannot return to any buffer created
	before you use the command, so use it only as the first
	command you give.
	
3)	file size limits are smaller here.  By default, you are
	limited to only 8192 bytes in the kill stack before it wraps
	around, clobbering previous entries.  This can be raised by
	setting "kill_space" mode.

	In addition, you may find yourself running out of disk space
	for temporary files. If you run out of temporary file space, you
	will get the message:

	"You are out of temporary space, type 'y' to get to DOS to clean up
	or 'n' to ignore"

	This is a non-fatal error message, but it means that you
	have no more temporary file space for editing and you must do
	something to clean up or risk damage to your files.

	If you respond 'y', emacs will run a DOS command interpreter.  You
	can then look at the files you have and see if you can delete
	something to make more room.  When you have finished, type
	"exit" to DOS to return to emacs.  Make sure that you leave
	the current disk and working directory the same when you
	return to emacs as they were when you got the DOS prompt. 
	You can delete any files except for those with the names
	beginning "EMT".  Removing or moving one of the 
	EMT files may cause you to lose what you are editing.

	If you respond 'n', emacs ignores the error. YOU WILL LOSE
	INFORMATION AND SHOULD NOT TRY TO SAVE THE BUFFER YOU ARE
	WORKING IN!!!!  

	As with other errors, you can respond with '^Z' and exit
	emacs immediately.  Note that due to the crude error
	handling, you may also get this message if there is some
	other problem with the disk on which you are writing the
	temporary files.

4)	File error messages are crude.  You may well get a strange
	error message when attempting to access a non-existant file.
	If you do not keep the error message file "error.blk" on
	the a or b disks, then you will get the message "Can't
	access error file for error X" for all errors.
	
5)	By default, you read and write files using cpm conventions,
	which use a carriage return at the end of each line and a ^Z
	at the end of the file.  If you intend to edit non-ascii
	data, such as emacs macros, you should set "binary" mode,
	which does raw reads and writes.
	
6)	Emacs exploits the extra keys on the pc.  The following
	describes the extra functions:

	ALT:	This key acts like a "meta" key for the alphabetic
		and numeric keys.  Thus to go forward 67 words, hold
		down alt, and type 67 followed by 'f'.  Note that
		due to some strangeness known only to the designers
		of the PC, ALT does not work in combination with
		shift to give you shifted meta keys, nor does it
		work on the special symbols.
		
	Arrow keys:  Map to emacs equivalent.  when used with
		control, left and right arrows map to beginning and
		end of line.
	
	home,end: beginning and end of buffer.

	Page up and page down: obvious.
	
	Function keys:	F1: help
			F2: display modes.
			F3: querry replace
			F4: delete word.
			F5,F6: Goto line, quit.
			F7,F8, Forward and reverse search.
			F9,F10: Write and save.
			
	If in doubt use help to find out what a key does.  
	
	Be carefull not to hit ALT with one of the arrow keys.  Due
	to a bug in the ROM, this will produce a pseudo-random
	control key when you take your finger off of ALT.

	If you are adventurous and have a technical manual you can
	change the mapping by using the command ^X:.  ^X: 
	prompts for an emacs command, and assigns that command to
	the special key whose code is 16 (decimal) more than the
	argument to ^X:.  
	
7)	Macros appear to work fine, so long as they don't use unix
	commands that won't work and so long as the file names have
	been suitably changed.  Files full of macro commands must be
	read and written using binary mode.  The ^X^L command does
	this automatically while the macro is loaded.  
	I have transported some of the commonly used ones (i.e. the
	ones I use), into files with names of the form foo.emx. 

	The macro compiler is now available on the pc.  ecomp.com is
	the file, and edefs.dat is a data file for it.  To compile
	macros, simply create or move the macro file into a file
	with name with a ".e" suffix, and invoke ecomp on it.  ecomp
	will leave the compiled macro in a file with the same name
	and no suffix.  Note that the macro source is a normal ascii
	file, and the macro object is a binary file (unix file
	conventions).  The macro compiler is a new addition in 4.9,
	and may have bugs.

	Macros compiled on unix can also be run on the PC, without
	recompilation, since "compiled" macros do not contain
	machine instructions, but merely low level instructions to
	emacs.  Compiled macros must be transported as binary
	images, not ascii text, as they observe unix file
	conventions.  Macro source should be transferred as ASCII,
	however you will have trouble with macro source that contains
	literal characters of ^Z, ^J, or ^M.  Use backslash followed
	by an octal bit pattern instead.

	Transporting macros is somewhat awkward, since they contain
	8 bit codes and control characters that are not passed
	correctly by some file transfer programs.  Either get a file
	transfer with a binary mode, or use a program that
	converts a file to hex format,
	using 2 bytes for one and inserting newlines periodically to
	keep the file line lengths short.  The resulting file can
	then be transferred to the PC by any convenient means, and
	run through an unhex utility.  I have used a simple program
	that reads it's standard input and writes into a file
	specified by a command line argument that serves this purpose.
	
8)	Response to some commands, such as floppy disk I/O, may be
	somewhat slower than on the big machines.  Be patient.

9)	Unix related commands that work differently on the PC:
	Some commands are operating system dependent and work
	differently.  Specifically:

	M-E (and expansion of names containing "$")  This will work
		on the PC using the MSDOS environment.

	Expansion of names containing '*', '~', '?' or '`'  These
		characters have no special meaning in PC emacs and are
		not expanded.  Expansion of file names with * or ?
		is under consideration.

	M-!, M-$  These will work on the PC with some differences. 
		First, your PC must have enough memory to hold
		emacs, command.com, and the program to be run.  If
		not, errors may result.  Second, output to a buffer
		(M-$) and input from a buffer (^UM-!) can be done,
		however they are done using a temporary file in the
		same location as the emacs temporary files, and you
		must have enough space to hold all the command
		output or the whole buffer.  Output from the command
		run via M-$ will not appear on the screen under any
		circumstances, since it is not available to emacs
		until after the command has finished.  Input and
		output from emacs are done via re-direction, and
		some commands that write directly to the screen or
		read the keyboard directly (like pc emacs) cannot be
		redirected this way.
		
		Emacs will use $COMSPEC to find the command
		interpreter, and command.com otherwise.
		
	^X^D	Will work, but can't change the current disk.  Note
		that DOS seems to maintain only one current
		directory and disk for all programs running, so
		changing directory from emacs will change it for
		other things you run as well, and changing disk or
		directory from a command run from emacs (e.g. M-!c:)
		will change it for emacs.
		
	M-^M, time and mail displays -> Not available.

	Dired -> The dired program has not been ported to the PC,
	however a macro package for dired has been provided.  The
	package can be invoked  by M-x dired, and displays a listing
	of the current directory.  You can use any emacs commands
	you wish.  The following single character commands are also
	available:
	
		'e'	(in a directory buffer) Edit the file or
			directory on that line.
		'd','^D'(in a directory buffer) Mark the file or
			directory on that line for deletion.
		'u'	(in a directory buffer) Remove the deletion
			mark from that file or directory.
		'?'	(in a directory buffer) show help information
		'^Z'	exit the current file or directory, if it's
			a directory, remove all files marked for
			deletion.
	
			
10)	Commands and features unique to the PC implementation:

	M-t	Set temporary file disk.  This command prompts you
		for the name of a disk to put temporary files on. 
		Any drive can be used, but for performance, you
		should have either a RAM disk or a hard disk.
		Note that after giving M-t, you will not be able
		to access buffers created before you changed the
		temp directory, so use it only as the first
		command in a session.

	^X:	Map key.  This command asks you to type an emacs
		command (either a single key or an escape or
		control-x sequence), and maps it to a function key. 
		The command is mapped to the key whose code (as
		indicated in the DOS manual description of keyboard
		handling) is the argument to ^X: plus 16 (Decimal). 
		This is provided for the sophisticated user to
		re-map the function keys, and requires considerable
		knowledge to work with properly.
		
	$TMP environment variable.  Setting $TMP in the
	environment to the name of a directory (drive:directory)
	causes emacs to place its temporary files in that
	directory.  This can be useful for running emacs in
	multiple windows on a windows based system.
	
	attrib mode:	This is an integer mode that sets the video
			attribute to be used on text displays.  On
			color displays, this sets the character and
			background colors, while on monochrome
			displays it sets display characteristics
			(inverse video, blink, bright, etc.)  The
			exact interpretation depends on what kind of
			display card you have, and you may wish to
			experiment with settings.
			
	kill_space mode:  This is an integer mode that determines
			how much text will be saved in the kill
			buffer before the buffer wraps around,
			destroying previous entries.  The amount of
			text saved is 1024 times the value of the
			mode.  The default setting is 8, resulting
			in 8K of saved text.  If you have sufficient
			disk space and want to save, say, 64K, type
			escape-64^X^Mkill_space to increase it. 
			Note that you will get space errors if you
			do not have sufficient disk space to hold
			this and the contents of the buffers you are
			editing.

	screen size:  By default, emacs uses 24X80 as the screen size
			if you have a bigger screen, you can get
			emacs to use it by setting height and
			width modes to reflect the display size.
			height should be set to 4 less than the
			real display height, and width to 1 less
			than the width of the display.
