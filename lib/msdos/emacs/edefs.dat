(extern DCL)
(local LOCAL)
(global GLOBAL #)
(global-string SGLOBAL ±2&#)
(global-string= SGLOBAL ≤#±1&)
(set-global UNARY ≤#)
(get-global SIMPLE #)
(string-to-pointer STRING ±1&)
(pointer-to-string $SIMPLE ±2&)
(local-string SDCL)
(return SIMPLE )
(top-killstack $SIMPLE )
(start-of-line SIMPLE )
(back SIMPLE )
(capitalize-character SIMPLE )
(delete-forward $SIMPLE )
(end-of-line SIMPLE )
(forward SIMPLE )
(beep SIMPLE )
(delete-back $SIMPLE )
(newline SIMPLE \012)
(kill-line $SIMPLE )
(refresh SIMPLE )
(down SIMPLE )
(open-line SIMPLE )
(up SIMPLE )
(insert INSERT )
(reverse-search STRING )
(search STRING )
(transpose SIMPLE )
(next-page SIMPLE )
(kill-region $SIMPLE )
(restore STRING )
(exit SIMPLE )
(arg NUMBER )
(invocation-char NUMBER ∞)
(1 NUMBER )
(last NUMBER )
(delete-last-word $SIMPLE à)
(redisplay-page SIMPLE å)
(mail SIMPLE ç)
(literal QUOTE ë)
(quote QUOTE )
(meta-quote QUOTE Ò)
(tab SIMPLE \011)
(repeat-character CHAR )
(regular-replace MAP í)
(ed-regular-replace MAP í)
(regular-search STRING ì)
(regular-match STRING ∞ì)
(execute SIMPLE ò)
(call-macro STRING ÿ)
(arg= UNARY ù)
(invocation-char= UNARY ∞ù)
(mark SIMPLE †)
(run-command STRING °)
(buffer-to-command STRING °)
(command-to-buffer STRING §)
(sub-process STRING ∞§)
(fill-buffer SIMPLE ¢)
(fill-region SIMPLE ¢)
(comment SIMPLE Ø)
(map-keys MAP ∫)
(assign-key-to-macro MAP ∫)
(map-prefix-key MAP ≠∫)
(top SIMPLE º)
(bottom SIMPLE æ)
(help UNARY ø) /wont work/
(expand-environment $STRING ≈)
(expand-shell $STRING ∞≈)
(insert-ascii SIMPLE ‹)
(underline-word SIMPLE ﬂ)
(start-of-sentence SIMPLE ·)
(back-word SIMPLE ‚)
(capitalize-word SIMPLE „)
(delete-next-word $SIMPLE ‰)
(end-of-sentence SIMPLE Â)
(forward-word SIMPLE Ê)
(goto-line SIMPLE Á)
(lowercase SIMPLE Ï)
(show-modes SIMPLE Ì)
(get-all-modes SIMPLE ≤Ì)
(pickup-region $SIMPLE )
(replace MAP Ú)
(ed-replace MAP Ú)
(statistics SIMPLE Û)
(set-terminal-type STRING Ù)
(back-page SIMPLE ˆ)
(wallchart SIMPLE ˜)
(backspace-killstack SIMPLE ˘)
(coredump STRING ˙)
(sequence BEGIN ˚)
(unmodify SIMPLE ˛)
(buffer-modified SIMPLE ≠˛)
(next-argument $SIMPLE )
(change-buffer STRING )
(exit-emacs SIMPLE )
(change-directory STRING )
(recursive-edit SIMPLE )
(interpret-character SIMPLE )
(simulate STRING ∞)
(edit-file STRING )
(interrupt-process SIMPLE )
(input-file STRING \011)
(kill-buffer STRING )
(set-mode STRING )
(get-mode STRING ≠Ì)
(change-file-name STRING )
(change-buffer-name STRING )
(change-editor-name STRING ∞)
(other-window SIMPLE )
(current-character SIMPLE )
(current-char-type SIMPLE ≤)
(current-transition SIMPLE ≥)
(read-file STRING )
(insert-file STRING )
(save-buffer SIMPLE )
(send-region-to-buffer STRING )
(update-display SIMPLE ∞)
(pause SIMPLE )
(get-version $SIMPLE )
(get-editor-name $SIMPLE ≤)
(get-terminal-name $SIMPLE ≤)
(write-file STRING )
(append-file STRING )
(exchange-mark SIMPLE )
(grow-window SIMPLE )
(case CASE )
(exchange-killstack SIMPLE %)
(string-<= STRING µ&)
(string-== STRING &)
(string-< STRING ≥&)
(string-> STRING ≤&)
(string-!= STRING ¥&)
(string->= STRING ∞&)
(start-keyboard-macro SIMPLE \050)
(end-keyboard-macro SIMPLE \051)
(append-to-killstack SIMPLE +)
(pop-killstack $SIMPLE -)
(one-window SIMPLE 1)
(two-window STRING 2)
(copy-killstack STRING @)
(display-killstack STRING ∞@)
(read-character-killstack STRING ≠@)
(output-raw-killstack STRING ≥@)
(read-line-killstack $STRING ≤@)
(push $SSTRING <)
(Lpush $STRING @)
(display-prompt SSTRING ∞<)
(Ldisplay-prompt STRING ∞@)
(read-character SSTRING ≠<)
(Lread-character STRING ≠@)
(output-raw-characters SSTRING ≥<)
(Loutput-raw-characters STRING ≥@)
(read-line $SSTRING ≤<)
(Lread-line $STRING ≤@)
(file-line SIMPLE ∞=)
(file-character SIMPLE =)
(screen-line SIMPLE ≤=)
(screen-character SIMPLE ≥=)
(first-visible-line SIMPLE ¥=)
(last-visible-line SIMPLE µ=)
(window-top SIMPLE ∂=)
(window-bottom SIMPLE ∑=)
(macro-space SIMPLE ∏=)
(file-num-lines SIMPLE π=)
(process-id SIMPLE ±0=)
(buffer-position SIMPLE ±1=)
(buffer-size SIMPLE ±2=)
(duplicate-killstack $SIMPLE >)
(stack-buffer $SIMPLE B)
(stack-active-buffers $SIMPLE B)
(stack-next-buffer $SIMPLE ∞B)
(execute-keyboard-macro SIMPLE E)
(stack-filename $SIMPLE F)
(trace UNARY T)
(trace-buffer UNARY ∞T)
(while WHILE ^)
(define-macro SIMPLE d)
(load-macro STRING )
(load-character-tables STRING ')
(save-image STRING ∞')
(load-image STRING ≤')
(goto-screen SIMPLE g)
(set-key STRING k)
(get-key $SIMPLE k)
(get-search-string $SIMPLE ≤0&)
(set-search-string STRING ≤1&)
(get-replace-string $SIMPLE ≤2&)
(set-replace-string STRING ≤3&)
(cond COND |)
(<= BINARY ∞~)
(== BINARY ~)
(< BINARY ≤~)
(> BINARY ≥~)
(!= BINARY ¥~)
(>= BINARY µ~)
(|| BINARY ∂~)
(&& BINARY ∑~)
(not UNARY ∏~)
(false SIMPLE π~)
(true SIMPLE \040)
(else SIMPLE \040)
(+ BINARY ±1~)
(- BINARY ±2~)
(* BINARY ±3~)
(/ BINARY ±4~)
(& BINARY ±8~)
(| BINARY ±9~)
(^ BINARY ≤0~)
(% BINARY ±5~)
(mod BINARY ±5~)
(convert-to-string $UNARY ±6~)
(convert-to-number STRING ±7~)
(unget-character UNARY ≤1~)
(input-count SIMPLE ≤2~)
(undo SIMPLE ı)
(start-undo SIMPLE ≤3~)
(end-undo UNARY ≤4~)
(append-strings $STRING ∑&)
(string-index STRING ∏&)
(read-process $SIMPLE ±9&)
(send-process STRING ±8&)
(wait-process SIMPLE ±7&)
(string-reverse-index STRING ±6&)
(substring $BINARY π&)
(string-length STRING ±0&)
(format $STRING ±3&)
(parse $STRING ≤4&)
(char-to-string $UNARY ±4&)
(string-to-char STRING ±5&)
(display-menu STRING $)
(xor-region SIMPLE ∞å)
