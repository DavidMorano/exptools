


     CCCCCCCCAAAALLLLLLLLSSSS((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            CCCCCCCCAAAALLLLLLLLSSSS((((1111))))



     NNNNAAAAMMMMEEEE
          ccalls -- extract 'C' function calls, function parameters,
          and #includes from cscope(1) file

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          ccccccccaaaallllllllssss [-d|f|g|I|l|p|P|S|t] [-s] [-F char] [cscope.out_file]


     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          _c_c_a_l_l_s extracts function call, parameter, #include and other
          information from the file produced when the tool _c_s_c_o_p_e was
          executed.

          _c_c_a_l_l_s is useful for formatting function call and parameter
          data for use by the tree drawing program _d_t.

          If no file is specified on the command line, _c_c_a_l_l_s defaults
          to using the file _c_s_c_o_p_e._o_u_t in the current directory.


          ----dddd        Write to standard output the name of each file and
                    the #defines it contains, e.g.:


                    init.c MAXLEN
                    init.c NULL
                    wrap.c BUFSIZE
9

          ----ffff        Write to standard output the source file name,
                    function name, and starting and ending line
                    numbers for each function.


          ----FFFF_c_h_a_r    Use _c_h_a_r as output field separator character.  If
                    -_F is not specified, a space is used as the
                    default.


          ----gggg        Write to standard output the name of each file and
                    global variable defined in that file.  The format
                    of each line will be:

                                   filename.c variable


          ----IIII        Output source file names and the source files they
                    #include.  _c_c_a_l_l_s writes this information to stan-
                    dard output, one set per line, in the form:

                                      file.c file.h
9


     Page 1                                           (printed 7/7/92)






     CCCCCCCCAAAALLLLLLLLSSSS((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            CCCCCCCCAAAALLLLLLLLSSSS((((1111))))



                    meaning that source file _f_i_l_e._c contains the C
                    preprocessor ####iiiinnnncccclllluuuuddddeeee directive to include file
                    _f_i_l_e._h. _c_c_a_l_l_s does not recognize the difference
                    between these two statements:

                                    #include "file.h"
                                           and
                                    #include <file.h>


          ----llll        Write to standard output the name of each func-
                    tions and local variable defined in that function.
                    The format of each line will be:

                                  functionname variable


          ----PPPP        Write to standard output pairs of function names
                    and calling parameters.


          ----pppp        Output function names and parameters.  _c_c_a_l_l_s
                    writes function names and parameters to standard
                    output, one set per line, in the form:

                                 fcn fcn(arg1,arg2,arg3)

                    meaning that function _f_c_n accepts the arguments
                    _a_r_g_1, _a_r_g_2, and _a_r_g_3.

                    To avoid possible conflict with the field separa-
                    tor character, no spaces will be printed between
                    the comma separated arguments.

                    Without the -_p argument, _c_c_a_l_l_s writes function
                    pairs to standard output, one pair per line, in
                    the form:

                                          f1 f2

                    meaning that function _f_1 calls function _f_2.

                    Regardless of whether or not -_p is specified, each
                    field is separated by field separator character
                    (see -_F option).


          ----SSSS        Write to standard output structure names and ele-
                    ments.


          ----ssss        Skip calls to these UNIX system calls and



     Page 2                                           (printed 7/7/92)






     CCCCCCCCAAAALLLLLLLLSSSS((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            CCCCCCCCAAAALLLLLLLLSSSS((((1111))))



                    subroutines:

                    _exit, _tolower, _toupper, a64l, abort, abs,
                    access, acct, acos, advfs, alarm, asctime, asin,
                    assert, atan, atan2, atof, atoi, atol, brk,
                    bsearch, calloc, ceil, chdir, chmod, chown,
                    chroot, clearerr, clock, close, cos, cosh, creat,
                    crypt, ctermid, ctime, curses, cuserid, ddim,
                    dial, dim, dkbreak, dkdial, dkenviron, dkeof,
                    dkerr, dkmgr, dkminor, dknamer, dksplice,
                    dkxstdio, dprod, drand48, dup, ecvt, edata,
                    encrypt, end, endgrent, endpwent, endutent,
                    erand48, erf, erfc, errno, etext, execl, execle,
                    execlp, execv, execve, execvp, exit, exp, fabs,
                    fclose, fcntl, fcvt, fdopen, feof, ferror, fflush,
                    fgetc, fgetgrent, fgetpwent, fgets, fileno, floor,
                    fmod, fopen, fork, fprintf, fputc, fputs, fread,
                    free, freopen, frexp, fscanf, fseek, fstat,
                    fstatfs, ftell, ftok, ftw, fwrite, gamma, gcvt,
                    getc, getchar, getcwd, getdents, getegid, getenv,
                    geteuid, getgid, getgrent, getgrgid, getgrnam,
                    getlogin, getmsg, getopt, getpass, getpgrp, get-
                    pid, getppid, getpw, getpwent, getpwnam, getpwuid,
                    gets, getuid, getutent, getutid, getutline, getw,
                    gmtime, gsignal, hcreate, hdestroy, hsearch,
                    hypot, iargc, idim, ioctl, irand, isalnum, isal-
                    pha, isascii, isatty, iscntrl, isdigit, isgraph,
                    islower, isprint, ispunct, isspace, isupper, isx-
                    digit, j0, j1, jn, jrand48, kill, l3tol, l64a,
                    lcong48, ldaclose, ldahread, ldaopen, ldclose,
                    ldexp, ldfhread, ldgetname, ldlinit, ldlitem,
                    ldlread, ldlseek, ldnlseek, ldnrseek, ldnshread,
                    ldnsseek, ldohseek, ldopen, ldrseek, ldshread,
                    ldsseek, ldtbindex, ldtbread, ldtbseek, lfind,
                    lge, lgt, link, lle, llt, localtime, lockf, log,
                    log10, logname, longjmp, lrand48, lsearch, lseek,
                    ltol3, mallinfo, malloc, mallopt, maphost, math-
                    err, memccpy, memchr, memcmp, memcpy, memset,
                    mkdir, mknod, mktemp, modf, monitor, mount,
                    mrand48, msgctl, msgget, nice, nlist, nrand48,
                    open, pause, pclose, perror, pipe, plock, plot,
                    popen, pow, ppremote, printf, profil, ptrace,
                    putc, putchar, putenv, putmsg, putpwent, puts,
                    pututline, putw, qsort, rand, read, realloc,
                    regcmp, regex, rewind, rexecl, rexecv, rfstart,
                    rmdir, sbrk, scanf, seed48, semctl, semget, semop,
                    setbuf, setgid, setgrent, setjmp, setkey, setpgrp,
                    setpwent, setuid, setutent, setvbuf, sgetl,
                    shmctl, shmget, sighold, sigignore, signal, sig-
                    pause, sigrelse, sigset, sin, sinh, sleep,
                    sprintf, sputl, sqrt, srand, srand48, sscanf,
                    ssignal, stat, statfs, stdio, stdipc, stime,



     Page 3                                           (printed 7/7/92)






     CCCCCCCCAAAALLLLLLLLSSSS((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            CCCCCCCCAAAALLLLLLLLSSSS((((1111))))



                    strcat, strchr, strcmp, strcpy, strcspn, strlen,
                    strncat, strncmp, strncpy, strpbrk, strrchr,
                    strspn, strtod, strtok, strtol, swab, sync,
                    sys_errlist, sys_nerr, sysfs, system, t_accept,
                    t_alloc, t_bind, t_close, t_connect, t_error,
                    t_free, t_getinfo, t_getstate, t_listen, t_look,
                    t_open, t_optmgmt, t_rcv, t_rcvconnect, t_rcvdis,
                    t_rcvrel, t_rcvudata, t_rcvuderr, t_snd, t_snddis,
                    t_sndrel, t_sndudata, t_sync, t_unbind, tan, tanh,
                    tdelete, tempnam, tfind, time, times, tmpfile,
                    tmpnam, toascii, tolower, toupper, tsearch,
                    ttyname, ttyslot, twalk, tzset, ulimit, umask,
                    umount, uname, undial, ungetc, unlink, ustat,
                    utime, utmpname, vfprintf, vprintf, vsprintf,
                    wait, write, y0, y1, and yn.

                    If -_s is not specified, calls to UNIX system calls
                    and subroutines will be treated the same as other
                    function calls and displayed on standard output.


          ----tttt        Write to standard output file names and typedef
                    names.


     EEEEXXXXAAAAMMMMPPPPLLLLEEEESSSS::::
          Upcoming examples make use of the following _C program, in
          file.c:

          main(argv, argc)
          char *argv[];
          int argc;
          {
               int x;

               x = calculate(12, 5);
               printf("x is: %d", x);
          }

          int calculate(a, b)
          int a;
          int b;
          {
               int sum;

               sum = square(a) + square(b);
               return(sum);
          }

          int square(n)
          int n;
          {



     Page 4                                           (printed 7/7/92)






     CCCCCCCCAAAALLLLLLLLSSSS((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            CCCCCCCCAAAALLLLLLLLSSSS((((1111))))



               return(n * n);
          }


          _c_c_a_l_l_s, without any arguments, produces these lines:

          main calculate
          main printf
          calculate square

                                   ccalls -F:

          produces these lines:

          main:calculate
          main:printf
          calculate:square

                                 ccalls -F: -p

          produces these lines:

          main:main(argv,argc)
          calculate:calculate(a,b)
          square:square(n)

                                   ccalls -f

          produces these lines:

          file.c main 1 9
          file.c calculate 11 19
          file.c square 21 25


     EEEEXXXXAAAAMMMMPPPPLLLLEEEE::::
          To produce a structure chart of C function calls, one may
          execute:

          cscope  -b file1.c file2.c ...
          ccalls | dt

          Where a large number of functions are involved, eliminating
          duplicate data may speed execution of the chart drawing:

          cscope  -b file1.c file2.c ...
          ccalls | sort -u | dt

          To produce a structure chart of C function calls, including
          parameters, one may execute:

          cscope  -b file1.c file2.c ...



     Page 5                                           (printed 7/7/92)






     CCCCCCCCAAAALLLLLLLLSSSS((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            CCCCCCCCAAAALLLLLLLLSSSS((((1111))))



          ccalls -p > fcn.parameters
          ccalls | dt -x fcn.parameters


     EEEEXXXXIIIITTTT CCCCOOOODDDDEEEESSSS
          0 for no errors; 1 for any error.


     DDDDIIIIAAAAGGGGNNNNOOOOSSSSTTTTIIIICCCCSSSS
          All error messages are written to standard error and are
          intended to be self-explanatory.


     WWWWAAAARRRRNNNNIIIINNNNGGGGSSSS
          _c_c_a_l_l_s prints function parameters from the called function
          point of view, rather than that of the caller function.


     AAAAUUUUTTTTHHHHOOOORRRR
          The _c_c_a_l_l_s tool was written by John Puttress and Bob Par-
          nass.  Joe Steffen made modifications.


     PPPPRRRROOOOVVVVIIIIDDDDEEEERRRR
          The _c_c_a_l_l_s tool is provided by Bob Parnass.


     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          _d_t - _A _P_r_o_g_r_a_m _f_o_r _V_i_s_u_a_l_i_z_i_n_g _C_o_m_p_l_e_x _P_r_o_b_l_e_m_s _U_s_i_n_g _S_i_m_p_l_e
          _T_e_r_m_i_n_a_l_s, by R. S. Parnass, AT&T Bell Laboratories techni-
          cal memorandum 55545-880516-01TM.

          dt(1), cscope(1)






















     Page 6                                           (printed 7/7/92)




