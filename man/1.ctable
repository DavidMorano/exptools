


     CCCCTTTTAAAABBBBLLLLEEEE((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            CCCCTTTTAAAABBBBLLLLEEEE((((1111))))



     NNNNAAAAMMMMEEEE
          ctable - generate tables for 'C'

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          ccccttttaaaabbbblllleeee [cc_opts] [file.t] [...]

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          ccccttttaaaabbbblllleeee generates tables for 'C' from a template file, fil-
          ling in gaps.  It is especially useful for making tables to
          recognize inter-process messages which are specified by
          #defines.  With ccccttttaaaabbbblllleeee, the table entries can be specified
          by name, and they do not need to be in numerical order.

          CCCCttttaaaabbbblllleeee recognizes command line options from cccccccc(1) which are
          useful to it; all other arguments which begin with a dash
          (-) are ignored.  In particular, options for the C-
          preprocessor are recognized.  For every "file.t" specified,
          a "file.c" is generated in the current directory; if none
          are specified, standard input is processed and sent to stan-
          dard output.

          Source lines outside of %table-%endtable pairs are copied to
          the output verbatim except for blank lines which are
          ignored.  Non-blank lines inside of %table-%endtable pairs
          that do not begin with a percent sign (%) are table entries
          of the form "index value" for one dimensional tables and
          "index1 index2 value" for two dimensional tables.  Indexes
          can be in hex, decimal, octal, or character constants in
          single quotes.  Lines beginning with %keyword are commands.
          Command parameters are separated by any amount of white
          space; the final parameter may contain whitespace.

          Valid keywords are:

          %table n decl
               begin 1 dimensional table, size n, and use decl to
               declare the table.  If n is zero, table will be vari-
               able length.

          %table2dim dim1 dim2 decl
               begin 2 dimensional table, dimension 1 of size dim1 and
               dimension 2 of size 2, and use decl to declare the
               table.  If either dim1 or dim2 is zero, that dimension
               will be of variable length.  The declaration must con-
               tain a pointer to a table of the form "*{anything}[".

          %size decl
               declaration of a variable to store the size of the
               first dimension of the table.  This is required if the
               first dimension is variable length.

          %size2dim decl



     Page 1                                          (printed 10/3/91)






     CCCCTTTTAAAABBBBLLLLEEEE((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            CCCCTTTTAAAABBBBLLLLEEEE((((1111))))



               declaration of a table to store the sizes of the second
               dimensions of the table.  This is required if the
               second dimension is variable length.

          %base decl
               declaration of a variable to store the value of the
               smallest used index.  If %base is used, the table will
               actually begin at that smallest index and all of the
               entries will be shifted down by that value.  This elim-
               inates wasted space at the beginning of the table.  The
               %size variable will contain the size of the largest
               index, not just the size of the table; that is, %size =
               (%base + table_size).  %base is optional.

          %base2dim decl
               declaration of a table to store the bases of the second
               dimensions of the table.  Analagous to %base for the
               first dimension.  %base2dim is optional.

          %lengthtable decl
               declaration of a table to store the lengths of the ele-
               ments.  The length table has the same number of dimen-
               sions as the main table.  The length of an element is
               defined to be the string length if the element is a
               string, zero otherwise.  The declaration must contain a
               pointer to a table of the form "*{anything}[". This
               keyword is optional.

          %declare decl
               declaration to use for all identifier elements.  This
               is required if there are any identifier elements.  An
               identifier element is defined to be one which begins
               with an alphabetic character or underscore.  A percent
               sign (%) in the declaration will be replaced with the
               name of the variable being declared.

          %default element
               default element for gaps in table.  This is required if
               there are any gaps.  This will be declared with the
               %declare value if it is an identifier.

          %cast cast
               cast to put before each element.  This is optional.

          %endtable
               mark the end of a table.

          Note: strings begin and end with double quotes and may con-
          tain the normal backslash-escapes of C.  In addition,
          backslash-escapes of the form "\0xN" or "\0xNN" are recog-
          nized as hex characters.  Strings are not null-terminated;
          use the %lengthtable to determine the length of strings.



     Page 2                                          (printed 10/3/91)






     CCCCTTTTAAAABBBBLLLLEEEE((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            CCCCTTTTAAAABBBBLLLLEEEE((((1111))))



     EEEEXXXXAAAAMMMMPPPPLLLLEEEESSSS
          Here is an example of a one-dimensional table in 'oned.t':

          #include "msgdefs.h"
          %table 5    void (*Msgfunctab[])()
          %default    UnknownMsg
          %declare    extern void %()

          MSG3        ProcMsg3
          MSG1        ProcMsg1

          %endtable

          Assuming MSG1 is defined to be 1 and MSG3 is defined to be
          3, the following will be in 'oned.c':

          extern void ProcMsg3();
          extern void ProcMsg1();
          extern void UnknownMsg();
          void (*Msgfunctab[])() = {
              UnknownMsg, /* 0 */
              ProcMsg1,   /* 1 */
              UnknownMsg, /* 2 */
              ProcMsg3,   /* 3 */
              UnknownMsg, /* 4 */
          };

          Here is an example of a two-dimensional table in 'twod.t':

          #include "msgdefs.h"
          %table2dim 4 0 char **Msgtab[]
          %size2dim       char Msgsizetab[]
          %lengthtable    char *Msglentab[]
          %cast           (char *)
          %declare        extern void %()
          %default        BadMsg

          MSG1    MSG3    msg1_3
          MSG2    MSG2    "msg2_2"
          MSG1    MSG1    "msg1_1"

          %endtable

          Selections from 'twod.c": the main table:

          char **Msgtab[] = {
              0,    /* 0 */
              tb1_1,     /* 1 */
              tb1_2,     /* 2 */
              0,    /* 3 */
          };




     Page 3                                          (printed 10/3/91)






     CCCCTTTTAAAABBBBLLLLEEEE((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            CCCCTTTTAAAABBBBLLLLEEEE((((1111))))



          The secondary table 'tbl1_1' looks like this:

          static char *tb1_1[] = {
              (char *) BadMsg,     /* 0 */
              (char *) str2,  /* 1 */
              (char *) BadMsg,     /* 2 */
              (char *) msg1_3,     /* 3 */
          };

          The 'str2' is the "msg1_1" expanded out without a null-
          terminator:

          static char str2[] = {
              'm', 's', 'g', '1', '_', '1',
          };

          The 'Msgsizetab' is the size of each of the secondary
          tables:

          char Msgsizetab[] = {
              0,    /* 0 */
              4,    /* 1 */
              3,    /* 2 */
              0,    /* 3 */
          };

          The 'Msglentab' is a two-level table analagous to the
          'Msgtab' and contains string lengths for strings and 0 for
          non-strings.

     AAAAUUUUTTTTHHHHOOOORRRR////PPPPRRRROOOOVVVVIIIIDDDDEEEERRRR
          David W. Dykstra, iexist!dwd























     Page 4                                          (printed 10/3/91)



