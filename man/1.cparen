


     CCCCPPPPAAAARRRREEEENNNN((((1111))))		 UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))	     CCCCPPPPAAAARRRREEEENNNN((((1111))))



     NNNNAAAAMMMMEEEE
	  cparen - add parentheses to C	expressions

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
	  ccccppppaaaarrrreeeennnn [ ----tttt _t_y_p_e_s ]

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
	  Written for those of us who can never	remember the
	  precedence and associativity of operators in C, ccccppppaaaarrrreeeennnn reads
	  lines	of C code from standard-in, adds parentheses to
	  indicate operator binding in expressions, then writes	the
	  resultant code to standard-out.

	  The input code fragment need not contain complete
	  statements.  For example, the	following line is a valid
	  input	to ccccppppaaaarrrreeeennnn::::
	       } else if (x->d_prep > 56 && x->d_assoc == LEFT)

	  Normally, ccccppppaaaarrrreeeennnn considers identifiers in expressions	to be
	  variable names.  The ----tttt option allows	you to specify a
	  whitespace-separated list of types.  For example,
	       cparen -t 'amap anop'
	  Declares "amap" and "anop" as	type names rather than
	  variable names.

     DDDDIIIIAAAAGGGGNNNNOOOOSSSSTTTTIIIICCCCSSSS
	  Exit status is 2 if ccccppppaaaarrrreeeennnn was invoked improperly, 1 if some
	  other	error occurred,	0 if all went well.

     AAAAUUUUTTTTHHHHOOOORRRR
	  Brad Needham,	bradn

     BBBBUUUUGGGGSSSS
	  CCCCppppaaaarrrreeeennnn assumes that the input	code fragment came from	a
	  syntactically	correct	C program -- it	does not attempt to
	  give reasonable syntax-error messages.

	  Because ccccppppaaaarrrreeeennnn focuses on C statments	it does	not recognize
	  other	constructs e.g.	 variable or function declarations.

	  The input is not filtered through the	C preprocessor.

     PPPPRRRROOOOVVVVIIIIDDDDEEEERRRR
	  Tony Hansen
	  pegasus!hansen










     Page 1					     (printed 8/11/88)



