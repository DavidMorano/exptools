


     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



     NNNNAAAAMMMMEEEE
          viterm - 5620/630/730 terminal mouse interface for vi
          vi4viterm - vi editor with mouse interface to viterm

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          vvvviiiitttteeeerrrrmmmm [----wwww] [----dddd] [----LLLL] [----SSSS] [----VVVV] [----vvvv] [----FFFF _f_i_l_e]
          vvvviiii4444vvvviiiitttteeeerrrrmmmm [ options ] file ...

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          _v_i_t_e_r_m is a terminal program with downloadable menus that
          runs under _l_a_y_e_r_s(1) on the AT&T 5620, 630, and 730
          terminals.  It provides a mouse interface to programs such
          as _v_i(1) that is similar to _j_i_m(1).

        GGGGeeeettttttttiiiinnnngggg SSSSttttaaaarrrrtttteeeedddd
          You must use a copy of _v_i with the mouse interface to
          _v_i_t_e_r_m, so if _k_s_h(1) is your $$$$SSSSHHHHEEEELLLLLLLL, put this alias in your
          $$$$EEEENNNNVVVV file:

               alias vi=$TOOLS/bin/vi4viterm

          Otherwise put this shell script:

               exec $TOOLS/bin/vi4viterm $*

          in your $_H_O_M_E/_b_i_n directory with the name of _v_i, make sure
          it is executable with:

               chmod +x vi

          and verify that your $_H_O_M_E/_b_i_n appears before /_u_s_r/_b_i_n in
          your $_P_A_T_H with:

               where vi

          Create a $_H_O_M_E/._l_a_y_e_r_s startup file that contains this line:

               8 8 792 498 exec viterm

          Call _l_a_y_e_r_s from your home directory:

               layers -f .layers

          This will load _v_i_t_e_r_m in a 30-line window at the top of the
          screen.  If you would like another 30-line window at the
          bottom of the screen add this line to the ._l_a_y_e_r_s file:

               8 526 792 1016 exec viterm -w

          This will wait for _v_i_t_e_r_m to be loaded in the other window.
          You can copy the last line in the ._l_a_y_e_r_s file and change
          the coordinates to create more windows.  See _l_a_y_e_r_s(1) for a



     Page 1                                          (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



          description of the coordinates.  To call _l_a_y_e_r_s
          automatically when you login, put this at the bottom of your
          ._p_r_o_f_i_l_e:

               case $TERM in
               dmd|5620|630|730)   layers -f .layers ;;
               esac

        vvvviiii MMMMoooouuuusssseeee UUUUsssseeee
          After entering _v_i, click button 1 to move the character
          (block) cursor to where the mouse (arrow) cursor is.  To
          mark a region of text move the mouse cursor to the start of
          the region, press button 1, move the mouse cursor to the end
          of the region, and release the button.  The marked region
          will be highlighted so you can see it.  Note that if you
          want to mark a region including the end of a line, you have
          to go to the beginning of the next line.  Going to the end
          of the line leaves the cursor on the last character, so it
          is not included.

          To easily mark a word click button 1 twice.  To easily mark
          a line click button 1 three times.  Each additional click
          will add a line to the marked region.

          To delete the marked text, select DDDDeeeelllleeeetttteeee on the button 2
          menu by pressing button 2, moving the mouse cursor up or
          down until DDDDeeeelllleeeetttteeee is highlighted, and releasing the button.

          To move the marked text, select DDDDeeeelllleeeetttteeee on the button 2 menu,
          move the mouse cursor to where you want the text, click
          button 1, and select PPPPuuuutttt BBBBeeeeffffoooorrrreeee or PPPPuuuutttt AAAAfffftttteeeerrrr on the button 2
          menu.

          To copy the marked text within the same window, select YYYYaaaannnnkkkk
          on the button 2 menu, move the mouse cursor to where you
          want the text, click button 1, and select PPPPuuuutttt BBBBeeeeffffoooorrrreeee or PPPPuuuutttt
          AAAAfffftttteeeerrrr on the button 2 menu.

          To copy the marked text from another window to this window,
          move the mouse cursor to where you want the text, click
          button 1, and select SSSSeeeennnndddd BBBBeeeeffffoooorrrreeee or SSSSeeeennnndddd AAAAfffftttteeeerrrr on the button
          2 menu.  Note that tabs are changed to blanks when copied,
          and that auto indent mode is turned off during the copy.

          To shift the marked text right or left one tab stop, select
          SSSShhhhiiiifffftttt RRRRiiiigggghhhhtttt or SSSShhhhiiiifffftttt RRRRiiiigggghhhhtttt, respectively.

        SSSShhhheeeellllllll MMMMoooouuuusssseeee UUUUsssseeee
          When not in a screen program you can send the marked text to
          the current command, such as the shell, by selecting SSSSeeeennnndddd on
          the button 2 menu.  This is useful for adding file names to
          shell commands.  For example, get a list of the files in the



     Page 2                                          (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



          current directory with _l_s(1).  Then type _v_i followed by a
          space, double click button 1 on a file name, select SSSSeeeennnndddd,
          and press the _R_E_T_U_R_N key.  For other uses of SSSSeeeennnndddd see the
          Shell Menu subsection of the CCCCUUUUSSSSTTTTOOOOMMMMIIIIZZZZIIIINNNNGGGG section.

          You can also copy text between windows by marking the text
          in one window and selecting SSSSeeeennnndddd in another window.

          In what follows, selection of an item in a submenu will be
          denoted using an arrow (->).  For example, selection of the
          BBBBaaaacccckkkkuuuupppp item in the HHHHiiiissssttttoooorrrryyyy submenu will be denoted by using
          the notation HHHHiiiissssttttoooorrrryyyy ---->>>> BBBBaaaacccckkkkuuuupppp.  Just press button 2, move
          the mouse to the HHHHiiiissssttttoooorrrryyyy menu item, move to the right and
          the HHHHiiiissssttttoooorrrryyyy submenu will appear; then move to the submenu
          item you want and release button 2.

          You can go back through previous shell output a page at a
          time by repeatedly selecting HHHHiiiissssttttoooorrrryyyy ---->>>> BBBBaaaacccckkkkuuuupppp, or a line at
          a time by selecting HHHHiiiissssttttoooorrrryyyy ---->>>> SSSSccccrrrroooollllllll BBBBaaaacccckkkk.  After backing
          up, you can go forward through the shell output a page at a
          time by selecting HHHHiiiissssttttoooorrrryyyy ---->>>> FFFFoooorrrrwwwwaaaarrrrdddd, or a line at a time by
          selecting HHHHiiiissssttttoooorrrryyyy ---->>>> SSSSccccrrrroooollllllll FFFFoooorrrrwwwwaaaarrrrdddd.  To return immediately
          to the shell prompt, select HHHHiiiissssttttoooorrrryyyy ---->>>> RRRReeeessssttttoooorrrreeee.  RRRReeeessssttttoooorrrreeee can
          also be used to turn off underlining, inverse video, and
          other terminal modes should they get accidentally turned on
          by using _c_a_t(1) without the ----vvvv on an object file, for
          example.  To clear the shell history select HHHHiiiissssttttoooorrrryyyy ---->>>>
          CCCClllleeeeaaaarrrr.

          The LLLLaaaayyyyeeeerrrr submenu provides additional submenus to change
          window characteristics, such as cursor flashing.  See the
          CCCCUUUUSSSSTTTTOOOOMMMMIIIIZZZZIIIINNNNGGGG section for information on changing these for
          all windows.

        LLLLaaaayyyyeeeerrrrssss MMMMoooouuuusssseeee UUUUsssseeee
          On the 5620, use button 3 to create a new window.  You may
          have to type a space in the new window to start it.  _v_i_t_e_r_m
          will automatically be copied into the new window, and the
          $$$$LLLLIIIINNNNEEEESSSS, $$$$CCCCOOOOLLLLUUUUMMMMNNNNSSSS, $$$$TTTTEEEERRRRMMMM, $$$$TTTTEEEERRRRMMMMCCCCAAAAPPPP, and $$$$TTTTEEEERRRRMMMMIIIINNNNFFFFOOOO environment
          variables will be set appropriately.  Reshaping the window
          with button 3 will cause these variables to be reset.

          On the 630/730, use the menu item MMMMoooorrrreeee ---->>>> VVVViiiitttteeeerrrrmmmm to create a
          new _v_i_t_e_r_m window with all the variables listed above set
          appropriately.  Using the NNNNeeeewwww menu item will create a _w_p_r_o_c
          window, not a _v_i_t_e_r_m window.  You can however transform a
          _w_p_r_o_c window into a _v_i_t_e_r_m window by typing:

               exec viterm -d

          in it.  This will however cause the history of that window
          to be reinitialized.



     Page 3                                          (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



        SSSSccccrrrroooollllllll BBBBaaaarrrr
          While you are in the shell, a scroll bar will be displayed
          at the right-hand edge of the window.  The solid bar (called
          the slider) shows the portion of history that is currently
          displayed.  The textured bar in the middle shows how much of
          the history space is actually occupied by text.

          You can move back and forth in the history using the mouse
          by moving the mouse into the scroll bar.  Observe that the
          mouse icon changes to a double arrow pointing up and down
          when it will accept scrolling commands.

          To move back a page in the history, use the mouse to point
          at the scroll bar anywhere above the solid bar and click
          button 1.  For each click of button 1, the previous page in
          history will be displayed, until the beginning of history is
          reached.

          To move forward in history a page at a time point in the
          scroll bar below the slider and click button 1.

          Notice the upward-pointing arrow at the top of the bar and
          the downward-pointing arrow at the bottom of the bar.  To
          scroll back a line click button 1 on the upward-pointing
          arrow, and to scroll forward one line click button 1 on the
          downward-pointing arrow.

          To move to a specific portion in history, point at the
          slider and tag it by depressing button 1.  Now while keeping
          button 1 depressed move the mouse up or down to the position
          in the bar that you want displayed and then release the
          button.  The slider will be moved to that point and the
          corresponding portion of history will be displayed in the
          window.

          If a screen program doesn't support the scroll bar, it will
          disappear; otherwise, the slider represents the part of the
          total text that is displayed.  The textured bar is only for
          the shell history, so it will not appear.  Button 1 works
          with a screen program scroll bar just like it does for the
          shell scroll bar.

          The CCCCUUUUSSSSTTTTOOOOMMMMIIIIZZZZIIIINNNNGGGG section describes how you can position the
          scroll bar along the left or right edge of the screen or
          remove it, per window.  You can also use the button 2 shell
          menu item LLLLaaaayyyyeeeerrrr ---->>>> SSSSccccrrrroooollllllll BBBBaaaarrrr to carry out any of these
          scroll bar control functions.

        LLLLaaaabbbbeeeellll AAAArrrreeeeaaaa
          Each window has a label area at the top.  Normally the word
          _v_i_t_e_r_m will be displayed in it.  It is possible to display
          any other string in the label area.  You can even turn the



     Page 4                                          (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



          label area off in selected windows.  The way to do so is
          described later in the CCCCUUUUSSSSTTTTOOOOMMMMIIIIZZZZIIIINNNNGGGG section.  You can also
          use the button 2 shell menu item LLLLaaaayyyyeeeerrrr ---->>>> LLLLaaaabbbbeeeellll to carry out
          any of these label control functions.

        RRRReeeessssttttoooorrrriiiinnnngggg tttthhhheeee EEEEnnnnvvvviiiirrrroooonnnnmmmmeeeennnntttt
          The shell and terminal environment relevant to _v_i_t_e_r_m can be
          restored by typing:

               echo "\033a\c"

          to the shell.  This causes _v_i_t_e_r_m to send a command to your
          shell to reset your environment.  You can also use the
          button 2 shell menu item LLLLaaaayyyyeeeerrrr ---->>>> SSSSeeeetttt SSSSiiiizzzzeeee to restore the
          shell environment in the current window.

        OOOOuuuuttttppppuuuutttt PPPPaaaaggggiiiinnnngggg
          When not in a screen program, a ^^^^SSSS (_C_T_R_L-S) character will
          be sent to the computer when the window fills with the
          output from the current program.  Type ^^^^SSSS to restart the
          output just as if you had typed the first ^^^^SSSS.  Note that in
          small windows this feature is not initially on, so it will
          not interfere with downloading _d_m_d_l_o_c_k(EXPTOOLS) and other
          special-purpose windows.  You can also use the button 2
          shell menu item LLLLaaaayyyyeeeerrrr ---->>>> PPPPaaaaggggiiiinnnngggg to enable or disable this
          feature.  How this feature can be disabled on the 5620 is
          described in the CCCCUUUUSSSSTTTTOOOOMMMMIIIIZZZZIIIINNNNGGGG section.

        CCCChhhhaaaarrrraaaacccctttteeeerrrr FFFFoooonnnntttt
          On the 5620, you can use _u_s_e_f_o_n_t(EXPTOOLS) to change the
          default character font (defont) to a larger font such as
          9x18 or a smaller font such as 7x12.  The window will be
          cleared to remove the old font and the LINES and COLUMNS
          environment variables will be updated, just like when you
          reshape a window.

          On the 630/730, you can use any font that is available in
          the cache.  The font that you request must previously have
          been loaded into the terminal using _l_o_a_d_f_o_n_t or by programs
          such as _x_c_i_p(EXPTOOLS) or _x_p_r_o_o_f(EXPTOOLS).  You can select
          the font for the current window by using the button 2 shell
          menu item LLLLaaaayyyyeeeerrrr ---->>>> FFFFoooonnnntttt.  You can also select any one of
          them on a per-window basis by sending the appropriate escape
          sequence to _v_i_t_e_r_m, as described in the CCCCUUUUSSSSTTTTOOOOMMMMIIIIZZZZIIIINNNNGGGG section.

        CCCCaaaalllllllliiiinnnngggg AAAAnnnnooootttthhhheeeerrrr MMMMaaaacccchhhhiiiinnnneeee
          After using _c_u(1) or _d_k_c_u(1) to login to another machine in
          a window, select the button 2 shell menu item LLLLaaaayyyyeeeerrrr ---->>>> SSSSeeeetttt
          SSSSiiiizzzzeeee, which causes _v_i_t_e_r_m to send a command to the remote
          machine to set the window size.

          If you can use _d_k(1) to login to another machine, you can



     Page 5                                          (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



          avoid the above by putting the following code into the
          ._p_r_o_f_i_l_e on both machines:

               DKEXPORT=LINES,COLUMNS,TERM,TERMCAP export DKEXPORT
               case $0 in
               -Dsh|-Xsh)                    # remote login
                    TERM=viterm
                    export TERMINFO
                    TERMINFO=$TOOLS/lib/terminfo/terminfo
                    ;;
               *)   TERM=`ttype -T 730,630,dmd`   # direct login
               esac

          If you can use _r_l(1) to login to another machine, put the
          following code into the ._p_r_o_f_i_l_e on both machines:

               RXPORT=LINES,COLUMNS,TERM,TERMCAP export REXPORT
               if test "$TERM" = ""          # if direct login
               then TERM=`ttype -T 730,630,dmd`
               else export TERMINFO          # else remote login
                    TERMINFO=$TOOLS/lib/terminfo/terminfo
               fi

        SSSSwwwwiiiittttcccchhhh ttttoooo AAAAnnnnooootttthhhheeeerrrr LLLLooooggggiiiinnnn
          When the effective login is changed on the same machine
          using:

               su - _n_e_w__l_o_g_i_n

          care must be taken to reconstruct the _v_i_t_e_r_m environment
          under the new login.  In general it does not make sense to
          re-download _v_i_t_e_r_m for this _s_u'ed login.  It is possible to
          set up the existing _v_i_t_e_r_m in the window.  This is most
          easily done by defining a new terminal type named _s_u_v_i_t_e_r_m
          in the new login.  Whenever the terminal type is specified
          to be _s_u_v_i_t_e_r_m, have ._p_r_o_f_i_l_e set up the environment for
          _v_i_t_e_r_m (without downloading _v_i_t_e_r_m) and then change $$$$TTTTEEEERRRRMMMM to
          _v_i_t_e_r_m.  A typical script that you might add to the ._p_r_o_f_i_l_e
          of _n_e_w__l_o_g_i_n may look like this:

               if test $TERM = suviterm
               then VITERM=$HOME/.viterm export VITERM
                    echo "\033a\c" # set TERM, LINES, etc.
                    eval `$VITERM` # initialize for new_login
               fi

          Of course when you log out from this _s_u shell you have to
          restore the previous _v_i_t_e_r_m customization.  This can be done
          by executing:

               eval  `$VITERM`




     Page 6                                          (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



     CCCCUUUUSSSSTTTTOOOOMMMMIIIIZZZZIIIINNNNGGGG
          When _v_i_t_e_r_m starts in a new window, it executes any shell
          commands in the environment variable $$$$EEEEMMMMAAAACCCCSSSSTTTTEEEERRRRMMMM and then
          clears the window.  You can use this to customize _v_i_t_e_r_m to
          your personal preferences.

          Since it is awkward to change the customizing commands by
          editing your ._p_r_o_f_i_l_e and logging in again, you can set
          $$$$VVVVIIIITTTTEEEERRRRMMMM to a shell script called ._v_i_t_e_r_m in your home
          directory:

               VITERM=$HOME/.viterm export VITERM

          This script can contain many _e_c_h_o commands like those
          described below.  If you want to set environment variables
          in this script, change the above line to:

               VITERM=". $HOME/.viterm"

          You can also change any of these features by using the
          button 2 shell LLLLaaaayyyyeeeerrrr submenus.

        CCCCuuuurrrrssssoooorrrr
          For example, if you do not like the flashing character
          cursor, you can stop the flashing by putting the following
          command line in your $$$$VVVVIIIITTTTEEEERRRRMMMM file:

               echo '\033N1\c'

          This command sends the EEEESSSSCCCC character (\033), the NNNN
          character, and the 1111 character to the terminal, which
          together form a control sequence that stops the cursor
          flashing.  The \\\\cccc in the command tells _e_c_h_o not to send a
          trailing newline character.  You can also use the button 2
          menu item LLLLaaaayyyyeeeerrrr ---->>>> CCCCuuuurrrrssssoooorrrr ---->>>> SSSStttteeeeaaaaddddyyyy to do the same thing.
          Replace the 1111 with 0000 to restart the cursor flashing.  You
          can also use the button 2 menu item LLLLaaaayyyyeeeerrrr ---->>>> CCCCuuuurrrrssssoooorrrr ---->>>>
          FFFFllllaaaasssshhhhiiiinnnngggg to do the same thing.

          You can switch to a vertical bar cursor like that used by
          _j_i_m(1) with:

               echo '\033C1\c'

          You can also use the button 2 menu item LLLLaaaayyyyeeeerrrr ---->>>> CCCCuuuurrrrssssoooorrrr ---->>>>
          BBBBaaaarrrr to do the same thing.  Replace the 1111 with 0000 to restore
          the block cursor.  You can also use the button 2 menu item
          LLLLaaaayyyyeeeerrrr ---->>>> CCCCuuuurrrrssssoooorrrr ---->>>> BBBBlllloooocccckkkk to do the same thing.

        OOOOuuuuttttppppuuuutttt PPPPaaaaggggiiiinnnngggg
          You can stop output paging with:




     Page 7                                          (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



               echo '\033P0\c'

          You can also use the button 2 menu item LLLLaaaayyyyeeeerrrr ---->>>> PPPPaaaaggggiiiinnnngggg ---->>>>
          NNNNoooonnnneeee to do the same thing.  Replace the last 0000 with 1111 to
          restart the paging.  You can also use the button 2 menu item
          LLLLaaaayyyyeeeerrrr ---->>>> PPPPaaaaggggiiiinnnngggg ---->>>> SSSSttttoooopppp to do the same thing.  Replace the 0000
          with 2222 to have the window cleared after each output page.
          You can also use the button 2 menu item LLLLaaaayyyyeeeerrrr ---->>>> PPPPaaaaggggiiiinnnngggg ---->>>>
          CCCClllleeeeaaaarrrr to do the same thing.

        CCCChhhhaaaarrrraaaacccctttteeeerrrr FFFFoooonnnntttt
          On the 5620, you can change the default font in all windows
          by putting a _u_s_e_f_o_n_t(EXPTOOLS) command in your $$$$VVVVIIIITTTTEEEERRRRMMMM file:

               usefont 9x18

          Additionally a preloaded font can be used in a window by
          using the following command:

               echo '\033&F3x\c'

          where _x is the font position number.  The font mounted at
          the selected font position is made the current font of the
          window, and the window is resized accordingly.  For example:

               echo '\033&F32\c'

          will cause 9x18 to be used in the window if 9x18 happens to
          be mounted at font position 2.

          On the 630/730, use _l_o_a_d_f_o_n_t(1) to make non-default fonts
          available to _v_i_t_e_r_m.  Within a window, select a preloaded
          font by including the font's name in an _e_c_h_o command line of
          the form:

               echo '\033&F4!_f_o_n_t_n_a_m_e!\_c'

          where _f_o_n_t_n_a_m_e is a string naming the desired font.  For
          example, the command

               echo '\033&F4!large font!\c'

          will cause the built-in large font to be used in the window,
          whereas the command

               echo '\033&F4!7x14thin!\c'

          will cause the 7x14thin font to be used if it is available
          in the cache.  If not, you will get the message ``Requested
          Font Not Available.''

          You can preload the fonts you intend to use by putting



     Page 8                                          (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



          _l_o_a_d_f_o_n_t in your ._l_a_y_e_r_s file as described in the ``Getting
          Started'' subsection of the DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN section.  For
          example, to preload the font 7x14thin, change the (first)
          line in the ._l_a_y_e_r_s file to:

               8 8 792 498 loadfont -c 7x14thin; exec viterm

          The ----cccc option in the invocation of _l_o_a_d_f_o_n_t above causes it
          to cache itself so that time would not be wasted in
          subsequent invocations for downloading other fonts as long
          as the terminal is not turned off.  If _l_o_a_d_f_o_n_t finds that
          the requested font is already available in the cache, it
          exits without doing anything.  Once a font is downloaded
          using the ._l_a_y_e_r_s file above, it is available for use in any
          _v_i_t_e_r_m window.

          Additionally, at any point you can use _l_o_a_d_f_o_n_t(1) to
          download and cache the font that you desire.  Once the
          desired font is cached you can invoke the _e_c_h_o command as
          described above to use that font.  On the 630/730, you can
          also select a font with the button 2 shell menu item LLLLaaaayyyyeeeerrrr
          ---->>>> FFFFoooonnnntttt.

        LLLLaaaabbbbeeeellll AAAArrrreeeeaaaa
          You can change the contents of the label area by using the
          command:

               echo '\033L|This is the new label for this window|\c'

          The example command will place the label, ``This is the new
          label for this window,'' in the label area of the window in
          which the command was executed.

          You can remove the label area in a window by using the
          command:

               echo '\033L0\c'

          Subsequently you can display the label area by using the
          command:

               echo '\033L1\c'

          You can also use the button 2 shell submenu LLLLaaaayyyyeeeerrrr ---->>>> LLLLaaaabbbbeeeellll
          to turn the label area on or off.

          Note that removing or displaying the label area involves a
          change in the size of the window similar to a reshape, so
          this should be done only when in the shell.

          If you use _k_s_h(1) as your shell and would like to display
          the working directory in the label area, put the following



     Page 9                                          (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



          code in your $$$$VVVVIIIITTTTEEEERRRRMMMM file,

               echo "\033L|$PWD|\c"     # restore label area after jterm

          and this code in your ._e_n_v file:

               # if in layers
               if test "$TERM" = viterm -o "$TERM" = dmd -a $0 != '-ksh' \
                    -o "$TERM" = 630 -o "$TERM" = 730
               then # if this is an interactive shell
                    case $- in
                    *i*) # put the current directory in the label area
                         echo "\033[?${#PWD}v$PWD\c"
                         function cdpwd # update it on every cd command
                         {
                              cd $*
                              echo "\033[?${#PWD}v$PWD\c"
                         }
                         alias cd=cdpwd
                         # on ksh exit, restore the label area if it changed
                         trap "if test $PWD != \$PWD; then
                              echo \\\\033[?${#PWD}v$PWD\\\\c; fi" 0
                         # on cu exit, restore the label area
                         function cu
                         {
                              /usr/bin/cu $*
                              echo "\033[?${#PWD}v$PWD\c"
                         }
                    esac
               fi

          Note that this uses the 630/730 label area escape sequence,
          which is also recognized by _v_i_t_e_r_m, so it will work for
          _w_p_r_o_c windows also.  Also note the _c_u(1) code for restoring
          the label area could be duplicated for similar commands such
          as _d_k_c_u(1), _d_k(1), or _r_l(1).

        SSSSccccrrrroooollllllll BBBBaaaarrrr
          You can remove the scroll bar in a window by using the
          command:

               echo '\033Vf0\c'

          You can also use the button 2 menu item LLLLaaaayyyyeeeerrrr ---->>>> SSSSccccrrrroooollllllll BBBBaaaarrrr
          ---->>>> OOOOffffffff to do the same thing.

          Subsequently you can display the scroll bar by using the
          command:

               echo '\033Vf1\c'

          You can also use the button 2 menu item LLLLaaaayyyyeeeerrrr ---->>>> SSSSccccrrrroooollllllll BBBBaaaarrrr



     Page 10                                         (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



          ---->>>> OOOOnnnn to do the same thing.

          You can choose to have the scroll bar displayed along the
          left edge of the window by using the command:

               echo '\033Vl1\c'

          You can also use the button 2 menu item LLLLaaaayyyyeeeerrrr ---->>>> SSSSccccrrrroooollllllll BBBBaaaarrrr
          ---->>>> LLLLeeeefffftttt to do the same thing.

          You can move it back to the right edge of the window by
          using:

               echo '\033Vl0\c'

          You can also use the button 2 menu item LLLLaaaayyyyeeeerrrr ---->>>> SSSSccccrrrroooollllllll BBBBaaaarrrr
          ---->>>> RRRRiiiigggghhhhtttt to do the same thing.

          Note that manipulating the scroll bar involves a change in
          the size of the window similar to a reshape; therefore, you
          should issue these commands only when in the shell and not
          while in any screen program like _v_i or _c_s_c_o_p_e.

        MMMMeeeennnnuuuu BBBBuuuuttttttttoooonnnn
          If you frequently use programs that use button 3 for the
          mouse menu, such as _c_i_p(1), you may find it hard to switch
          between using button 2 when in vi, and button 3 when in
          these other programs.  You can move the _v_i_t_e_r_m mouse menu
          from button 2 to 3 with:

               echo '\033B3\c'

          In the previous example, replace the last 3333 with 2222 to move
          the menu back to button 2.  You can also use the button 2
          shell submenu LLLLaaaayyyyeeeerrrr ---->>>> MMMMeeeennnnuuuu BBBBuuuuttttttttoooonnnn to switch the menu
          button.

          Note that if you move the _v_i_t_e_r_m menu to button 3 you will
          have to move the mouse outside the current window to get the
          _l_a_y_e_r_s menu on button 3.

        SSSShhhheeeellllllll MMMMeeeennnnuuuu
          By convention, menu 0000 is the shell menu.  The symbol ssss is
          aliased to 0000, so that the shell menu can also be referred to
          as menu ssss.  You can switch to the shell menu with:

               echo '\033#s'

          You can add a SSSSeeeetttt LLLLaaaayyyyeeeerrrr SSSSiiiizzzzeeee menu item to the mouse menu for
          the shell with:

               echo '\033M1/Set Layer Size/##\033a/\c'



     Page 11                                         (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



          The number after the MMMM is the menu item number (0-29) and if
          omitted, defaults to the next menu item.  The slashes (/)
          delimit the displayed text SSSSeeeetttt LLLLaaaayyyyeeeerrrr SSSSiiiizzzzeeee and the ########\\\\000033333333aaaa
          return value.  Any character that does not appear in the
          displayed text and return value could be used in place of
          the slash.  The ######## in the value sends the characters \\\\000033333333aaaa
          to the terminal; otherwise they are sent to the shell, as in
          the following example:

               echo '\033M/Stop Output/\023/\c'

          This example command sends a ^^^^SSSS to the shell.

          A menu item can send characters both to the terminal and to
          the shell.  For example, the following command line,

               echo '\033M/Space & Send/ ##\033s/\c'

          sends a space character to the shell and \\\\000033333333ssss to the
          terminal to tell it to send the marked text to the shell.  A
          second ######## switches back to sending the characters to the
          shell:

               echo '\033M/Send & Return/##\033s##\r/\c'

          Additional ######## characters continue to alternate sending the
          characters to the terminal and shell.

          You can have tree menus by adding a #### and a menu number or
          symbol after the MMMM and before the optional menu item number.
          The default shell menu is:

               echo '\033M/Send    /##\033s/\c'
               echo '\033M#h/History //\c'
               echo '\033M#l/Layer   //\c'

        vvvviiii MMMMeeeennnnuuuu
          _v_i_t_e_r_m simultaneously supports two editor menu interfaces.
          The primary one is for _v_i; a secondary one is for _e_m_a_c_s.  By
          convention the menu corresponding to the primary editor
          interface is menu 1111.  The menu corresponding to the
          alternate editor interface is menu 9999.  For convenience, the
          _v_i menu is also identified by menu vvvv, and the _e_m_a_c_s menu is
          identified by menu eeee.  In _v_i_t_e_r_m the primary editor
          interface is to _v_i, therefore vvvv is aliased to 1111 and eeee is
          aliased to 9999.

          You can change the default _v_i menu in _v_i_t_e_r_m using a command
          sequence such as the following:

               echo '\033#1'
               echo '\033M0/Delete     /my`z"zd`y/\c'



     Page 12                                         (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



               echo '\033M/Yank       /my`z"zy`y`y/\c'
               echo '\033M/Put Before /"zP/\c'
               echo '\033M/Put After  /"zp/\c'
               echo '\033M/Send Before/:set noai\ri##\033s##\033:set ai\r/\c'
               echo '\033M/Send After /:set noai\ra##\033s##\033:set ai\r/\c'
               echo "\033M/Shift Right/mybmx:'z,'xs,^,\t,\r\`y/\c"
               echo "\033M/Shift Left /mybmx:'z,'xs,\t,,\r\`y/\c"
               echo '\033#s'

          The code in this example switches to the primary editor menu
          with the \\\\000033333333####1111 control sequence, changes the menu, and
          switches back to shell with the \\\\000033333333####ssss control sequence.
          The code in the following example adds a menu item to write
          the marked text to a file:

               echo '\033#1\c'
               echo "\033M/Write      /mybmx\`y:'z,'xw /\c"
               echo '\033#s\c'

          If you intend to use both _v_i and _e_m_a_c_s in _v_i_t_e_r_m you may
          want to set up the menus right for either editor in _v_i_t_e_r_m.
          You can achieve this in the above example by including the
          following sequence of _e_c_h_o commands:

               echo '\033#v\c'
               echo "\033M/Write     /mymbmx\`y:'z,'xw /\c"
               echo '\033#e\c'
               echo '\033M!Move to Top!\033\014!\c'
               echo '\033#s\c'

          Changing a menu item removes the rest of the menu, so to
          remove all or the last part of a menu, set the name and
          value of the first item to be removed to nothing:

               echo '\033M0///\c'

          A menu item does not need a value; it can be downloaded
          with:

               echo '\033M/Quit//\c'

          If this item is selected, _v_i_t_e_r_m sends ^^^^XXXX^^^^____2222_n to the
          program, where _n is the menu item number (0-9).

        OOOOtttthhhheeeerrrr MMMMeeeennnnuuuussss
          As mentioned earlier, menu 0000 is the default shell menu, menu
          1111 is reserved for _v_i, and menu 9999 is reserved for _e_m_a_c_s.
          Additionally menu 2222 is reserved for other screen programs,
          such as _c_s_c_o_p_e and _v_s_h.  Menus 3333 through 8888 are available for
          you to program.

          There is a menu 11110000, which is always a null menu.  When a



     Page 13                                         (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



          screen program that does not support menus is executed, this
          menu is assigned to it, thus turning off the menu while
          executing the program in the window.

          Use control sequence \\\\000033333333####_n to switch between menus, where _n
          is a single digit between 0000 and 9999.  Here is an example of a
          tree menu for _m_a_i_l_x(1):

               echo '\033M#3/Mail menu//\c'
               echo '\033#3\c'
               echo '\033M/Delete message /d\r/\c'
               echo '\033M/Next message   /\r/\c'
               echo '\033M/Message headers/h\r/\c'
               echo '\033M/Reply to sender/R\r/\c'
               echo '\033M/Reply to all   /r\r/\c'
               echo '\033M/Quit           /q\r/\c'
               echo '\033#s\c'

        FFFFuuuunnnnccccttttiiiioooonnnn KKKKeeeeyyyyssss
          You can program function keys similarly to changing menus:

               echo '\033F1/##\033c/\c' # clear window
               echo '\033F2/ps\r/\c'    # list processes

          If you set a function key to null, it reverts to the value
          entered with the _S_E_T-_U_P key.  This allows a program running
          in the window to download function keys, and then restore
          them before returning to the shell.  Each window can have
          different function key values.  On the 630/730, you can
          program the _E_n_t_e_r key with up to four characters:

               echo '\033F0/\033OM/\c'  # set enter key to ESC-O M

        WWWWiiiinnnnddddoooowwww MMMMaaaannnnaaaaggggeeeemmmmeeeennnntttt
          On the 630/730, you can manipulate the location and size of
          individual windows from a program running on the host
          connected to that window.  A window can be manipulated from
          the host end in the indicated ways by sending the following
          escape sequences to viterm:

          MMMMoooovvvveeee ttttoooo TTTToooopppp    \033yt
          MMMMoooovvvveeee ttttoooo BBBBoooottttttttoooommmm \033yb
          MMMMaaaakkkkeeee CCCCuuuurrrrrrrreeeennnntttt   \033yc
          DDDDeeeelllleeeetttteeee WWWWiiiinnnnddddoooowwww  \033yd
          MMMMoooovvvveeee WWWWiiiinnnnddddoooowwww    \033ym!_x_o_r_i_g_i_n!_y_o_r_i_g_i_n!
                         Where _x_o_r_i_g_i_n and _y_o_r_i_g_i_n are the screen
                         coordinates of the location to which the left
                         top corner of the window is to be moved.
          MMMMoooovvvveeee aaaannnndddd RRRReeeesssshhhhaaaappppeeee WWWWiiiinnnnddddoooowwww
                         \033yr!xorigin!_y_o_r_i_g_i_n!_x_c_o_r_n_e_r!_y_c_o_r_n_e_r!
                         Where _x_o_r_i_g_i_n and _y_o_r_i_g_i_n are the coordinates
                         of the left top corner of the new window, and



     Page 14                                         (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



                         _x_c_o_r_n_e_r, _y_c_o_r_n_e_r are the coordinates of the
                         bottom right corner of the window.

          For example, to move the current window so that its left top
          corner is at pixel position 100, 200, use the following
          command:

               echo '\033ym!100!100!\c'

          To reshape the current window so that its left top corner is
          at 100,100 and its right bottom corner is at 800,500 use
          this command:

               echo '\033yr'100!100!800!500!\c'

          To move the current window to the bottom use this command:

               echo '\033yb\c'

          If you need to flip back and forth between two windows
          often, you may find it convenient to use function keys to do
          the flipping.  For example you can program function key 1
          with the _b_o_t_t_o_m sequence and function key 2 with the _t_o_p
          sequence by adding the following lines to your ._v_i_t_e_r_m file:

               echo '\033F1/##\033yb/\c'
               echo '\033F2/##\033yt/\c'

     MMMMOOOOUUUUSSSSEEEE IIIINNNNTTTTEEEERRRRFFFFAAAACCCCEEEE TTTTOOOO SSSSCCCCRRRREEEEEEEENNNN PPPPRRRROOOOGGGGRRRRAAAAMMMMSSSS
          When button 1 is used to mark a region, sending \\\\000033333333cccc to
          _v_i_t_e_r_m will send the characters in the marked region to the
          program.  Thus the SSSSeeeennnndddd menu item has the value ########\\\\000033333333ssss to
          send this control sequence directly to _v_i_t_e_r_m.  See the
          Shell Menu subsection of the CCCCUUUUSSSSTTTTOOOOMMMMIIIIZZZZIIIINNNNGGGG section for
          information about how to program menu items.

          Programs other than _v_i can be notified when mouse button 1
          is clicked or used to mark a region (see the DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          section) by sending  \\\\000033333333{{{{_n  to _v_i_t_e_r_m, where _n is the mouse
          mode and has these values:

          0000    Disable the click and region marking control sequence.
          1111    Enable the click control sequence.  Treat region
               marking as a click at the upper left corner of the
               region.
          2222    Enable the click and region marking control sequences.
          3333    Disable multiple-click marking of words and lines,
               enable region marking.
          4444    Disable multiple-click marking, enable region marking
               and highlight regions as rectangles.

          When button 1 is clicked and the mouse mode is greater than



     Page 15                                         (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



          0, _v_i_t_e_r_m sends control sequence ^^^^XXXX^^^^____1111_x_y to the screen
          program, where _x and _y are the coordinates of the character
          position pointed to by the mouse.  The upper left corner of
          the window is the origin (0,0).  If a coordinate is less
          than 95, it is encoded as a printable character by adding 32
          to it.  Otherwise, it is encoded as ^^^^AAAA followed by the
          character represented by its value minus 95.

          When button 1 is used to mark a region and the mouse mode is
          2, _v_i_t_e_r_m sends control sequence ^^^^XXXX^^^^]]]]1111_x_y_x_y to the screen
          program, where the first _x and _y are the beginning
          coordinates of the region, and the second _x and _y are the
          end coordinates.  If the mouse mode is 1, _v_i_t_e_r_m sends the
          mouse click control sequence for the upper left corner of
          the region.

          A program can send \\\\000033333333HHHH_x_y_x_y to mark a region in the window.

          The scroll bar is removed when a screen program is entered.
          However, if the program is able to use the scroll bar it can
          display the bar by sending \\\\000033333333VVVV1111 to _v_i_t_e_r_m, which will
          activate the scroll bar in the application mode.  The
          application mode scroll bar does not have the faint bar in
          the middle as in the shell mode.

          When in the application mode the scroll bar communicates
          with the application using the strings beginning with a
          \\\\000033333333.  The application can draw the slider at any position
          by sending the string:

               \\\\000033333333WWWW_x_y

          where _x and _y are the values 0 through 100 encoded as the
          numbers 16 through 116.  0 maps to the top end of the bar
          and 100 to the bottom end.  So to draw a slider between a
          point that is 50% of the way down from the top and a point
          that is 60% of the way down the values of _x and _y would be
          66 and 76 respectively.

          Any mouse action on the scroll bar is communicated to the
          application by means of strings of the form:

               ^^^^XXXX^^^^____0000_z

          When the slider is snagged and dragged using button 1 the
          position at which button 1 is released, its location in the
          scroll bar is encoded in _z as a number between 16 and 116 as
          described earlier in connection with displaying the slider.

          In addition the following (character) values of _z denote the
          conditions noted against them:




     Page 16                                         (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



          uuuu    Button 1 clicked below the slider.
          vvvv    Button 1 clicked above the slider.
          wwww    Button 1 clicked on the down arrow.
          xxxx    Button 1 clicked on the up arrow.

          The application program is free to assign any meaning that
          it choses to these strings.  The interactions of _v_i with the
          scroll bar that are described elsewhere in this manual are
          built on top of this basic facility.

     SSSSUUUUMMMMMMMMAAAARRRRYYYY OOOOFFFF EEEESSSSCCCCAAAAPPPPEEEE SSSSEEEEQQQQUUUUEEEENNNNCCCCEEEESSSS
        CCCCoooonnnnttttrrrroooollll SSSSeeeeqqqquuuueeeennnncccceeeessss
          ^G   Bell
          ^F   Forward one character (non-destructive space)

        EEEEssssccccaaaappppeeee PPPPrrrreeeeffffiiiixxxxeeeedddd SSSSeeeeqqqquuuueeeennnncccceeeessss
          The character  ~  (tilde) in the following sequences is
          either a single digit (0-9) or a letter in the sequence @,
          A, through  ~  for specifying the numbers from 0 to 62.  The
          letter _n is a one or more digit number.  The letters _x and _y
          represent encoded coordinates.  If a coordinate is less than
          95, it is encoded as a printable character by adding 32 to
          it.  Otherwise, it is encoded as ^^^^AAAA followed by the
          character represented by its value minus 95.  The letter _z
          is used to specify parameters encoded as one letter by
          adding 16 to the value.

          The sequences below that are used to send arbitrary length
          strings to the terminal are followed by notation that looks
          something like the sequence XXXX!!!!mmmm!!!! where the sequence !!!!mmmm!!!!
          should be interpreted as a delimiting character (!!!!), the
          message string(mmmm), and the delimiting character again (!!!!).

          a         Send initialization sequence for remote window
          A         Up one line
          B~        Menu button
          b         Backup one output history page
          C~        Bar character cursor
          c         Clear screen
          Dx        Delete x lines
          d         Delete a character
          e         Exit output history
          Fn!v!     Set function key n to optional value
          f         Forward one output history page
          g         Clear screen and history
          G         Clear screen and history and send a _R_E_T_U_R_N
          Hxyxy     Highlight the enclosed region
          I~        Insert
          L~        Display label area
          L!t!      Put text t left-justified in the label area
          M!t!v!    Add menu item text and optional value
          Mn!t!v!   Set menu item n's text and optional value



     Page 17                                         (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



          M#m!t!!   Add menu item text and tree menu arrow to menu m
          M#mn!t!!  Set menu item n's text and tree menu arrow to menu
                    m
          N~        No cursor flashing
          Ox        Open x lines
          P~        Page output in shell (value 2 clears after page)
          p~        Pause for ~ 60ths of a second (use with ESC-H to
                    flash)
          R~        Inverse video
          Sx        Scroll x lines
          s         Send marked text to host
          U~        Underline
          V~        Scroll bar control 0 = none, 1 = on/remote, 2 =
                    on/auto
          Vl~       Scroll bar location 0 = right 1 = left
          Vf~       Scroll bar feature activated - 1; deactivated - 0
          Wzz       Set scroll bar (works only with \033V1 set)
          w0        Scroll up one output history line
          w1        Scroll down one output history line
          X~        Send ^S/^Q to host
          Yxy       Cursor movement
          y~        Window management on 630/730 (~ may be t, b, c, d,
                    m, r)
          Z         Clear to end of line
          z         Clear to end of screen
          #~        Select menu by number or letter
          {~        Mouse mode
          $~        Specify editor (~ may be e, v, g, G, or n)
          *n        Specify version (n is a natural number)
          &F        _u_s_e_f_o_n_t(EXPTOOLS) interface (only on 5620)
          &f        _d_l_f(EXPTOOLS) interface (only on 5620)
          [c        Send terminal ID

        AAAANNNNSSSSIIII SSSSeeeeqqqquuuueeeennnncccceeeessss RRRReeeeccccooooggggnnnniiiizzzzeeeedddd
          In addition to the escape sequences above, the following
          ANSI sequences are recognized and interpreted exactly the
          same as in _w_p_r_o_c on a 630:

          [A, [B, [C, [D, [H, [J, [K, [L, [M, [P, [f, [h, [i, [l, [m,
          [n, [v, [@

          The 730 _w_p_r_o_c+ ANSI bold ([[[[1111mmmm) and dim ([[[[2222mmmm) character
          display attributes are recognized, with an additional
          textured background ([[[[9999mmmm) attribute assigned to the
          _t_e_r_m_i_n_f_o(4) alternate character set attribute.

        RRRReeeettttuuuurrrrnnnn VVVVaaaalllluuuueeeessss ffffrrrroooommmm vvvviiiitttteeeerrrrmmmm
          The return values from menu selection or from function keys
          will be transmitted as if they were entered by the user from
          the keyboard.  Sequences that are prefixed by ## will be
          executed locally.




     Page 18                                         (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



          For the mouse, these control sequences are sent to the host:

          ^X^_0z      Button 1 drag of slider to _z - 16 (0-100).
          ^X^_0u      Button 1 clicked below slider.
          ^X^_0v      Button 1 clicked above slider.
          ^X^_0w      Button 1 clicked on down arrow.
          ^X^_0x      Button 1 clicked on up arrow.
          ^X^_nxy     Button n (1 or 2) click.
          ^X^]nxyxy   Button n (1 or 2) sweep.
          ^X^_2~      Button 2 menu clicked when there is no value.

     OOOOPPPPTTTTIIIIOOOONNNNSSSS
          ----wwww       Wait for _v_i_t_e_r_m to download in another window.
          ----dddd       Prevent _v_i_t_e_r_m from getting cached in the 630/730,
                   and to prevent _v_i_t_e_r_m from becoming the default
                   terminal program in the 5620.
          ----LLLL       Do not display the label area.
          ----SSSS       Do not display the scroll bar.
          ----VVVV       Display the _v_i_t_e_r_m version.
          ----vvvv       Display the _v_i_t_e_r_m._m download command (for
                   debugging).
          ----FFFF _f_i_l_e  Download _f_i_l_e instead of _v_i_t_e_r_m._m (for debugging).

     EEEENNNNVVVVIIIIRRRROOOONNNNMMMMEEEENNNNTTTT VVVVAAAARRRRIIIIAAAABBBBLLLLEEEESSSS
        VVVVaaaarrrriiiiaaaabbbblllleeeessss RRRReeeeaaaadddd
          $$$$DDDDMMMMDDDD           Must point to directory containing the DMD
                         support software.
          $$$$VVVVIIIITTTTEEEERRRRMMMM        Shell commands to execute in a new window.
          $$$$SSSSHHHHEEEELLLLLLLL         Your preferred shell, which defaults to
                         _s_h(1).
          $$$$TTTTOOOOOOOOLLLLSSSS         Exptools login home directory.

          To set a variable such as $$$$SSSSHHHHEEEELLLLLLLL to a value such as
          /_u_s_r/_l_b_i_n/_k_s_h, put the following code in your ._p_r_o_f_i_l_e:

               SHELL=/usr/lbin/ksh export SHELL

        VVVVaaaarrrriiiiaaaabbbblllleeeessss SSSSeeeetttt
          $$$$CCCCOOOOLLLLUUUUMMMMNNNNSSSS       Character columns in this window
          $$$$LLLLIIIINNNNEEEESSSS         Character lines in this window
          $$$$TTTTEEEERRRRMMMM          Terminal name (viterm)
          $$$$TTTTEEEERRRRMMMMCCCCAAAAPPPP       System V Release 1 _t_e_r_m_c_a_p(5) terminal
                         description
          $$$$TTTTEEEERRRRMMMMIIIINNNNFFFFOOOO      System V Release 2 or later _t_e_r_m_i_n_f_o(4)
                         database containing the terminal description
                         ($TOOLS/lib/terminfo/terminfo)

     FFFFIIIILLLLEEEESSSS
          $TOOLS/lib/dmd/viterm.m        file downloaded by _3_2_l_d(1)
          $TOOLS/lib/630/viterm.m        file downloaded by _d_m_d_l_d(1)
          $TOOLS/lib/terminfo/terminfo   _t_e_r_m_i_n_f_o(4) database




     Page 19                                         (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          _v_i(1), _l_a_y_e_r_s(1), _3_2_l_d(1), _d_m_d_l_d(1), _l_o_a_d_f_o_n_t(1),
          _u_s_e_f_o_n_t(EXPTOOLS), _d_l_f(EXPTOOLS), _c_u(1), _d_k_c_u(1), _d_k(1),
          _s_u(1), and _t_e_r_m_i_n_f_o(4).

     BBBBUUUUGGGGSSSS
        eeeemmmmaaaaccccsssstttteeeerrrrmmmm
          Downloading into a tiny window (e.g. 6 40 90 80) will cause
          a system exception.

          Sometimes selecting the BBBBaaaacccckkkkuuuupppp menu item switches to the
          editor menu; so to restore the shell menu, enter and exit
          _v_i.

        llllaaaayyyyeeeerrrrssss
          The _w_h_o _a_m _i command gives no output in either a _v_i_t_e_r_m
          window or a _w_p_r_o_c window.

          5555666622220000 TTTTeeeerrrrmmmmiiiinnnnaaaallll
               You may have to type a character in a new window to
               start it.

          666633330000////777733330000 TTTTeeeerrrrmmmmiiiinnnnaaaallll
               _v_i_t_e_r_m has to be restarted after exiting a downloaded
               program such as _c_i_p(1), by typing  eeeexxxxeeeecccc vvvviiiitttteeeerrrrmmmm ----dddd  in
               that window.  An alternative is to select NNNNeeeewwww on the
               llllaaaayyyyeeeerrrrssss menu to get a _w_p_r_o_c window and then call the
               program.

               If you change any of the SSSSeeeettttuuuupppp values for any of the
               hosts, _v_i_t_e_r_m will not see the new values until you log
               off, turn the terminal off and on, and log in in again.
               If you have other downloaded programs that would be
               time-consuming to redownload,  you can type  uuuuccccaaaacccchhhheeee  in
               any window, delete all _v_i_t_e_r_m windows, select MMMMoooorrrreeee ---->>>>
               uuuuccccaaaacccchhhheeee ---->>>> VVVViiiitttteeeerrrrmmmm, and type  eeeexxxxeeeecccc vvvviiiitttteeeerrrrmmmm  in any window.

               The default new window size will use the original
               host's multiplexed window-size SSSSeeeettttuuuupppp values, even for
               the first (non-multiplexed) window for the other host.

          777733330000++++ TTTTeeeerrrrmmmmiiiinnnnaaaallll
               Do not select _v_i_t_e_r_m as the default terminal program
               for a host in the SSSSeeeettttuuuupppp menu because when you call
               _l_a_y_e_r_s you will get

                    ayers: Terminal boot failed, Exiting.

               If you have the IDM card in your 730+ terminal and call
               _l_a_y_e_r_s from a MMMMoooorrrreeee ---->>>> VVVViiiitttteeeerrrrmmmm window, you will get

                    sh: /usr/add-on/630/lib/set_enc.sh: not found



     Page 20                                         (printed 3/10/92)






     VVVVIIIITTTTEEEERRRRMMMM((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((EEEEXXXXPPPPTTTTOOOOOOOOLLLLSSSS))))            VVVVIIIITTTTEEEERRRRMMMM((((1111))))



                    can't find /usr/add-on/630/lib/set_enc.sh to download

               so use a NNNNeeeewwww window instead.




















































     Page 21                                         (printed 3/10/92)



