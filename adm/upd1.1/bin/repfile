# remote update interface for exptools

# configurable entities	
HOMEID=exptools
TOOLS=`logdir $HOMEID`
RHUBCMD=rhub
pkg_cmd=$TOOLS/adm/upd1.1/lib/package		# packages up the file for upd
mach_cmd=$TOOLS/adm/upd1.1/bin/machines	# maps types to machine lists
net_cmd=$TOOLS/adm/upd1.1/lib/netcmd		# figures out networking to machines
send_cmd=$TOOLS/adm/upd1.1/lib/sendjob	# executes network commands
PATH=/usr/5bin:$PATH:$TOOLS/adm/bin	# use System V commands on Suns
export PATH

: ${batch:=/bin/sh}	# no need for batching, unless the user overrides this

umask 007	# private temp files
set -u		# no slip-ups allowed

tmpfile=/usr/tmp/$$repfile		# temp file for packaged source
tmpfile2=/tmp/$$Brepfile		# temp file for uncompressed source

: ${LOGNAME:=`id | sed -n 's/.*uid=[0-9]*(\([^)]*\)).*/\1/p'`}
mailaddr=`uuname -l`!${LOGNAME:?}
retval=0				# return code for this script
cmd=$0
case "$cmd" in
*/*)
	cmd=`basename ${0}`
	;;
esac

usage="usage: ${cmd} [-cfvxZ] [-M mailaddr] [-P pwdfile] [[-l link_path]...] \\
	-p pkgid -s source -t target machine-selection"

case $# in
0)
    cat <<! >&2
${usage}

Examples:
	${cmd} -p Mail -s Mail.ibm -t bin/Mail -v -x ibm
	${cmd} -p emacs -s 1.emacs -t man/1.emacs -v emacs
	${cmd} -pemacs -semacsdefs -t lib/emacs/emacsdefs -v emacs
	${cmd} -pi300 -si300 -tbin/i300 -lbin/i10 -lbin/i10p -x all

The source file is distributed to the specified machines and installed as
the target file.

Options:
	-c override local password check
	-f force file replacement (rarely used)
	-l link to path
	-M alternate return mail address (default ${mailaddr})
	-P package password file
	-p package ID (required)
	-s source file
	-t target path (relative to \$TOOLS)
	-v mail back verbose output (ls -l of targets)
	-x makes target executable (needs -f only if file exists)
	-Z do not uncompress a source file before transmitting
!
    exit
    ;;
esac

cmdline="$cmd $*"

# get any options.
if options=`getopt 'cdfl:m:M:N:P:p:s:t:vxZ' $*`
then	:
else
	echo "$usage" >&2
	exit 1
fi
set -- $options

Debug=
debug=
link=
linkargs=
options=
packargs=
pkgid=
pwdfile=
look4compressed=yes

while :
do
	arg=$1
	shift
	case ${arg} in
	-c)
		packargs="${packargs} ${arg}"
		;;
	-d)
		set -x
		Debug="set -x"
		debug=:
		;;
	-l)
		# check for duplicate link names (upd hoses up on them)
		tlinks="$link"
		link=
		linkargs=
		tmparg=$1
		shift
		for i in $tlinks
		do
			case "$i" in
			$tmparg)
				echo "Duplicate link name removed: $i" >&2
				;;
			*)
				link="$link $i"
				linkargs="$linkargs $arg$i"
				;;
			esac
		done
		link="$link $tmparg"
		linkargs="$linkargs $arg$tmparg"
		;;
	-m)
		echo "-m ignored: it is unnecessary and can cause problems" >&2
		shift
		;;
	-M)
		case $1 in
		att!?*!?*) ;;
		?*!?*!?*) echo "mail address [$1] must be machine!user or att!machine!user"
			  retval=1; exit;;
		?*!?*)	  ;;
		*)	  echo "mail address [$1] must be machine!user or att!machine!user"
			retval=1; exit;;
		esac
		mailaddr=${1}
		shift
		;;
	-N)	# obsolete; uucp is the only network now
		XNETPREF=$1
		shift
		export XNETPREF
		;;
	-P)
		chmod go-r-w $1	# make sure others can't read/write this file
		pwdfile="${arg} ${1}"
		shift
		;;
	-p)
		pkgid=$1
		options="${options} ${arg}${1}"
		packargs="${packargs} ${arg}${1}"
		shift
		;;
	-s)
		source="${1}"
		shift
		;;
	-t)
		target="${1}"
		shift
		;;
	-v|-x|-f)
		options="${options} ${arg}"
		;;
	-Z)	look4compressed=no ;;
	--)
		break
		;;
	esac
done

: ${source:?"${usage}"}
: ${target:?"${usage}"}
: ${pkgid:?"must specify -p pkgid"}

# other args are assumed to specify a machine list
machines="${*:?'missing machine selector list'}"

outdest= user=
eval `echo "$mailaddr" | sed -n 's/^\(.*\)!\([^!]*\)$/outdest=\1 user=\2/p'`
outdest=`echo $outdest | sed 's/^.*!\(.*\)$/\1/'`
if [ -z "$outdest" -o -z "$user" ]
then
	echo "$cmd: cannot determine output destination from $mailaddr" >&2
	retval=1
	exit
fi

# make sure no link matches the destination
for i in ${link}
do
	case ${i} in
	${target})
		echo "${cmd}: link [${i}] and target [${target}] files are the same" >&2
		exit 1
		;;
	esac
done

convertcompressed()
{
	zcat < $1 > $tmpfile2 ||
		{
		echo "${cmd}: error: problems uncompressing $1"
		exit 1
		}
	source=$tmpfile2
}

# make sure the source file exists.
if [ -r ${source} -a -f ${source} ]
then
    case "${source}" in
    *.Z )
	if [ "${look4compressed}" = yes ]
	then
		trap '$debug rm -f $tmpfile2' 0 1 2 3 15
		convertcompressed ${source}
	fi
	;;
    esac
elif [ "${look4compressed}" = yes -a -r ${source}.Z -a -f ${source}.Z ]
then
	trap '$debug rm -f $tmpfile2' 0 1 2 3 15
	convertcompressed ${source}.Z
else
	echo "${cmd}: error: file ${source} not found or not readable" >&2
	exit 1
fi

fsize=`ls -dl ${source} \
	| sed 's/^[^ ]*  *[^ ]*  *[^ ]*  *[^ ]*  *\([^ ]*\) .*/\1/'`
options="${options} -s${fsize}"
case ${fsize} in
0)
	echo "$cmd: warning: zero length input file"
	;;
esac

# Now is the time to arrange for certain temp files to disappear on exit.
# From this point on, $retval controls the exit code for this command.
trap "retval=1; exit" 1 2 3 15
trap "$debug rm -f ${tmpfile} ${tmpfile2};exit \${retval}" 0

# package it up with the password
if ${pkg_cmd} -Aupdate ${pwdfile} ${packargs} -M${mailaddr} -t ${target} ${linkargs} ${source} \
	> ${tmpfile}
then	: package ok
else
	echo "${cmd}: error: exit code $? from ${pkg_cmd}" >&2
	retval=1
	exit
fi

${batch:-batch} <<!!
    (
	${Debug}
	set -u
	trap "" 1 2
	retval=0
	trap "retval=1; exit" 3 15
	trap 'rm -f ${tmpfile}; exit \$retval' 0

	echo "Subject: repfile of ${source} to ${machines}\n"
	echo "${cmdline}"

	${mach_cmd} -f addr name==exphub \
	| ${net_cmd} \
	| ${send_cmd} -! "$RHUBCMD upd $pkgid NULL $outdest $user BEGIN $machines END $options" -M $mailaddr $tmpfile

	# just to be sure
	rm -f ${tmpfile}

    ) 2>&1 \
    | /bin/mail ${LOGNAME}
!!

trap "exit \$retval" 0
